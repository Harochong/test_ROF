
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	70 90 04 20 e9 19 00 00 a7 4c 00 00 bd 19 00 00     p.. .....L......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	bd 19 00 00 bd 19 00 00 bd 19 00 00 bd 19 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	c5 16 00 00 bd 19 00 00 00 00 00 00 bd 19 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	bd 19 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
			switch (*fmt) {
  c0:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
  d0:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
  e0:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
  f0:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
 100:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
 110:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
				align = VA_STACK_ALIGN(void *);
 120:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
			switch (*fmt) {
 130:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
 140:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	21 17 00 00                                         !...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x68>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
    __ASSERT(0, "Bootloader serial process was terminated unexpectedly.\n");
}
#endif

void main(void)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     426:	4b2e      	ldr	r3, [pc, #184]	; (4e0 <FIH_LABEL_FIH_CALL_END_337+0x66>)
     428:	4a2e      	ldr	r2, [pc, #184]	; (4e4 <FIH_LABEL_FIH_CALL_END_337+0x6a>)
     42a:	b085      	sub	sp, #20
     42c:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     430:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     434:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     438:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     43c:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     440:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     444:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     448:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
     44c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
     450:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
     454:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
     458:	f8c2 3608 	str.w	r3, [r2, #1544]	; 0x608
     45c:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
     460:	f8c2 3610 	str.w	r3, [r2, #1552]	; 0x610
     464:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
     468:	f8c2 3618 	str.w	r3, [r2, #1560]	; 0x618
     46c:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     470:	f000 f83c 	bl	4ec <os_heap_init>

00000474 <FIH_LABEL_FIH_CALL_START_325>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     474:	a801      	add	r0, sp, #4
     476:	f000 fe4b 	bl	1110 <boot_go>

0000047a <FIH_LABEL_FIH_CALL_END_337>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     47a:	4b1b      	ldr	r3, [pc, #108]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     47c:	681b      	ldr	r3, [r3, #0]
     47e:	4283      	cmp	r3, r0
     480:	d000      	beq.n	484 <FIH_LABEL_FIH_CALL_END_337+0xa>
         * recovery mode
         */
        boot_serial_enter();
#endif

        FIH_PANIC;
     482:	e7fe      	b.n	482 <FIH_LABEL_FIH_CALL_END_337+0x8>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
     488:	2000      	movs	r0, #0
     48a:	f002 fbd1 	bl	2c30 <fprotect_area>

    if (rc != 0) {
     48e:	4604      	mov	r4, r0
     490:	b100      	cbz	r0, 494 <FIH_LABEL_FIH_CALL_END_337+0x1a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
        while (1)
     492:	e7fe      	b.n	492 <FIH_LABEL_FIH_CALL_END_337+0x18>
            ;
    }

#if defined(CONFIG_SOC_NRF5340_CPUAPP) && defined(PM_CPUNET_B0N_ADDRESS)
    pcd_lock_ram();
     494:	f002 fc70 	bl	2d78 <pcd_lock_ram>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     498:	4669      	mov	r1, sp
     49a:	f89d 0008 	ldrb.w	r0, [sp, #8]
     49e:	f004 f8e9 	bl	4674 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4a2:	9b00      	ldr	r3, [sp, #0]
     4a4:	9d03      	ldr	r5, [sp, #12]
     4a6:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     4a8:	9b01      	ldr	r3, [sp, #4]
     4aa:	891e      	ldrh	r6, [r3, #8]
        sys_clock_disable();
     4ac:	f002 fba8 	bl	2c00 <sys_clock_disable>
                                     rsp->br_image_off +
     4b0:	19af      	adds	r7, r5, r6
    nrf_cleanup_peripheral();
     4b2:	f000 fe59 	bl	1168 <nrf_cleanup_peripheral>
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     4b6:	f000 fe3b 	bl	1130 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     4ba:	f001 fac5 	bl	1a48 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     4be:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     4c2:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4c6:	59ab      	ldr	r3, [r5, r6]
     4c8:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     4cc:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     4d0:	f3bf 8f6f 	isb	sy
     4d4:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     4d8:	687b      	ldr	r3, [r7, #4]
     4da:	4798      	blx	r3
    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
    while (1)
     4dc:	e7fe      	b.n	4dc <FIH_LABEL_FIH_CALL_END_337+0x62>
     4de:	bf00      	nop
     4e0:	6e524635 	.word	0x6e524635
     4e4:	50018000 	.word	0x50018000
     4e8:	200020e8 	.word	0x200020e8

000004ec <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     4ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     4f0:	4801      	ldr	r0, [pc, #4]	; (4f8 <os_heap_init+0xc>)
     4f2:	f002 bec7 	b.w	3284 <mbedtls_memory_buffer_alloc_init>
     4f6:	bf00      	nop
     4f8:	20004768 	.word	0x20004768

000004fc <bootutil_img_validate>:
fih_ret
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     500:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 6c4 <FIH_LABEL_FIH_CALL_END_795+0x12>
{
     504:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     506:	a838      	add	r0, sp, #224	; 0xe0
     508:	e9dd 7884 	ldrd	r7, r8, [sp, #528]	; 0x210
     50c:	4616      	mov	r6, r2
     50e:	461c      	mov	r4, r3
     510:	f8dd b218 	ldr.w	fp, [sp, #536]	; 0x218
    FIH_DECLARE(valid_signature, FIH_FAILURE);
     514:	f8da 5000 	ldr.w	r5, [sl]
     518:	f006 f8cc 	bl	66b4 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     51c:	2100      	movs	r1, #0
     51e:	a838      	add	r0, sp, #224	; 0xe0
     520:	f002 ffc4 	bl	34ac <mbedtls_sha256_starts>
    if (seed && (seed_len > 0)) {
     524:	b13f      	cbz	r7, 536 <bootutil_img_validate+0x3a>
     526:	f1b8 0f00 	cmp.w	r8, #0
     52a:	dd04      	ble.n	536 <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     52c:	4642      	mov	r2, r8
     52e:	4639      	mov	r1, r7
     530:	a838      	add	r0, sp, #224	; 0xe0
     532:	f006 f8c3 	bl	66bc <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     536:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
     53a:	8973      	ldrh	r3, [r6, #10]
    size = hdr_size = hdr->ih_hdr_size;
     53c:	8937      	ldrh	r7, [r6, #8]
     53e:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
     540:	68f3      	ldr	r3, [r6, #12]
     542:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
     544:	4547      	cmp	r7, r8
     546:	d846      	bhi.n	5d6 <FIH_LABEL_FIH_CALL_END_449+0xe>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     548:	a90d      	add	r1, sp, #52	; 0x34
     54a:	a838      	add	r0, sp, #224	; 0xe0
     54c:	f006 f8fa 	bl	6744 <mbedtls_sha256_finish>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     550:	f1bb 0f00 	cmp.w	fp, #0
     554:	d004      	beq.n	560 <bootutil_img_validate+0x64>
        memcpy(out_hash, hash, 32);
     556:	2220      	movs	r2, #32
     558:	4658      	mov	r0, fp
     55a:	a90d      	add	r1, sp, #52	; 0x34
     55c:	f004 fbf7 	bl	4d4e <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     560:	2300      	movs	r3, #0
     562:	4622      	mov	r2, r4
     564:	9300      	str	r3, [sp, #0]
     566:	4631      	mov	r1, r6
     568:	f64f 73ff 	movw	r3, #65535	; 0xffff
     56c:	a807      	add	r0, sp, #28
     56e:	f004 f89e 	bl	46ae <bootutil_tlv_iter_begin>
    if (rc) {
     572:	4680      	mov	r8, r0
     574:	bb60      	cbnz	r0, 5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
        goto out;
    }

    if (it.tlv_end > bootutil_max_image_size(fap)) {
     576:	4620      	mov	r0, r4
     578:	9e0c      	ldr	r6, [sp, #48]	; 0x30
     57a:	f004 f939 	bl	47f0 <bootutil_max_image_size>
     57e:	4286      	cmp	r6, r0
     580:	d826      	bhi.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
    int key_id = -1;
     582:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     586:	f8df 9140 	ldr.w	r9, [pc, #320]	; 6c8 <FIH_LABEL_FIH_CALL_END_795+0x16>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     58a:	f10d 0316 	add.w	r3, sp, #22
     58e:	aa05      	add	r2, sp, #20
     590:	a906      	add	r1, sp, #24
     592:	a807      	add	r0, sp, #28
     594:	f004 f8d9 	bl	474a <bootutil_tlv_iter_next>
        if (rc < 0) {
     598:	2800      	cmp	r0, #0
     59a:	db19      	blt.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
        } else if (rc > 0) {
     59c:	f040 808a 	bne.w	6b4 <FIH_LABEL_FIH_CALL_END_795+0x2>
        if (type == IMAGE_TLV_SHA256) {
     5a0:	f8bd 6016 	ldrh.w	r6, [sp, #22]
     5a4:	2e10      	cmp	r6, #16
     5a6:	d12e      	bne.n	606 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x2a>
            if (len != sizeof(hash)) {
     5a8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
     5ac:	2e20      	cmp	r6, #32
     5ae:	d10f      	bne.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5b0:	4633      	mov	r3, r6
     5b2:	4620      	mov	r0, r4
     5b4:	9906      	ldr	r1, [sp, #24]
     5b6:	aa38      	add	r2, sp, #224	; 0xe0
     5b8:	f004 fafb 	bl	4bb2 <flash_area_read>
            if (rc) {
     5bc:	b940      	cbnz	r0, 5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>

000005be <FIH_LABEL_FIH_CALL_START_433>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5be:	4632      	mov	r2, r6
     5c0:	a938      	add	r1, sp, #224	; 0xe0
     5c2:	a80d      	add	r0, sp, #52	; 0x34
     5c4:	f004 f90d 	bl	47e2 <boot_fih_memequal>

000005c8 <FIH_LABEL_FIH_CALL_END_449>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     5c8:	4b40      	ldr	r3, [pc, #256]	; (6cc <FIH_LABEL_FIH_CALL_END_795+0x1a>)
     5ca:	681b      	ldr	r3, [r3, #0]
     5cc:	4283      	cmp	r3, r0
     5ce:	d017      	beq.n	600 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x24>
    }
#endif

out:
    if (rc) {
        FIH_SET(fih_rc, FIH_FAILURE);
     5d0:	f8da 5000 	ldr.w	r5, [sl]
    }

    FIH_RET(fih_rc);
     5d4:	e071      	b.n	6ba <FIH_LABEL_FIH_CALL_END_795+0x8>
        if (blk_sz > tmp_buf_sz) {
     5d6:	9b83      	ldr	r3, [sp, #524]	; 0x20c
        blk_sz = size - off;
     5d8:	eba7 0908 	sub.w	r9, r7, r8
     5dc:	4599      	cmp	r9, r3
     5de:	bf28      	it	cs
     5e0:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     5e2:	4641      	mov	r1, r8
     5e4:	464b      	mov	r3, r9
     5e6:	4620      	mov	r0, r4
     5e8:	9a82      	ldr	r2, [sp, #520]	; 0x208
     5ea:	f004 fae2 	bl	4bb2 <flash_area_read>
        if (rc) {
     5ee:	2800      	cmp	r0, #0
     5f0:	d1ee      	bne.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     5f2:	464a      	mov	r2, r9
     5f4:	9982      	ldr	r1, [sp, #520]	; 0x208
     5f6:	a838      	add	r0, sp, #224	; 0xe0
     5f8:	f006 f860 	bl	66bc <mbedtls_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     5fc:	44c8      	add	r8, r9
     5fe:	e7a1      	b.n	544 <bootutil_img_validate+0x48>
            sha256_valid = 1;
     600:	f04f 0801 	mov.w	r8, #1
     604:	e7c1      	b.n	58a <bootutil_img_validate+0x8e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     606:	2e01      	cmp	r6, #1
     608:	d135      	bne.n	676 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x9a>
            if (len > 32) {
     60a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     60e:	2b20      	cmp	r3, #32
     610:	d8de      	bhi.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     612:	4620      	mov	r0, r4
     614:	9906      	ldr	r1, [sp, #24]
     616:	aa38      	add	r2, sp, #224	; 0xe0
     618:	f004 facb 	bl	4bb2 <flash_area_read>
            if (rc) {
     61c:	4607      	mov	r7, r0
     61e:	2800      	cmp	r0, #0
     620:	d1d6      	bne.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
            key_id = bootutil_find_key(buf, len);
     622:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     626:	f1bb 0f20 	cmp.w	fp, #32
     62a:	d902      	bls.n	632 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x56>
                key_id = -1;
     62c:	f04f 37ff 	mov.w	r7, #4294967295
     630:	e7ab      	b.n	58a <bootutil_img_validate+0x8e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     632:	f8d9 3000 	ldr.w	r3, [r9]
     636:	4e26      	ldr	r6, [pc, #152]	; (6d0 <FIH_LABEL_FIH_CALL_END_795+0x1e>)
     638:	9303      	str	r3, [sp, #12]
     63a:	9b03      	ldr	r3, [sp, #12]
     63c:	429f      	cmp	r7, r3
     63e:	daf5      	bge.n	62c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x50>
    mbedtls_sha256_init(ctx);
     640:	a81d      	add	r0, sp, #116	; 0x74
     642:	f006 f837 	bl	66b4 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     646:	2100      	movs	r1, #0
     648:	a81d      	add	r0, sp, #116	; 0x74
     64a:	f002 ff2f 	bl	34ac <mbedtls_sha256_starts>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     64e:	6872      	ldr	r2, [r6, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     650:	a81d      	add	r0, sp, #116	; 0x74
     652:	6812      	ldr	r2, [r2, #0]
     654:	f856 1b08 	ldr.w	r1, [r6], #8
     658:	f006 f830 	bl	66bc <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     65c:	a915      	add	r1, sp, #84	; 0x54
     65e:	a81d      	add	r0, sp, #116	; 0x74
     660:	f006 f870 	bl	6744 <mbedtls_sha256_finish>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     664:	465a      	mov	r2, fp
     666:	a938      	add	r1, sp, #224	; 0xe0
     668:	a815      	add	r0, sp, #84	; 0x54
     66a:	f004 fb49 	bl	4d00 <memcmp>
     66e:	2800      	cmp	r0, #0
     670:	d08b      	beq.n	58a <bootutil_img_validate+0x8e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     672:	3701      	adds	r7, #1
     674:	e7e1      	b.n	63a <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x5e>
        } else if (type == EXPECTED_SIG_TLV) {
     676:	2e20      	cmp	r6, #32
     678:	d187      	bne.n	58a <bootutil_img_validate+0x8e>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     67a:	1c7b      	adds	r3, r7, #1
     67c:	d085      	beq.n	58a <bootutil_img_validate+0x8e>
     67e:	f8d9 3000 	ldr.w	r3, [r9]
     682:	42bb      	cmp	r3, r7
     684:	ddd2      	ble.n	62c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x50>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     686:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     68a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     68e:	d19f      	bne.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     690:	4620      	mov	r0, r4
     692:	9906      	ldr	r1, [sp, #24]
     694:	aa38      	add	r2, sp, #224	; 0xe0
     696:	f004 fa8c 	bl	4bb2 <flash_area_read>
            if (rc) {
     69a:	2800      	cmp	r0, #0
     69c:	d198      	bne.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>

0000069e <FIH_LABEL_FIH_CALL_START_774>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     69e:	b2ff      	uxtb	r7, r7
     6a0:	4631      	mov	r1, r6
     6a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6a6:	9700      	str	r7, [sp, #0]
     6a8:	aa38      	add	r2, sp, #224	; 0xe0
     6aa:	a80d      	add	r0, sp, #52	; 0x34
     6ac:	f000 f812 	bl	6d4 <bootutil_verify_sig>
     6b0:	4605      	mov	r5, r0

000006b2 <FIH_LABEL_FIH_CALL_END_795>:
            key_id = -1;
     6b2:	e7bb      	b.n	62c <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x50>
    if (rc) {
     6b4:	f1b8 0f00 	cmp.w	r8, #0
     6b8:	d08a      	beq.n	5d0 <FIH_LABEL_FIH_CALL_END_449+0x8>
}
     6ba:	4628      	mov	r0, r5
     6bc:	b079      	add	sp, #484	; 0x1e4
     6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6c2:	bf00      	nop
     6c4:	20002008 	.word	0x20002008
     6c8:	00006ee8 	.word	0x00006ee8
     6cc:	200020e8 	.word	0x200020e8
     6d0:	00006eec 	.word	0x00006eec

000006d4 <bootutil_verify_sig>:
}

fih_ret
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_rsa_context ctx;
    int rc;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     6d8:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 890 <FIH_LABEL_FIH_CALL_END_607+0x4>
{
     6dc:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
     6e0:	4607      	mov	r7, r0
    uint8_t *cp;
    uint8_t *end;

#if MBEDTLS_VERSION_NUMBER >= 0x03000000
    mbedtls_rsa_init(&ctx);
     6e2:	a829      	add	r0, sp, #164	; 0xa4
{
     6e4:	f89d b358 	ldrb.w	fp, [sp, #856]	; 0x358
     6e8:	4689      	mov	r9, r1
     6ea:	4690      	mov	r8, r2
     6ec:	461e      	mov	r6, r3
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     6ee:	f8da 5000 	ldr.w	r5, [sl]
    mbedtls_rsa_init(&ctx);
     6f2:	f005 ff9c 	bl	662e <mbedtls_rsa_init>
#else
    mbedtls_rsa_init(&ctx, 0, 0);
#endif

    cp = (uint8_t *)bootutil_keys[key_id].key;
     6f6:	4b67      	ldr	r3, [pc, #412]	; (894 <FIH_LABEL_FIH_CALL_END_607+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     6f8:	aa8c      	add	r2, sp, #560	; 0x230
    cp = (uint8_t *)bootutil_keys[key_id].key;
     6fa:	f853 403b 	ldr.w	r4, [r3, fp, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     6fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
     702:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     704:	9404      	str	r4, [sp, #16]
    end = cp + *bootutil_keys[key_id].len;
     706:	681b      	ldr	r3, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     708:	a804      	add	r0, sp, #16
    end = cp + *bootutil_keys[key_id].len;
     70a:	441c      	add	r4, r3
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     70c:	4621      	mov	r1, r4
     70e:	2330      	movs	r3, #48	; 0x30
     710:	f004 fdb4 	bl	527c <mbedtls_asn1_get_tag>
     714:	bb70      	cbnz	r0, 774 <bootutil_verify_sig+0xa0>
    if (*p + len != end) {
     716:	9b04      	ldr	r3, [sp, #16]
     718:	9a8c      	ldr	r2, [sp, #560]	; 0x230
     71a:	4413      	add	r3, r2
     71c:	429c      	cmp	r4, r3
     71e:	d129      	bne.n	774 <bootutil_verify_sig+0xa0>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     720:	4621      	mov	r1, r4
     722:	aa2b      	add	r2, sp, #172	; 0xac
     724:	a804      	add	r0, sp, #16
     726:	f004 fdbd 	bl	52a4 <mbedtls_asn1_get_mpi>
     72a:	bb18      	cbnz	r0, 774 <bootutil_verify_sig+0xa0>
        (rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(E))) != 0) {
     72c:	f10d 0bb8 	add.w	fp, sp, #184	; 0xb8
     730:	465a      	mov	r2, fp
     732:	4621      	mov	r1, r4
     734:	a804      	add	r0, sp, #16
     736:	f004 fdb5 	bl	52a4 <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->MBEDTLS_CONTEXT_MEMBER(N))) != 0 ||
     73a:	9003      	str	r0, [sp, #12]
     73c:	b9d0      	cbnz	r0, 774 <bootutil_verify_sig+0xa0>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     73e:	a82b      	add	r0, sp, #172	; 0xac
     740:	f004 fea7 	bl	5492 <mbedtls_mpi_size>
    if (*p != end) {
     744:	9a04      	ldr	r2, [sp, #16]
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     746:	902a      	str	r0, [sp, #168]	; 0xa8
    if (*p != end) {
     748:	4294      	cmp	r4, r2
     74a:	d113      	bne.n	774 <bootutil_verify_sig+0xa0>
    rc = mbedtls_rsa_import(ctx, &ctx->MBEDTLS_CONTEXT_MEMBER(N), NULL,
     74c:	9b03      	ldr	r3, [sp, #12]
     74e:	f8cd b004 	str.w	fp, [sp, #4]
     752:	461a      	mov	r2, r3
     754:	9300      	str	r3, [sp, #0]
     756:	a92b      	add	r1, sp, #172	; 0xac
     758:	a829      	add	r0, sp, #164	; 0xa4
     75a:	f005 ff25 	bl	65a8 <mbedtls_rsa_import>
    if (rc != 0) {
     75e:	b948      	cbnz	r0, 774 <bootutil_verify_sig+0xa0>
    rc = mbedtls_rsa_check_pubkey(ctx);
     760:	a829      	add	r0, sp, #164	; 0xa4
     762:	f002 fe35 	bl	33d0 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     766:	b928      	cbnz	r0, 774 <bootutil_verify_sig+0xa0>
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     768:	a82b      	add	r0, sp, #172	; 0xac
     76a:	f004 fe92 	bl	5492 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     76e:	4286      	cmp	r6, r0
    ctx->MBEDTLS_CONTEXT_MEMBER(len) = mbedtls_mpi_size(&ctx->MBEDTLS_CONTEXT_MEMBER(N));
     770:	902a      	str	r0, [sp, #168]	; 0xa8
    if (rc || slen != ctx.MBEDTLS_CONTEXT_MEMBER(len)) {
     772:	d00a      	beq.n	78a <FIH_LABEL_FIH_CALL_START_231>
        mbedtls_rsa_free(&ctx);
     774:	a829      	add	r0, sp, #164	; 0xa4
     776:	f005 ff64 	bl	6642 <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     77a:	a829      	add	r0, sp, #164	; 0xa4
     77c:	f005 ff61 	bl	6642 <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     780:	4628      	mov	r0, r5
     782:	f50d 7d4d 	add.w	sp, sp, #820	; 0x334
     786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000078a <FIH_LABEL_FIH_CALL_START_231>:
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     78a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     78e:	f8da 5000 	ldr.w	r5, [sl]
    if (ctx->MBEDTLS_CONTEXT_MEMBER(len) != PSS_EMLEN ||
     792:	d17b      	bne.n	88c <FIH_LABEL_FIH_CALL_END_607>
    if (hlen != PSS_HLEN) {
     794:	f1b9 0f20 	cmp.w	r9, #32
     798:	d178      	bne.n	88c <FIH_LABEL_FIH_CALL_END_607>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     79a:	4641      	mov	r1, r8
     79c:	aa8c      	add	r2, sp, #560	; 0x230
     79e:	a829      	add	r0, sp, #164	; 0xa4
     7a0:	f002 fe3c 	bl	341c <mbedtls_rsa_public>
     7a4:	4604      	mov	r4, r0
     7a6:	2800      	cmp	r0, #0
     7a8:	d170      	bne.n	88c <FIH_LABEL_FIH_CALL_END_607>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     7aa:	f89d 332f 	ldrb.w	r3, [sp, #815]	; 0x32f
     7ae:	2bbc      	cmp	r3, #188	; 0xbc
     7b0:	d16c      	bne.n	88c <FIH_LABEL_FIH_CALL_END_607>
    int count = PSS_MASK_LEN;
     7b2:	26df      	movs	r6, #223	; 0xdf
    uint8_t counter[4] = { 0, 0, 0, 0 };
     7b4:	9005      	str	r0, [sp, #20]
     7b6:	f50d 79a8 	add.w	r9, sp, #336	; 0x150
    mbedtls_sha256_init(ctx);
     7ba:	a80e      	add	r0, sp, #56	; 0x38
     7bc:	f005 ff7a 	bl	66b4 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     7c0:	2100      	movs	r1, #0
     7c2:	a80e      	add	r0, sp, #56	; 0x38
     7c4:	f002 fe72 	bl	34ac <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     7c8:	2220      	movs	r2, #32
     7ca:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     7ce:	a80e      	add	r0, sp, #56	; 0x38
     7d0:	f005 ff74 	bl	66bc <mbedtls_sha256_update>
     7d4:	2204      	movs	r2, #4
     7d6:	a905      	add	r1, sp, #20
     7d8:	a80e      	add	r0, sp, #56	; 0x38
     7da:	f005 ff6f 	bl	66bc <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     7de:	a906      	add	r1, sp, #24
     7e0:	a80e      	add	r0, sp, #56	; 0x38
     7e2:	f005 ffaf 	bl	6744 <mbedtls_sha256_finish>
        if (bytes > count)
     7e6:	2e20      	cmp	r6, #32
     7e8:	46b0      	mov	r8, r6
     7ea:	bfa8      	it	ge
     7ec:	f04f 0820 	movge.w	r8, #32
        counter[3]++;
     7f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     7f4:	4648      	mov	r0, r9
        counter[3]++;
     7f6:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     7f8:	4642      	mov	r2, r8
     7fa:	a906      	add	r1, sp, #24
        count -= bytes;
     7fc:	eba6 0608 	sub.w	r6, r6, r8
        counter[3]++;
     800:	f88d 3017 	strb.w	r3, [sp, #23]
        memcpy(mask, htmp, bytes);
     804:	f004 faa3 	bl	4d4e <memcpy>
    while (count > 0) {
     808:	2e00      	cmp	r6, #0
        mask += bytes;
     80a:	44c1      	add	r9, r8
    while (count > 0) {
     80c:	dcd5      	bgt.n	7ba <FIH_LABEL_FIH_CALL_START_231+0x30>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     80e:	ab54      	add	r3, sp, #336	; 0x150
     810:	4618      	mov	r0, r3
     812:	2100      	movs	r1, #0
     814:	469c      	mov	ip, r3
     816:	aa8c      	add	r2, sp, #560	; 0x230
        db_mask[i] ^= em[i];
     818:	7806      	ldrb	r6, [r0, #0]
     81a:	f812 eb01 	ldrb.w	lr, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     81e:	3101      	adds	r1, #1
        db_mask[i] ^= em[i];
     820:	ea86 060e 	eor.w	r6, r6, lr
    for (i = 0; i < PSS_MASK_LEN; i++) {
     824:	29df      	cmp	r1, #223	; 0xdf
        db_mask[i] ^= em[i];
     826:	f800 6b01 	strb.w	r6, [r0], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     82a:	d1f5      	bne.n	818 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x18>
    db_mask[0] &= 0x7F;
     82c:	781a      	ldrb	r2, [r3, #0]
     82e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     832:	701a      	strb	r2, [r3, #0]
        if (db_mask[i] != 0) {
     834:	f813 6b01 	ldrb.w	r6, [r3], #1
     838:	bb46      	cbnz	r6, 88c <FIH_LABEL_FIH_CALL_END_607>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     83a:	3401      	adds	r4, #1
     83c:	2cbe      	cmp	r4, #190	; 0xbe
     83e:	d1f9      	bne.n	834 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x34>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     840:	f89c 30be 	ldrb.w	r3, [ip, #190]	; 0xbe
     844:	2b01      	cmp	r3, #1
     846:	d121      	bne.n	88c <FIH_LABEL_FIH_CALL_END_607>
    mbedtls_sha256_init(ctx);
     848:	a80e      	add	r0, sp, #56	; 0x38
     84a:	f005 ff33 	bl	66b4 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     84e:	4631      	mov	r1, r6
     850:	a80e      	add	r0, sp, #56	; 0x38
     852:	f002 fe2b 	bl	34ac <mbedtls_sha256_starts>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     856:	2208      	movs	r2, #8
     858:	490f      	ldr	r1, [pc, #60]	; (898 <FIH_LABEL_FIH_CALL_END_607+0xc>)
     85a:	a80e      	add	r0, sp, #56	; 0x38
     85c:	f005 ff2e 	bl	66bc <mbedtls_sha256_update>
     860:	4639      	mov	r1, r7
     862:	2220      	movs	r2, #32
     864:	a80e      	add	r0, sp, #56	; 0x38
     866:	f005 ff29 	bl	66bc <mbedtls_sha256_update>
     86a:	2220      	movs	r2, #32
     86c:	f20d 210f 	addw	r1, sp, #527	; 0x20f
     870:	a80e      	add	r0, sp, #56	; 0x38
     872:	f005 ff23 	bl	66bc <mbedtls_sha256_update>
    return mbedtls_sha256_finish_ret(ctx, output);
     876:	a906      	add	r1, sp, #24
     878:	a80e      	add	r0, sp, #56	; 0x38
     87a:	f005 ff63 	bl	6744 <mbedtls_sha256_finish>

0000087e <FIH_LABEL_FIH_CALL_START_591>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     87e:	2220      	movs	r2, #32
     880:	f20d 310f 	addw	r1, sp, #783	; 0x30f
     884:	a806      	add	r0, sp, #24
     886:	f003 ffac 	bl	47e2 <boot_fih_memequal>
     88a:	4605      	mov	r5, r0

0000088c <FIH_LABEL_FIH_CALL_END_607>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     88c:	e775      	b.n	77a <bootutil_verify_sig+0xa6>
     88e:	bf00      	nop
     890:	20002008 	.word	0x20002008
     894:	00006eec 	.word	0x00006eec
     898:	000072be 	.word	0x000072be

0000089c <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         FIH_NO_BOOTABLE_IMAGE            if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_ret
boot_validate_slot(struct boot_loader_state *state, int slot,
     89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     8a0:	4b58      	ldr	r3, [pc, #352]	; (a04 <FIH_LABEL_FIH_CALL_END_613+0xd2>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     8a2:	b089      	sub	sp, #36	; 0x24
     8a4:	4604      	mov	r4, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8a6:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
boot_validate_slot(struct boot_loader_state *state, int slot,
     8aa:	460e      	mov	r6, r1
    FIH_DECLARE(fih_rc, FIH_FAILURE);
     8ac:	681d      	ldr	r5, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8ae:	f003 fee7 	bl	4680 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     8b2:	a906      	add	r1, sp, #24
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8b4:	4680      	mov	r8, r0
    rc = flash_area_open(area_id, &fap);
     8b6:	b2c0      	uxtb	r0, r0
     8b8:	f000 fe28 	bl	150c <flash_area_open>
    if (rc != 0) {
     8bc:	2800      	cmp	r0, #0
     8be:	d16f      	bne.n	9a0 <FIH_LABEL_FIH_CALL_END_613+0x6e>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     8c0:	f894 70b8 	ldrb.w	r7, [r4, #184]	; 0xb8
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8c4:	4631      	mov	r1, r6
     8c6:	4638      	mov	r0, r7
     8c8:	f003 feda 	bl	4680 <flash_area_id_from_multi_image_slot>
     8cc:	f04f 092c 	mov.w	r9, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     8d0:	a907      	add	r1, sp, #28
     8d2:	b2c0      	uxtb	r0, r0
     8d4:	fb09 f906 	mul.w	r9, r9, r6
     8d8:	f000 fe18 	bl	150c <flash_area_open>
    if (rc != 0) {
     8dc:	2800      	cmp	r0, #0
     8de:	d045      	beq.n	96c <FIH_LABEL_FIH_CALL_END_613+0x3a>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     8e0:	f04f 0b58 	mov.w	fp, #88	; 0x58
     8e4:	222c      	movs	r2, #44	; 0x2c
     8e6:	fb0b f307 	mul.w	r3, fp, r7
     8ea:	fb02 3306 	mla	r3, r2, r6, r3
     8ee:	4423      	add	r3, r4
     8f0:	691b      	ldr	r3, [r3, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     8f2:	f013 0a10 	ands.w	sl, r3, #16
     8f6:	d14e      	bne.n	996 <FIH_LABEL_FIH_CALL_END_613+0x64>

000008f8 <FIH_LABEL_FIH_CALL_START_522>:
            fih_rc = FIH_NO_BOOTABLE_IMAGE;
            goto out;
        }
    }
#endif
    BOOT_HOOK_CALL_FIH(boot_image_check_hook, FIH_BOOT_HOOK_REGULAR,
     8f8:	4631      	mov	r1, r6
     8fa:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     8fe:	f002 fa59 	bl	2db4 <boot_image_check_hook>
     902:	4605      	mov	r5, r0

00000904 <FIH_LABEL_FIH_CALL_END_537>:
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (FIH_EQ(fih_rc, FIH_BOOT_HOOK_REGULAR))
     904:	4b40      	ldr	r3, [pc, #256]	; (a08 <FIH_LABEL_FIH_CALL_END_613+0xd6>)
     906:	681b      	ldr	r3, [r3, #0]
     908:	4298      	cmp	r0, r3
     90a:	d112      	bne.n	932 <FIH_LABEL_FIH_CALL_END_613>

0000090c <FIH_LABEL_FIH_CALL_START_553>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     90c:	f44f 7380 	mov.w	r3, #256	; 0x100
     910:	fb07 920b 	mla	r2, r7, fp, r9
     914:	9301      	str	r3, [sp, #4]
     916:	e9cd aa03 	strd	sl, sl, [sp, #12]
     91a:	4b3c      	ldr	r3, [pc, #240]	; (a0c <FIH_LABEL_FIH_CALL_END_613+0xda>)
     91c:	f8cd a008 	str.w	sl, [sp, #8]
     920:	9300      	str	r3, [sp, #0]
     922:	4650      	mov	r0, sl
     924:	9b06      	ldr	r3, [sp, #24]
     926:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     92a:	4422      	add	r2, r4
     92c:	f7ff fde6 	bl	4fc <bootutil_img_validate>
     930:	4605      	mov	r5, r0

00000932 <FIH_LABEL_FIH_CALL_END_613>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     932:	2358      	movs	r3, #88	; 0x58
     934:	435f      	muls	r7, r3
     936:	232c      	movs	r3, #44	; 0x2c
     938:	fb03 7706 	mla	r7, r3, r6, r7
     93c:	4a34      	ldr	r2, [pc, #208]	; (a10 <FIH_LABEL_FIH_CALL_END_613+0xde>)
     93e:	59e1      	ldr	r1, [r4, r7]
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     940:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     942:	4291      	cmp	r1, r2
     944:	eb04 0307 	add.w	r3, r4, r7
     948:	d10a      	bne.n	960 <FIH_LABEL_FIH_CALL_END_613+0x2e>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     94a:	68da      	ldr	r2, [r3, #12]
     94c:	891b      	ldrh	r3, [r3, #8]
    if (a > UINT32_MAX - b) {
     94e:	189b      	adds	r3, r3, r2
     950:	d206      	bcs.n	960 <FIH_LABEL_FIH_CALL_END_613+0x2e>
    if (size >= flash_area_get_size(fap)) {
     952:	6882      	ldr	r2, [r0, #8]
     954:	4293      	cmp	r3, r2
     956:	d203      	bcs.n	960 <FIH_LABEL_FIH_CALL_END_613+0x2e>
    if (!boot_is_header_valid(hdr, fap) || FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     958:	4b2e      	ldr	r3, [pc, #184]	; (a14 <FIH_LABEL_FIH_CALL_END_613+0xe2>)
     95a:	681b      	ldr	r3, [r3, #0]
     95c:	42ab      	cmp	r3, r5
     95e:	d023      	beq.n	9a8 <FIH_LABEL_FIH_CALL_END_613+0x76>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     960:	b1ce      	cbz	r6, 996 <FIH_LABEL_FIH_CALL_END_613+0x64>
             * slot does not target the primary slot. This might
             * indicate that the image was loaded to the wrong slot.
             *
             * Erase the image and continue booting from the primary slot.
             */
            flash_area_erase(fap, 0, fap->fa_size);
     962:	2100      	movs	r1, #0
     964:	6882      	ldr	r2, [r0, #8]
     966:	f004 f94e 	bl	4c06 <flash_area_erase>
     96a:	e014      	b.n	996 <FIH_LABEL_FIH_CALL_END_613+0x64>
    erased_val = flash_area_erased_val(fap);
     96c:	9807      	ldr	r0, [sp, #28]
     96e:	f004 f965 	bl	4c3c <flash_area_erased_val>
     972:	4605      	mov	r5, r0
    flash_area_close(fap);
     974:	9807      	ldr	r0, [sp, #28]
     976:	f004 f91b 	bl	4bb0 <flash_area_close>
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
     97a:	2358      	movs	r3, #88	; 0x58
     97c:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
     980:	fb02 9303 	mla	r3, r2, r3, r9
     984:	4423      	add	r3, r4
    for (i = 0; i < len; i++) {
     986:	1e5a      	subs	r2, r3, #1
     988:	3303      	adds	r3, #3
        if (val != p[i]) {
     98a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     98e:	42a9      	cmp	r1, r5
     990:	d1a6      	bne.n	8e0 <boot_validate_slot.isra.0+0x44>
    for (i = 0; i < len; i++) {
     992:	429a      	cmp	r2, r3
     994:	d1f9      	bne.n	98a <FIH_LABEL_FIH_CALL_END_613+0x58>
            fih_rc = FIH_NO_BOOTABLE_IMAGE;
     996:	4b20      	ldr	r3, [pc, #128]	; (a18 <FIH_LABEL_FIH_CALL_END_613+0xe6>)
     998:	681d      	ldr	r5, [r3, #0]
        }
    }
#endif

out:
    flash_area_close(fap);
     99a:	9806      	ldr	r0, [sp, #24]
     99c:	f004 f908 	bl	4bb0 <flash_area_close>

    FIH_RET(fih_rc);
}
     9a0:	4628      	mov	r0, r5
     9a2:	b009      	add	sp, #36	; 0x24
     9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     9a8:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     9ac:	b343      	cbz	r3, a00 <FIH_LABEL_FIH_CALL_END_613+0xce>
     9ae:	2b01      	cmp	r3, #1
     9b0:	bf0c      	ite	eq
     9b2:	2208      	moveq	r2, #8
     9b4:	22ff      	movne	r2, #255	; 0xff
     9b6:	4590      	cmp	r8, r2
     9b8:	d1ef      	bne.n	99a <FIH_LABEL_FIH_CALL_END_613+0x68>
        const struct flash_area *pri_fa = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT);
     9ba:	2258      	movs	r2, #88	; 0x58
     9bc:	4353      	muls	r3, r2
     9be:	18e2      	adds	r2, r4, r3
     9c0:	6a17      	ldr	r7, [r2, #32]
        uint32_t reset_value = 0;
     9c2:	2200      	movs	r2, #0
     9c4:	9207      	str	r2, [sp, #28]
        uint32_t reset_addr = secondary_hdr->ih_hdr_size + sizeof(reset_value);
     9c6:	222c      	movs	r2, #44	; 0x2c
     9c8:	fb02 3306 	mla	r3, r2, r6, r3
     9cc:	4423      	add	r3, r4
     9ce:	8919      	ldrh	r1, [r3, #8]
        rc = flash_area_read(fap, reset_addr, &reset_value, sizeof(reset_value));
     9d0:	2304      	movs	r3, #4
     9d2:	aa07      	add	r2, sp, #28
     9d4:	4419      	add	r1, r3
     9d6:	f004 f8ec 	bl	4bb2 <flash_area_read>
        if (rc != 0) {
     9da:	2800      	cmp	r0, #0
     9dc:	d1db      	bne.n	996 <FIH_LABEL_FIH_CALL_END_613+0x64>
        if (BOOT_CURR_IMG(state) == 1) {
     9de:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (reset_value < min_addr || reset_value> (max_addr)) {
     9e2:	9907      	ldr	r1, [sp, #28]
        if (BOOT_CURR_IMG(state) == 1) {
     9e4:	2b01      	cmp	r3, #1
            min_addr = PM_CPUNET_APP_ADDRESS;
     9e6:	bf0b      	itete	eq
     9e8:	4a0c      	ldreq	r2, [pc, #48]	; (a1c <FIH_LABEL_FIH_CALL_END_613+0xea>)
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     9ea:	e9d7 2301 	ldrdne	r2, r3, [r7, #4]
            max_addr = PM_CPUNET_APP_ADDRESS + PM_CPUNET_APP_SIZE;
     9ee:	f04f 7382 	moveq.w	r3, #17039360	; 0x1040000
            max_addr = pri_fa->fa_off + pri_fa->fa_size;
     9f2:	189b      	addne	r3, r3, r2
        if (reset_value < min_addr || reset_value> (max_addr)) {
     9f4:	4291      	cmp	r1, r2
     9f6:	d301      	bcc.n	9fc <FIH_LABEL_FIH_CALL_END_613+0xca>
     9f8:	4299      	cmp	r1, r3
     9fa:	d9ce      	bls.n	99a <FIH_LABEL_FIH_CALL_END_613+0x68>
            flash_area_erase(fap, 0, fap->fa_size);
     9fc:	9806      	ldr	r0, [sp, #24]
     9fe:	e7b0      	b.n	962 <FIH_LABEL_FIH_CALL_END_613+0x30>
    if (area_id == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
     a00:	2202      	movs	r2, #2
     a02:	e7d8      	b.n	9b6 <FIH_LABEL_FIH_CALL_END_613+0x84>
     a04:	20002008 	.word	0x20002008
     a08:	20002000 	.word	0x20002000
     a0c:	20005f68 	.word	0x20005f68
     a10:	96f3b83d 	.word	0x96f3b83d
     a14:	200020e8 	.word	0x200020e8
     a18:	20002004 	.word	0x20002004
     a1c:	01008800 	.word	0x01008800

00000a20 <boot_copy_region>:
int
boot_copy_region(struct boot_loader_state *state,
                 const struct flash_area *fap_src,
                 const struct flash_area *fap_dst,
                 uint32_t off_src, uint32_t off_dst, uint32_t sz)
{
     a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a24:	4688      	mov	r8, r1
     a26:	4691      	mov	r9, r2
     a28:	469a      	mov	sl, r3

#if !defined(MCUBOOT_ENC_IMAGES)
    (void)state;
#endif

    bytes_copied = 0;
     a2a:	2600      	movs	r6, #0
            chunk_sz = sizeof buf;
        } else {
            chunk_sz = sz - bytes_copied;
        }

        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a2c:	f8df b08c 	ldr.w	fp, [pc, #140]	; abc <boot_copy_region+0x9c>
     a30:	4d23      	ldr	r5, [pc, #140]	; (ac0 <boot_copy_region+0xa0>)
     a32:	4c24      	ldr	r4, [pc, #144]	; (ac4 <boot_copy_region+0xa4>)
    while (bytes_copied < sz) {
     a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a36:	429e      	cmp	r6, r3
     a38:	d301      	bcc.n	a3e <boot_copy_region+0x1e>
        bytes_copied += chunk_sz;

        MCUBOOT_WATCHDOG_FEED();
    }

    return 0;
     a3a:	2000      	movs	r0, #0
     a3c:	e00f      	b.n	a5e <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a40:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     a42:	1b9f      	subs	r7, r3, r6
     a44:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a48:	bf28      	it	cs
     a4a:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a4e:	4a1b      	ldr	r2, [pc, #108]	; (abc <boot_copy_region+0x9c>)
     a50:	463b      	mov	r3, r7
     a52:	eb06 010a 	add.w	r1, r6, sl
     a56:	f004 f8ac 	bl	4bb2 <flash_area_read>
        if (rc != 0) {
     a5a:	b110      	cbz	r0, a62 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     a5c:	2001      	movs	r0, #1
}
     a5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a62:	990a      	ldr	r1, [sp, #40]	; 0x28
     a64:	463b      	mov	r3, r7
     a66:	465a      	mov	r2, fp
     a68:	4648      	mov	r0, r9
     a6a:	1871      	adds	r1, r6, r1
     a6c:	f004 f8b6 	bl	4bdc <flash_area_write>
        if (rc != 0) {
     a70:	2800      	cmp	r0, #0
     a72:	d1f3      	bne.n	a5c <boot_copy_region+0x3c>
     a74:	4b14      	ldr	r3, [pc, #80]	; (ac8 <boot_copy_region+0xa8>)
     a76:	f8c5 4600 	str.w	r4, [r5, #1536]	; 0x600
        bytes_copied += chunk_sz;
     a7a:	443e      	add	r6, r7
     a7c:	f8c5 4604 	str.w	r4, [r5, #1540]	; 0x604
     a80:	f8c5 4608 	str.w	r4, [r5, #1544]	; 0x608
     a84:	f8c5 460c 	str.w	r4, [r5, #1548]	; 0x60c
     a88:	f8c5 4610 	str.w	r4, [r5, #1552]	; 0x610
     a8c:	f8c5 4614 	str.w	r4, [r5, #1556]	; 0x614
     a90:	f8c5 4618 	str.w	r4, [r5, #1560]	; 0x618
     a94:	f8c5 461c 	str.w	r4, [r5, #1564]	; 0x61c
     a98:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
     a9c:	f8c3 4604 	str.w	r4, [r3, #1540]	; 0x604
     aa0:	f8c3 4608 	str.w	r4, [r3, #1544]	; 0x608
     aa4:	f8c3 460c 	str.w	r4, [r3, #1548]	; 0x60c
     aa8:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
     aac:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
     ab0:	f8c3 4618 	str.w	r4, [r3, #1560]	; 0x618
     ab4:	f8c3 461c 	str.w	r4, [r3, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     ab8:	e7bc      	b.n	a34 <boot_copy_region+0x14>
     aba:	bf00      	nop
     abc:	200040ec 	.word	0x200040ec
     ac0:	50018000 	.word	0x50018000
     ac4:	6e524635 	.word	0x6e524635
     ac8:	50019000 	.word	0x50019000

00000acc <context_boot_go>:
#endif
}

fih_ret
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Iterate over all the images. By the end of the loop the swap type has
     * to be determined for each image and all aborted swaps have to be
     * completed.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     ad0:	2600      	movs	r6, #0
{
     ad2:	4604      	mov	r4, r0
     ad4:	460d      	mov	r5, r1
    has_upgrade = false;
     ad6:	46b0      	mov	r8, r6
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     ad8:	2758      	movs	r7, #88	; 0x58
            primary_slot_sectors[image_index];
     ada:	f8df 92cc 	ldr.w	r9, [pc, #716]	; da8 <FIH_LABEL_FIH_CALL_END_2172+0x138>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
            secondary_slot_sectors[image_index];
     ade:	f8df a2cc 	ldr.w	sl, [pc, #716]	; dac <FIH_LABEL_FIH_CALL_END_2172+0x13c>
{
     ae2:	b095      	sub	sp, #84	; 0x54
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     ae4:	2e01      	cmp	r6, #1
     ae6:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
     aea:	d907      	bls.n	afc <context_boot_go+0x30>
            has_upgrade = true;
        }
    }

#if (BOOT_IMAGE_NUMBER > 1)
    if (has_upgrade) {
     aec:	f1b8 0f00 	cmp.w	r8, #0
     af0:	f000 8140 	beq.w	d74 <FIH_LABEL_FIH_CALL_END_2172+0x104>
     af4:	2000      	movs	r0, #0
    return &BOOT_IMG(state, slot).hdr;
     af6:	262c      	movs	r6, #44	; 0x2c
     af8:	2758      	movs	r7, #88	; 0x58
     afa:	e0cd      	b.n	c98 <FIH_LABEL_FIH_CALL_END_2172+0x28>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     afc:	19a3      	adds	r3, r4, r6
     afe:	f893 10b9 	ldrb.w	r1, [r3, #185]	; 0xb9
     b02:	2900      	cmp	r1, #0
     b04:	d14b      	bne.n	b9e <context_boot_go+0xd2>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b06:	fb07 4306 	mla	r3, r7, r6, r4
            primary_slot_sectors[image_index];
     b0a:	eb09 22c6 	add.w	r2, r9, r6, lsl #11
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b0e:	625a      	str	r2, [r3, #36]	; 0x24
            secondary_slot_sectors[image_index];
     b10:	eb0a 22c6 	add.w	r2, sl, r6, lsl #11
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b14:	651a      	str	r2, [r3, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b16:	4630      	mov	r0, r6
     b18:	f003 fdb2 	bl	4680 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b1c:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     b20:	b2c0      	uxtb	r0, r0
     b22:	fb07 4101 	mla	r1, r7, r1, r4
     b26:	3120      	adds	r1, #32
     b28:	f000 fcf0 	bl	150c <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b2c:	2101      	movs	r1, #1
     b2e:	4630      	mov	r0, r6
     b30:	f003 fda6 	bl	4680 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b34:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     b38:	b2c0      	uxtb	r0, r0
     b3a:	fb07 4101 	mla	r1, r7, r1, r4
     b3e:	314c      	adds	r1, #76	; 0x4c
     b40:	f000 fce4 	bl	150c <flash_area_open>
    rc = boot_read_sectors(state);
     b44:	4620      	mov	r0, r4
     b46:	f003 fe86 	bl	4856 <boot_read_sectors>
    if (rc != 0) {
     b4a:	bb00      	cbnz	r0, b8e <context_boot_go+0xc2>
    rc = boot_read_image_headers(state, false, NULL);
     b4c:	2200      	movs	r2, #0
     b4e:	4620      	mov	r0, r4
     b50:	4611      	mov	r1, r2
     b52:	f003 feae 	bl	48b2 <boot_read_image_headers>
    if (rc != 0) {
     b56:	4683      	mov	fp, r0
     b58:	b990      	cbnz	r0, b80 <context_boot_go+0xb4>
    if (boot_slots_compatible(state)) {
     b5a:	4620      	mov	r0, r4
     b5c:	f003 ff0a 	bl	4974 <boot_slots_compatible>
     b60:	b170      	cbz	r0, b80 <context_boot_go+0xb4>
        boot_status_reset(bs);
     b62:	a80a      	add	r0, sp, #40	; 0x28
     b64:	f003 fed4 	bl	4910 <boot_status_reset>
        if (!boot_status_is_reset(bs)) {
     b68:	f003 fedb 	bl	4922 <boot_status_is_reset>
     b6c:	4606      	mov	r6, r0
     b6e:	bb60      	cbnz	r0, bca <context_boot_go+0xfe>
    if (BOOT_CURR_IMG(state) == 0) {
     b70:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     b74:	b9c3      	cbnz	r3, ba8 <context_boot_go+0xdc>
            rc = boot_read_image_headers(state, false, bs);
     b76:	2100      	movs	r1, #0
     b78:	4620      	mov	r0, r4
     b7a:	aa0a      	add	r2, sp, #40	; 0x28
     b7c:	f003 fe99 	bl	48b2 <boot_read_image_headers>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b80:	2201      	movs	r2, #1
     b82:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     b86:	4423      	add	r3, r4
     b88:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     b8c:	e007      	b.n	b9e <context_boot_go+0xd2>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b8e:	2201      	movs	r2, #1
     b90:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
        if (rc == BOOT_EFLASH)
     b94:	4290      	cmp	r0, r2
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b96:	4423      	add	r3, r4
     b98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if (rc == BOOT_EFLASH)
     b9c:	d1d6      	bne.n	b4c <context_boot_go+0x80>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     b9e:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
     ba2:	3601      	adds	r6, #1
     ba4:	b2f6      	uxtb	r6, r6
     ba6:	e79d      	b.n	ae4 <context_boot_go+0x18>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     ba8:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     bac:	2a04      	cmp	r2, #4
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     bae:	bf04      	itt	eq
     bb0:	2201      	moveq	r2, #1
     bb2:	f884 20b0 	strbeq.w	r2, [r4, #176]	; 0xb0
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     bb6:	2b01      	cmp	r3, #1
     bb8:	d0dd      	beq.n	b76 <context_boot_go+0xaa>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     bba:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
     bbe:	2b04      	cmp	r3, #4
     bc0:	d1d9      	bne.n	b76 <context_boot_go+0xaa>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     bc2:	2301      	movs	r3, #1
     bc4:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
    for (uint8_t i = 0; i < BOOT_CURR_IMG(state); i++) {
     bc8:	e7d5      	b.n	b76 <context_boot_go+0xaa>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     bca:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
     bce:	2b01      	cmp	r3, #1
     bd0:	d14a      	bne.n	c68 <FIH_LABEL_FIH_CALL_START_2158>
    const struct flash_area *secondary_fa =
     bd2:	2258      	movs	r2, #88	; 0x58
        BOOT_IMG_AREA(state, BOOT_SECONDARY_SLOT);
     bd4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    uint32_t reset_addr = 0;
     bd8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    const struct flash_area *secondary_fa =
     bdc:	fb02 4303 	mla	r3, r2, r3, r4
    if (hdr->ih_magic == IMAGE_MAGIC) {
     be0:	4a73      	ldr	r2, [pc, #460]	; (db0 <FIH_LABEL_FIH_CALL_END_2172+0x140>)
     be2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    const struct flash_area *secondary_fa =
     be4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    if (hdr->ih_magic == IMAGE_MAGIC) {
     be6:	4291      	cmp	r1, r2
     be8:	d016      	beq.n	c18 <FIH_LABEL_FIH_CALL_END_2015+0x16>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bea:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     bee:	f002 f989 	bl	2f04 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     bf2:	1e83      	subs	r3, r0, #2
     bf4:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bf6:	4683      	mov	fp, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     bf8:	d818      	bhi.n	c2c <FIH_LABEL_FIH_CALL_END_2015+0x2a>

00000bfa <FIH_LABEL_FIH_CALL_START_2000>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     bfa:	2101      	movs	r1, #1
     bfc:	4620      	mov	r0, r4
     bfe:	f7ff fe4d 	bl	89c <boot_validate_slot.isra.0>

00000c02 <FIH_LABEL_FIH_CALL_END_2015>:
        if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     c02:	4b6c      	ldr	r3, [pc, #432]	; (db4 <FIH_LABEL_FIH_CALL_END_2172+0x144>)
     c04:	681b      	ldr	r3, [r3, #0]
     c06:	4298      	cmp	r0, r3
     c08:	d010      	beq.n	c2c <FIH_LABEL_FIH_CALL_END_2015+0x2a>
            if (FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     c0a:	4b6b      	ldr	r3, [pc, #428]	; (db8 <FIH_LABEL_FIH_CALL_END_2172+0x148>)
     c0c:	681b      	ldr	r3, [r3, #0]
     c0e:	4298      	cmp	r0, r3
     c10:	d10a      	bne.n	c28 <FIH_LABEL_FIH_CALL_END_2015+0x26>
                swap_type = BOOT_SWAP_TYPE_NONE;
     c12:	f04f 0b01 	mov.w	fp, #1
     c16:	e009      	b.n	c2c <FIH_LABEL_FIH_CALL_END_2015+0x2a>
        rc = flash_area_read(secondary_fa, hdr->ih_hdr_size +
     c18:	8e99      	ldrh	r1, [r3, #52]	; 0x34
     c1a:	2304      	movs	r3, #4
     c1c:	aa0e      	add	r2, sp, #56	; 0x38
     c1e:	4419      	add	r1, r3
     c20:	f003 ffc7 	bl	4bb2 <flash_area_read>
        if (rc != 0) {
     c24:	2800      	cmp	r0, #0
     c26:	d0e0      	beq.n	bea <context_boot_go+0x11e>
            return BOOT_SWAP_TYPE_FAIL;
     c28:	f04f 0b05 	mov.w	fp, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c2c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     c30:	4423      	add	r3, r4
     c32:	f883 b0b0 	strb.w	fp, [r3, #176]	; 0xb0
    if (BOOT_CURR_IMG(state) == 0) {
     c36:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     c3a:	b16b      	cbz	r3, c58 <FIH_LABEL_FIH_CALL_END_2015+0x56>
        if ((BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_NONE) ||
     c3c:	18e2      	adds	r2, r4, r3
     c3e:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
     c42:	2a01      	cmp	r2, #1
     c44:	d0ab      	beq.n	b9e <context_boot_go+0xd2>
     c46:	2a04      	cmp	r2, #4
     c48:	d00c      	beq.n	c64 <FIH_LABEL_FIH_CALL_END_2015+0x62>
        if (state->swap_type[i] == BOOT_SWAP_TYPE_REVERT) {
     c4a:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
     c4e:	2a04      	cmp	r2, #4
     c50:	d102      	bne.n	c58 <FIH_LABEL_FIH_CALL_END_2015+0x56>
            state->swap_type[i] = BOOT_SWAP_TYPE_NONE;
     c52:	2201      	movs	r2, #1
     c54:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c58:	4423      	add	r3, r4
     c5a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     c5e:	3b02      	subs	r3, #2
     c60:	2b02      	cmp	r3, #2
     c62:	d89c      	bhi.n	b9e <context_boot_go+0xd2>
            has_upgrade = true;
     c64:	46b0      	mov	r8, r6
     c66:	e79a      	b.n	b9e <context_boot_go+0xd2>

00000c68 <FIH_LABEL_FIH_CALL_START_2158>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c68:	2101      	movs	r1, #1
     c6a:	4620      	mov	r0, r4
     c6c:	f7ff fe16 	bl	89c <boot_validate_slot.isra.0>

00000c70 <FIH_LABEL_FIH_CALL_END_2172>:
                if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS)) {
     c70:	4b50      	ldr	r3, [pc, #320]	; (db4 <FIH_LABEL_FIH_CALL_END_2172+0x144>)
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c76:	bf18      	it	ne
     c78:	2205      	movne	r2, #5
     c7a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c7e:	bf08      	it	eq
     c80:	f89d 202f 	ldrbeq.w	r2, [sp, #47]	; 0x2f
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c84:	4423      	add	r3, r4
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c86:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
     c8a:	e7d4      	b.n	c36 <FIH_LABEL_FIH_CALL_END_2015+0x34>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     c8c:	1823      	adds	r3, r4, r0
     c8e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
     c92:	b132      	cbz	r2, ca2 <FIH_LABEL_FIH_CALL_END_2172+0x32>
            BOOT_CURR_IMG(state)++;
     c94:	3001      	adds	r0, #1
     c96:	b2c0      	uxtb	r0, r0
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     c98:	2801      	cmp	r0, #1
            BOOT_CURR_IMG(state)++;
     c9a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    while (BOOT_CURR_IMG(state) < BOOT_IMAGE_NUMBER) {
     c9e:	d9f5      	bls.n	c8c <FIH_LABEL_FIH_CALL_END_2172+0x1c>
     ca0:	e068      	b.n	d74 <FIH_LABEL_FIH_CALL_END_2172+0x104>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE &&
     ca2:	f893 80b0 	ldrb.w	r8, [r3, #176]	; 0xb0
     ca6:	f008 08fb 	and.w	r8, r8, #251	; 0xfb
     caa:	f1b8 0801 	subs.w	r8, r8, #1
     cae:	bf18      	it	ne
     cb0:	f04f 0801 	movne.w	r8, #1
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     cb4:	4641      	mov	r1, r8
     cb6:	f003 fce3 	bl	4680 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     cba:	a905      	add	r1, sp, #20
     cbc:	b2c0      	uxtb	r0, r0
     cbe:	f000 fc25 	bl	150c <flash_area_open>
    if (rc != 0) {
     cc2:	2800      	cmp	r0, #0
     cc4:	d17c      	bne.n	dc0 <FIH_LABEL_FIH_CALL_END_2172+0x150>
    rc = bootutil_tlv_iter_begin(&it, boot_img_hdr(state, slot), fap,
     cc6:	2301      	movs	r3, #1
     cc8:	fb06 f808 	mul.w	r8, r6, r8
     ccc:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
     cd0:	9a05      	ldr	r2, [sp, #20]
     cd2:	fb17 8101 	smlabb	r1, r7, r1, r8
     cd6:	9300      	str	r3, [sp, #0]
     cd8:	4421      	add	r1, r4
     cda:	2340      	movs	r3, #64	; 0x40
     cdc:	a80e      	add	r0, sp, #56	; 0x38
     cde:	f003 fce6 	bl	46ae <bootutil_tlv_iter_begin>
    if (rc != 0) {
     ce2:	4680      	mov	r8, r0
     ce4:	2800      	cmp	r0, #0
     ce6:	d16d      	bne.n	dc4 <FIH_LABEL_FIH_CALL_END_2172+0x154>
        rc = bootutil_tlv_iter_next(&it, &off, &len, NULL);
     ce8:	2300      	movs	r3, #0
     cea:	f10d 0212 	add.w	r2, sp, #18
     cee:	a906      	add	r1, sp, #24
     cf0:	a80e      	add	r0, sp, #56	; 0x38
     cf2:	f003 fd2a 	bl	474a <bootutil_tlv_iter_next>
        if (rc < 0) {
     cf6:	2800      	cmp	r0, #0
     cf8:	db3c      	blt.n	d74 <FIH_LABEL_FIH_CALL_END_2172+0x104>
        rc = flash_area_read(fap, off, &dep, len);
     cfa:	9805      	ldr	r0, [sp, #20]
        } else if (rc > 0) {
     cfc:	d16f      	bne.n	dde <FIH_LABEL_FIH_CALL_END_2172+0x16e>
        if (len != sizeof(dep)) {
     cfe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
     d02:	2b0c      	cmp	r3, #12
     d04:	d169      	bne.n	dda <FIH_LABEL_FIH_CALL_END_2172+0x16a>
        rc = flash_area_read(fap, off, &dep, len);
     d06:	9906      	ldr	r1, [sp, #24]
     d08:	aa07      	add	r2, sp, #28
     d0a:	f003 ff52 	bl	4bb2 <flash_area_read>
        if (rc != 0) {
     d0e:	2800      	cmp	r0, #0
     d10:	d16e      	bne.n	df0 <FIH_LABEL_FIH_CALL_END_2172+0x180>
        if (dep.image_id >= BOOT_IMAGE_NUMBER) {
     d12:	f89d 301c 	ldrb.w	r3, [sp, #28]
     d16:	2b01      	cmp	r3, #1
     d18:	d86d      	bhi.n	df6 <FIH_LABEL_FIH_CALL_END_2172+0x186>
    swap_type = state->swap_type[dep->image_id];
     d1a:	18e2      	adds	r2, r4, r3
                                          : BOOT_PRIMARY_SLOT;
     d1c:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
    if (ver1->iv_major > ver2->iv_major) {
     d20:	437b      	muls	r3, r7
                                          : BOOT_PRIMARY_SLOT;
     d22:	3a02      	subs	r2, #2
     d24:	2a02      	cmp	r2, #2
     d26:	bf8c      	ite	hi
     d28:	2200      	movhi	r2, #0
     d2a:	2201      	movls	r2, #1
    if (ver1->iv_major > ver2->iv_major) {
     d2c:	fb06 3302 	mla	r3, r6, r2, r3
     d30:	4423      	add	r3, r4
     d32:	7d19      	ldrb	r1, [r3, #20]
     d34:	f89d 2020 	ldrb.w	r2, [sp, #32]
     d38:	4291      	cmp	r1, r2
     d3a:	d8d5      	bhi.n	ce8 <FIH_LABEL_FIH_CALL_END_2172+0x78>
    if (ver1->iv_major < ver2->iv_major) {
     d3c:	d30a      	bcc.n	d54 <FIH_LABEL_FIH_CALL_END_2172+0xe4>
    if (ver1->iv_minor > ver2->iv_minor) {
     d3e:	7d59      	ldrb	r1, [r3, #21]
     d40:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     d44:	4291      	cmp	r1, r2
     d46:	d8cf      	bhi.n	ce8 <FIH_LABEL_FIH_CALL_END_2172+0x78>
    if (ver1->iv_minor < ver2->iv_minor) {
     d48:	d304      	bcc.n	d54 <FIH_LABEL_FIH_CALL_END_2172+0xe4>
    if (ver1->iv_revision < ver2->iv_revision) {
     d4a:	8ada      	ldrh	r2, [r3, #22]
     d4c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
     d50:	429a      	cmp	r2, r3
     d52:	d2c9      	bcs.n	ce8 <FIH_LABEL_FIH_CALL_END_2172+0x78>
        switch (BOOT_SWAP_TYPE(state)) {
     d54:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    flash_area_close(fap);
     d58:	9805      	ldr	r0, [sp, #20]
        switch (BOOT_SWAP_TYPE(state)) {
     d5a:	4423      	add	r3, r4
     d5c:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
     d60:	2a01      	cmp	r2, #1
     d62:	d01f      	beq.n	da4 <FIH_LABEL_FIH_CALL_END_2172+0x134>
     d64:	3a02      	subs	r2, #2
     d66:	2a01      	cmp	r2, #1
     d68:	d802      	bhi.n	d70 <FIH_LABEL_FIH_CALL_END_2172+0x100>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d6a:	2201      	movs	r2, #1
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     d6c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    flash_area_close(fap);
     d70:	f003 ff1e 	bl	4bb0 <flash_area_close>

    /* Iterate over all the images. At this point there are no aborted swaps
     * and the swap types are determined for each image. By the end of the loop
     * all required update operations will have been finished.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     d74:	2600      	movs	r6, #0
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d76:	f04f 08ff 	mov.w	r8, #255	; 0xff
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     d7a:	2758      	movs	r7, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     d7c:	2e01      	cmp	r6, #1
     d7e:	f884 60b8 	strb.w	r6, [r4, #184]	; 0xb8
     d82:	d93b      	bls.n	dfc <FIH_LABEL_FIH_CALL_END_2172+0x18c>

    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    FIH_SET(fih_cnt, 0);
     d84:	2300      	movs	r3, #0
     d86:	f8df 8034 	ldr.w	r8, [pc, #52]	; dbc <FIH_LABEL_FIH_CALL_END_2172+0x14c>
        {
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
            /* Check for all possible values is redundant in normal operation it
             * is meant to prevent FI attack.
             */
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
     d8a:	4e0a      	ldr	r6, [pc, #40]	; (db4 <FIH_LABEL_FIH_CALL_END_2172+0x144>)
                FIH_EQ(fih_rc, FIH_FAILURE) ||
                FIH_EQ(fih_rc, FIH_NO_BOOTABLE_IMAGE)) {
     d8c:	4f0a      	ldr	r7, [pc, #40]	; (db8 <FIH_LABEL_FIH_CALL_END_2172+0x148>)
    FIH_SET(fih_cnt, 0);
     d8e:	930e      	str	r3, [sp, #56]	; 0x38
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
     d90:	2b01      	cmp	r3, #1
     d92:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
     d96:	f240 8145 	bls.w	1024 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24>
    /*
     * fih_cnt should be equal to BOOT_IMAGE_NUMBER now.
     * If this is not the case, at least one iteration of the loop
     * has been skipped.
     */
    if(FIH_NOT_EQ(fih_cnt, BOOT_IMAGE_NUMBER)) {
     d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
     d9c:	2a02      	cmp	r2, #2
     d9e:	f000 8194 	beq.w	10ca <FIH_LABEL_FIH_CALL_END_3756+0x46>
        FIH_PANIC;
     da2:	e7fe      	b.n	da2 <FIH_LABEL_FIH_CALL_END_2172+0x132>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_REVERT;
     da4:	2204      	movs	r2, #4
     da6:	e7e1      	b.n	d6c <FIH_LABEL_FIH_CALL_END_2172+0xfc>
     da8:	200030ec 	.word	0x200030ec
     dac:	200020ec 	.word	0x200020ec
     db0:	96f3b83d 	.word	0x96f3b83d
     db4:	200020e8 	.word	0x200020e8
     db8:	20002004 	.word	0x20002004
     dbc:	20002008 	.word	0x20002008
    flash_area_close(fap);
     dc0:	9805      	ldr	r0, [sp, #20]
     dc2:	e7d5      	b.n	d70 <FIH_LABEL_FIH_CALL_END_2172+0x100>
     dc4:	9805      	ldr	r0, [sp, #20]
     dc6:	f003 fef3 	bl	4bb0 <flash_area_close>
	} else if (rc == BOOT_EBADIMAGE) {
     dca:	f1b8 0f03 	cmp.w	r8, #3
     dce:	d1d1      	bne.n	d74 <FIH_LABEL_FIH_CALL_END_2172+0x104>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     dd0:	f240 1301 	movw	r3, #257	; 0x101
     dd4:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
            for (int idx = 0; idx < BOOT_IMAGE_NUMBER; idx++) {
     dd8:	e7cc      	b.n	d74 <FIH_LABEL_FIH_CALL_END_2172+0x104>
            rc = BOOT_EBADIMAGE;
     dda:	f04f 0803 	mov.w	r8, #3
    flash_area_close(fap);
     dde:	9805      	ldr	r0, [sp, #20]
     de0:	f003 fee6 	bl	4bb0 <flash_area_close>
        if (rc == 0) {
     de4:	f1b8 0f00 	cmp.w	r8, #0
     de8:	d1ef      	bne.n	dca <FIH_LABEL_FIH_CALL_END_2172+0x15a>
            BOOT_CURR_IMG(state)++;
     dea:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     dee:	e751      	b.n	c94 <FIH_LABEL_FIH_CALL_END_2172+0x24>
        rc = BOOT_EFLASH;
     df0:	f04f 0801 	mov.w	r8, #1
     df4:	e7f3      	b.n	dde <FIH_LABEL_FIH_CALL_END_2172+0x16e>
            rc = BOOT_EBADARGS;
     df6:	f04f 0807 	mov.w	r8, #7
     dfa:	e7f0      	b.n	dde <FIH_LABEL_FIH_CALL_END_2172+0x16e>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
     dfc:	19a2      	adds	r2, r4, r6
     dfe:	f892 30b9 	ldrb.w	r3, [r2, #185]	; 0xb9
     e02:	2b00      	cmp	r3, #0
     e04:	f040 8109 	bne.w	101a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1a>
        boot_status_reset(&bs);
     e08:	a80a      	add	r0, sp, #40	; 0x28
     e0a:	f003 fd81 	bl	4910 <boot_status_reset>
        bs.swap_type = BOOT_SWAP_TYPE(state);
     e0e:	f892 30b0 	ldrb.w	r3, [r2, #176]	; 0xb0
        switch (BOOT_SWAP_TYPE(state)) {
     e12:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     e14:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
        switch (BOOT_SWAP_TYPE(state)) {
     e18:	d806      	bhi.n	e28 <FIH_LABEL_FIH_CALL_END_2172+0x1b8>
     e1a:	2b01      	cmp	r3, #1
     e1c:	d806      	bhi.n	e2c <FIH_LABEL_FIH_CALL_END_2172+0x1bc>
     e1e:	f000 80ad 	beq.w	f7c <FIH_LABEL_FIH_CALL_END_2172+0x30c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     e22:	f882 80b0 	strb.w	r8, [r2, #176]	; 0xb0
     e26:	e0a9      	b.n	f7c <FIH_LABEL_FIH_CALL_END_2172+0x30c>
        switch (BOOT_SWAP_TYPE(state)) {
     e28:	2b05      	cmp	r3, #5
     e2a:	e7f8      	b.n	e1e <FIH_LABEL_FIH_CALL_END_2172+0x1ae>
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     e2c:	fb07 4306 	mla	r3, r7, r6, r4
     e30:	4619      	mov	r1, r3
     e32:	4630      	mov	r0, r6
     e34:	312c      	adds	r1, #44	; 0x2c
     e36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     e38:	f004 f956 	bl	50e8 <boot_perform_update_hook>
            if (rc == BOOT_HOOK_REGULAR)
     e3c:	2801      	cmp	r0, #1
            rc = BOOT_HOOK_CALL(boot_perform_update_hook, BOOT_HOOK_REGULAR,
     e3e:	4601      	mov	r1, r0
            if (rc == BOOT_HOOK_REGULAR)
     e40:	f040 809c 	bne.w	f7c <FIH_LABEL_FIH_CALL_END_2172+0x30c>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     e44:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     e48:	f003 fc1a 	bl	4680 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e4c:	a907      	add	r1, sp, #28
     e4e:	b2c0      	uxtb	r0, r0
     e50:	f000 fb5c 	bl	150c <flash_area_open>
    if (rc != 0) {
     e54:	2800      	cmp	r0, #0
     e56:	f000 8099 	beq.w	f8c <FIH_LABEL_FIH_CALL_END_2172+0x31c>
    uint32_t src_size = 0;
     e5a:	f04f 0900 	mov.w	r9, #0
    flash_area_close(fap);
     e5e:	9807      	ldr	r0, [sp, #28]
     e60:	f003 fea6 	bl	4bb0 <flash_area_close>
    image_index = BOOT_CURR_IMG(state);
     e64:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
     e68:	a907      	add	r1, sp, #28
     e6a:	2800      	cmp	r0, #0
     e6c:	f000 80cd 	beq.w	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
     e70:	2801      	cmp	r0, #1
     e72:	f000 80c6 	beq.w	1002 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2>
     e76:	20ff      	movs	r0, #255	; 0xff
     e78:	f000 fb48 	bl	150c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     e7c:	20ff      	movs	r0, #255	; 0xff
    for (sect = 0, size = 0; sect < sect_count; sect++) {
     e7e:	2600      	movs	r6, #0
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     e80:	f04f 0b58 	mov.w	fp, #88	; 0x58
     e84:	46b2      	mov	sl, r6
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
     e86:	a90e      	add	r1, sp, #56	; 0x38
     e88:	f000 fb40 	bl	150c <flash_area_open>
     e8c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     e90:	fb0b 4303 	mla	r3, fp, r3, r4
     e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    for (sect = 0, size = 0; sect < sect_count; sect++) {
     e96:	4553      	cmp	r3, sl
     e98:	d019      	beq.n	ece <FIH_LABEL_FIH_CALL_END_2172+0x25e>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     e9a:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
     e9e:	4631      	mov	r1, r6
     ea0:	fb0b 4202 	mla	r2, fp, r2, r4
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
     ea6:	9807      	ldr	r0, [sp, #28]
     ea8:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
     eac:	6852      	ldr	r2, [r2, #4]
     eae:	9303      	str	r3, [sp, #12]
     eb0:	9202      	str	r2, [sp, #8]
     eb2:	f003 fea8 	bl	4c06 <flash_area_erase>
        if ((size + this_size) >= src_size) {
     eb6:	9a02      	ldr	r2, [sp, #8]
     eb8:	9b03      	ldr	r3, [sp, #12]
     eba:	4416      	add	r6, r2
     ebc:	454e      	cmp	r6, r9
     ebe:	f0c0 80a9 	bcc.w	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
            size += BOOT_WRITE_SZ(state) - (size % BOOT_WRITE_SZ(state));
     ec2:	f8d4 60b4 	ldr.w	r6, [r4, #180]	; 0xb4
     ec6:	fbb9 f9f6 	udiv	r9, r9, r6
     eca:	fb06 6609 	mla	r6, r6, r9, r6
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
     ece:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
     ed2:	f003 fc88 	bl	47e6 <boot_trailer_sz>
     ed6:	2358      	movs	r3, #88	; 0x58
    return BOOT_IMG(state, slot).num_sectors;
     ed8:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     edc:	fb03 4202 	mla	r2, r3, r2, r4
     ee0:	6a53      	ldr	r3, [r2, #36]	; 0x24
    sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
     ee2:	6a92      	ldr	r2, [r2, #40]	; 0x28
	return fs->fs_off;
     ee4:	6819      	ldr	r1, [r3, #0]
     ee6:	3a01      	subs	r2, #1
     ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    sz = 0;
     eec:	2200      	movs	r2, #0
        sz += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, sector);
     eee:	f8d3 e004 	ldr.w	lr, [r3, #4]
     ef2:	469c      	mov	ip, r3
     ef4:	4472      	add	r2, lr
    } while (sz < trailer_sz);
     ef6:	4290      	cmp	r0, r2
     ef8:	f1a3 0308 	sub.w	r3, r3, #8
     efc:	d8f7      	bhi.n	eee <FIH_LABEL_FIH_CALL_END_2172+0x27e>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     efe:	f8dc 3000 	ldr.w	r3, [ip]
    return flash_area_erase(fap, off, sz);
     f02:	9807      	ldr	r0, [sp, #28]
     f04:	1a59      	subs	r1, r3, r1
     f06:	f003 fe7e 	bl	4c06 <flash_area_erase>
    rc = boot_copy_region(state, fap_secondary_slot, fap_primary_slot, 0, 0, size);
     f0a:	2300      	movs	r3, #0
     f0c:	4620      	mov	r0, r4
     f0e:	9a07      	ldr	r2, [sp, #28]
     f10:	990e      	ldr	r1, [sp, #56]	; 0x38
     f12:	9601      	str	r6, [sp, #4]
     f14:	9300      	str	r3, [sp, #0]
     f16:	f7ff fd83 	bl	a20 <boot_copy_region>
    if (rc != 0) {
     f1a:	bb78      	cbnz	r0, f7c <FIH_LABEL_FIH_CALL_END_2172+0x30c>
    rc = boot_write_magic(fap_primary_slot);
     f1c:	9807      	ldr	r0, [sp, #28]
     f1e:	f001 ff7b 	bl	2e18 <boot_write_magic>
    if (rc != 0) {
     f22:	bb58      	cbnz	r0, f7c <FIH_LABEL_FIH_CALL_END_2172+0x30c>
    rc = BOOT_HOOK_CALL(boot_copy_region_post_hook, 0, BOOT_CURR_IMG(state),
     f24:	f04f 0958 	mov.w	r9, #88	; 0x58
     f28:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
     f2c:	4632      	mov	r2, r6
     f2e:	fb09 4300 	mla	r3, r9, r0, r4
     f32:	6a19      	ldr	r1, [r3, #32]
     f34:	f004 f8e6 	bl	5104 <boot_copy_region_post_hook>
    if (rc != 0) {
     f38:	4601      	mov	r1, r0
     f3a:	b9f8      	cbnz	r0, f7c <FIH_LABEL_FIH_CALL_END_2172+0x30c>
     f3c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_area_erase(fap, off, sz);
     f40:	980e      	ldr	r0, [sp, #56]	; 0x38
     f42:	fb09 4303 	mla	r3, r9, r3, r4
	return fs->fs_size;
     f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     f48:	685a      	ldr	r2, [r3, #4]
     f4a:	f003 fe5c 	bl	4c06 <flash_area_erase>
    return BOOT_IMG(state, slot).num_sectors;
     f4e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
     f52:	fb09 4303 	mla	r3, r9, r3, r4
    last_sector = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT) - 1;
     f56:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
     f5a:	3b01      	subs	r3, #1
     f5c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
     f60:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
     f64:	6813      	ldr	r3, [r2, #0]
    return flash_area_erase(fap, off, sz);
     f66:	6842      	ldr	r2, [r0, #4]
     f68:	1ac9      	subs	r1, r1, r3
     f6a:	980e      	ldr	r0, [sp, #56]	; 0x38
     f6c:	f003 fe4b 	bl	4c06 <flash_area_erase>
    flash_area_close(fap_primary_slot);
     f70:	9807      	ldr	r0, [sp, #28]
     f72:	f003 fe1d 	bl	4bb0 <flash_area_close>
    flash_area_close(fap_secondary_slot);
     f76:	980e      	ldr	r0, [sp, #56]	; 0x38
     f78:	f003 fe1a 	bl	4bb0 <flash_area_close>
        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     f7c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
     f80:	4423      	add	r3, r4
     f82:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
     f86:	2bff      	cmp	r3, #255	; 0xff
     f88:	d147      	bne.n	101a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1a>
            FIH_PANIC;
     f8a:	e7fe      	b.n	f8a <FIH_LABEL_FIH_CALL_END_2172+0x31a>
    return &BOOT_IMG(state, slot).hdr;
     f8c:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (flash_area_read(fap, off, &info, sizeof(info))) {
     f90:	9807      	ldr	r0, [sp, #28]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
     f92:	fb07 4303 	mla	r3, r7, r3, r4
     f96:	8e9e      	ldrh	r6, [r3, #52]	; 0x34
     f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if (flash_area_read(fap, off, &info, sizeof(info))) {
     f9a:	aa0e      	add	r2, sp, #56	; 0x38
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
     f9c:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
     f9e:	4631      	mov	r1, r6
     fa0:	2304      	movs	r3, #4
     fa2:	f003 fe06 	bl	4bb2 <flash_area_read>
     fa6:	2800      	cmp	r0, #0
     fa8:	f47f af57 	bne.w	e5a <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
     fac:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
     fb0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
     fb4:	fb07 4303 	mla	r3, r7, r3, r4
     fb8:	f8b3 a036 	ldrh.w	sl, [r3, #54]	; 0x36
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
     fbc:	f646 1308 	movw	r3, #26888	; 0x6908
     fc0:	429a      	cmp	r2, r3
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
     fc2:	9807      	ldr	r0, [sp, #28]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
     fc4:	d119      	bne.n	ffa <FIH_LABEL_FIH_CALL_END_2172+0x38a>
        if (protect_tlv_size != info.it_tlv_tot) {
     fc6:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
     fca:	459a      	cmp	sl, r3
     fcc:	f47f af45 	bne.w	e5a <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
     fd0:	2304      	movs	r3, #4
     fd2:	aa0e      	add	r2, sp, #56	; 0x38
     fd4:	eb0a 0106 	add.w	r1, sl, r6
     fd8:	f003 fdeb 	bl	4bb2 <flash_area_read>
     fdc:	2800      	cmp	r0, #0
     fde:	f47f af3c 	bne.w	e5a <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
     fe2:	f646 1307 	movw	r3, #26887	; 0x6907
     fe6:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
     fea:	429a      	cmp	r2, r3
     fec:	f47f af35 	bne.w	e5a <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
    *size = off + protect_tlv_size + info.it_tlv_tot;
     ff0:	f8bd 903a 	ldrh.w	r9, [sp, #58]	; 0x3a
     ff4:	44d1      	add	r9, sl
     ff6:	44b1      	add	r9, r6
    rc = 0;
     ff8:	e731      	b.n	e5e <FIH_LABEL_FIH_CALL_END_2172+0x1ee>
    } else if (protect_tlv_size != 0) {
     ffa:	f1ba 0f00 	cmp.w	sl, #0
     ffe:	d0f0      	beq.n	fe2 <FIH_LABEL_FIH_CALL_END_2172+0x372>
    1000:	e72b      	b.n	e5a <FIH_LABEL_FIH_CALL_END_2172+0x1ea>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1002:	f000 fa83 	bl	150c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1006:	2008      	movs	r0, #8
    1008:	e739      	b.n	e7e <FIH_LABEL_FIH_CALL_END_2172+0x20e>
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    100a:	2004      	movs	r0, #4
    100c:	f000 fa7e 	bl	150c <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1010:	2002      	movs	r0, #2
    1012:	e734      	b.n	e7e <FIH_LABEL_FIH_CALL_END_2172+0x20e>
    for (sect = 0, size = 0; sect < sect_count; sect++) {
    1014:	f10a 0a01 	add.w	sl, sl, #1
    1018:	e73d      	b.n	e96 <FIH_LABEL_FIH_CALL_END_2172+0x226>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    101a:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
    101e:	3601      	adds	r6, #1
    1020:	b2f6      	uxtb	r6, r6
    1022:	e6ab      	b.n	d7c <FIH_LABEL_FIH_CALL_END_2172+0x10c>
        FIH_SET(tmp_img_mask, state->img_mask[BOOT_CURR_IMG(state)]);
    1024:	4423      	add	r3, r4
    1026:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
    102a:	f88d 201c 	strb.w	r2, [sp, #28]
        if (FIH_EQ(tmp_img_mask, true)) {
    102e:	f89d 201c 	ldrb.w	r2, [sp, #28]
    1032:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    1036:	b13a      	cbz	r2, 1048 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x48>
        ++fih_cnt;
    1038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    103a:	3301      	adds	r3, #1
    103c:	930e      	str	r3, [sp, #56]	; 0x38
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    103e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    1042:	3301      	adds	r3, #1
    1044:	b2db      	uxtb	r3, r3
    1046:	e6a3      	b.n	d90 <FIH_LABEL_FIH_CALL_END_2172+0x120>
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    1048:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    104c:	2b01      	cmp	r3, #1
    104e:	d015      	beq.n	107c <FIH_LABEL_FIH_CALL_START_3742>
            rc = boot_read_image_headers(state, false, &bs);
    1050:	4620      	mov	r0, r4
    1052:	aa0a      	add	r2, sp, #40	; 0x28
    1054:	f003 fc2d 	bl	48b2 <boot_read_image_headers>
            if (rc != 0) {
    1058:	b180      	cbz	r0, 107c <FIH_LABEL_FIH_CALL_START_3742>
                FIH_SET(fih_rc, FIH_FAILURE);
    105a:	f8d8 5000 	ldr.w	r5, [r8]
     * easily recover them.
     */
#if defined(MCUBOOT_ENC_IMAGES) || defined(MCUBOOT_SWAP_SAVE_ENCTLV)
    like_mbedtls_zeroize(&bs, sizeof(bs));
#else
    memset(&bs, 0, sizeof(struct boot_status));
    105e:	2210      	movs	r2, #16
    1060:	2100      	movs	r1, #0
    1062:	a80a      	add	r0, sp, #40	; 0x28
    1064:	f003 fe7e 	bl	4d64 <memset>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    1068:	2658      	movs	r6, #88	; 0x58
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    106a:	2300      	movs	r3, #0
    106c:	2b01      	cmp	r3, #1
    106e:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    1072:	d915      	bls.n	10a0 <FIH_LABEL_FIH_CALL_END_3756+0x1c>
#endif

    close_all_flash_areas(state);
    FIH_RET(fih_rc);
}
    1074:	4628      	mov	r0, r5
    1076:	b015      	add	sp, #84	; 0x54
    1078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000107c <FIH_LABEL_FIH_CALL_START_3742>:
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
    107c:	2100      	movs	r1, #0
    107e:	4620      	mov	r0, r4
    1080:	f7ff fc0c 	bl	89c <boot_validate_slot.isra.0>

00001084 <FIH_LABEL_FIH_CALL_END_3756>:
            if (FIH_NOT_EQ(fih_rc, FIH_SUCCESS) ||
    1084:	6833      	ldr	r3, [r6, #0]
    1086:	4283      	cmp	r3, r0
    1088:	d1e7      	bne.n	105a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5a>
    108a:	f8d8 2000 	ldr.w	r2, [r8]
    108e:	429a      	cmp	r2, r3
    1090:	d0e3      	beq.n	105a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5a>
                FIH_EQ(fih_rc, FIH_FAILURE) ||
    1092:	683a      	ldr	r2, [r7, #0]
    1094:	429a      	cmp	r2, r3
    1096:	d1cf      	bne.n	1038 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x38>
    1098:	e7df      	b.n	105a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5a>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    109a:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
    if (BOOT_CURR_IMG(state) >= BOOT_IMAGE_NUMBER) {
    109e:	e031      	b.n	1104 <FIH_LABEL_FIH_CALL_END_3756+0x80>
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
    10a0:	18e2      	adds	r2, r4, r3
    10a2:	f892 20b9 	ldrb.w	r2, [r2, #185]	; 0xb9
    10a6:	b95a      	cbnz	r2, 10c0 <FIH_LABEL_FIH_CALL_END_3756+0x3c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
    10a8:	fb06 4303 	mla	r3, r6, r3, r4
    10ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    10ae:	f003 fd7f 	bl	4bb0 <flash_area_close>
    10b2:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    10b6:	fb06 4303 	mla	r3, r6, r3, r4
    10ba:	6a18      	ldr	r0, [r3, #32]
    10bc:	f003 fd78 	bl	4bb0 <flash_area_close>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    10c0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    10c4:	3301      	adds	r3, #1
    10c6:	b2db      	uxtb	r3, r3
    10c8:	e7d0      	b.n	106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>
        if (!state->img_mask[BOOT_CURR_IMG(state)]) {
    10ca:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
    10ce:	b123      	cbz	r3, 10da <FIH_LABEL_FIH_CALL_END_3756+0x56>
    10d0:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
    10d4:	2b00      	cmp	r3, #0
    10d6:	d1e0      	bne.n	109a <FIH_LABEL_FIH_CALL_END_3756+0x16>
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
    10d8:	2301      	movs	r3, #1
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
    10da:	2658      	movs	r6, #88	; 0x58
    10dc:	fb06 4203 	mla	r2, r6, r3, r4
    10e0:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    10e4:	6a10      	ldr	r0, [r2, #32]
    10e6:	f003 fae0 	bl	46aa <flash_area_get_device_id>
    10ea:	7128      	strb	r0, [r5, #4]
    return flash_area_get_off(BOOT_IMG(state, slot).area);
    10ec:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    10f0:	fb06 4303 	mla	r3, r6, r3, r4
	return (uint32_t)fa->fa_off;
    10f4:	6a1b      	ldr	r3, [r3, #32]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
    10f6:	685b      	ldr	r3, [r3, #4]
    10f8:	60ab      	str	r3, [r5, #8]
    return &BOOT_IMG(state, slot).hdr;
    10fa:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    10fe:	fb03 4606 	mla	r6, r3, r6, r4
    rsp->br_hdr = boot_img_hdr(state, active_slot);
    1102:	602e      	str	r6, [r5, #0]
    fih_rc = FIH_SUCCESS;
    1104:	4b01      	ldr	r3, [pc, #4]	; (110c <FIH_LABEL_FIH_CALL_END_3756+0x88>)
    1106:	681d      	ldr	r5, [r3, #0]
    1108:	e7a9      	b.n	105e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5e>
    110a:	bf00      	nop
    110c:	200020e8 	.word	0x200020e8

00001110 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_ret
boot_go(struct boot_rsp *rsp)
{
    1110:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    1112:	4d06      	ldr	r5, [pc, #24]	; (112c <FIH_LABEL_FIH_CALL_END_4491+0x4>)
{
    1114:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
    1116:	22bc      	movs	r2, #188	; 0xbc
    1118:	2100      	movs	r1, #0
    111a:	4628      	mov	r0, r5
    111c:	f003 fe22 	bl	4d64 <memset>

00001120 <FIH_LABEL_FIH_CALL_START_4477>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1120:	4621      	mov	r1, r4
    1122:	4628      	mov	r0, r5
    1124:	f7ff fcd2 	bl	acc <context_boot_go>

00001128 <FIH_LABEL_FIH_CALL_END_4491>:
}
    1128:	bd38      	pop	{r3, r4, r5, pc}
    112a:	bf00      	nop
    112c:	200044ec 	.word	0x200044ec

00001130 <cleanup_arm_nvic>:
    1130:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1134:	b672      	cpsid	i
    1136:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1138:	f04f 30ff 	mov.w	r0, #4294967295
    113c:	4a09      	ldr	r2, [pc, #36]	; (1164 <cleanup_arm_nvic+0x34>)
    113e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1142:	3301      	adds	r3, #1
    1144:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1146:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    114a:	d1f8      	bne.n	113e <cleanup_arm_nvic+0xe>
    114c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    114e:	f04f 30ff 	mov.w	r0, #4294967295
    1152:	4a04      	ldr	r2, [pc, #16]	; (1164 <cleanup_arm_nvic+0x34>)
    1154:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1158:	3301      	adds	r3, #1
    115a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    115c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1160:	d1f8      	bne.n	1154 <cleanup_arm_nvic+0x24>
	}
}
    1162:	4770      	bx	lr
    1164:	e000e100 	.word	0xe000e100

00001168 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1168:	b538      	push	{r3, r4, r5, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    116a:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    116c:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1170:	2500      	movs	r5, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1172:	4b1a      	ldr	r3, [pc, #104]	; (11dc <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1174:	4629      	mov	r1, r5
    1176:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1178:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    117c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1184:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1186:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    118a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    118e:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    1192:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    1196:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1198:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    119c:	4810      	ldr	r0, [pc, #64]	; (11e0 <nrf_cleanup_peripheral+0x78>)
    119e:	f003 fde1 	bl	4d64 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    11a2:	2280      	movs	r2, #128	; 0x80
    11a4:	4629      	mov	r1, r5
    11a6:	480f      	ldr	r0, [pc, #60]	; (11e4 <nrf_cleanup_peripheral+0x7c>)
    11a8:	f003 fddc 	bl	4d64 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    11ac:	4b0e      	ldr	r3, [pc, #56]	; (11e8 <nrf_cleanup_peripheral+0x80>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    11ae:	2280      	movs	r2, #128	; 0x80
    11b0:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    11b4:	4629      	mov	r1, r5
    p_reg->INTENCLR = mask;
    11b6:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    11ba:	480c      	ldr	r0, [pc, #48]	; (11ec <nrf_cleanup_peripheral+0x84>)
    11bc:	f003 fdd2 	bl	4d64 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    11c0:	2280      	movs	r2, #128	; 0x80
    11c2:	4629      	mov	r1, r5
    11c4:	480a      	ldr	r0, [pc, #40]	; (11f0 <nrf_cleanup_peripheral+0x88>)
    11c6:	f003 fdcd 	bl	4d64 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    11ca:	4b0a      	ldr	r3, [pc, #40]	; (11f4 <nrf_cleanup_peripheral+0x8c>)
    11cc:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    11d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    11d4:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    11d8:	bd38      	pop	{r3, r4, r5, pc}
    11da:	bf00      	nop
    11dc:	50014000 	.word	0x50014000
    11e0:	50008080 	.word	0x50008080
    11e4:	50008180 	.word	0x50008180
    11e8:	50009000 	.word	0x50009000
    11ec:	50009080 	.word	0x50009080
    11f0:	50009180 	.word	0x50009180
    11f4:	50017000 	.word	0x50017000

000011f8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    11f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    11fc:	8b05      	ldrh	r5, [r0, #24]
{
    11fe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1200:	0728      	lsls	r0, r5, #28
{
    1202:	4690      	mov	r8, r2
	if (processing) {
    1204:	d411      	bmi.n	122a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1206:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1208:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    120c:	f040 80cd 	bne.w	13aa <process_event+0x1b2>
			evt = process_recheck(mgr);
    1210:	4620      	mov	r0, r4
    1212:	f003 fbf3 	bl	49fc <process_recheck>
		}

		if (evt == EVT_NOP) {
    1216:	b178      	cbz	r0, 1238 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1218:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    121a:	8b21      	ldrh	r1, [r4, #24]
    121c:	2804      	cmp	r0, #4
    121e:	d811      	bhi.n	1244 <process_event+0x4c>
    1220:	e8df f000 	tbb	[pc, r0]
    1224:	856d10c3 	.word	0x856d10c3
    1228:	95          	.byte	0x95
    1229:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    122a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    122c:	bf0c      	ite	eq
    122e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1232:	f045 0520 	orrne.w	r5, r5, #32
    1236:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1238:	f388 8811 	msr	BASEPRI, r8
    123c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1244:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1248:	45aa      	cmp	sl, r5
    124a:	f000 80a6 	beq.w	139a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    124e:	2700      	movs	r7, #0
    1250:	46b9      	mov	r9, r7
    1252:	463e      	mov	r6, r7
    1254:	68a3      	ldr	r3, [r4, #8]
    1256:	2b00      	cmp	r3, #0
    1258:	f000 80bd 	beq.w	13d6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    125c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1260:	8321      	strh	r1, [r4, #24]
    1262:	f388 8811 	msr	BASEPRI, r8
    1266:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    126a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    126c:	2900      	cmp	r1, #0
    126e:	f000 80bb 	beq.w	13e8 <process_event+0x1f0>
	return node->next;
    1272:	680d      	ldr	r5, [r1, #0]
    1274:	2900      	cmp	r1, #0
    1276:	f000 80b7 	beq.w	13e8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    127a:	4633      	mov	r3, r6
    127c:	4652      	mov	r2, sl
    127e:	4620      	mov	r0, r4
    1280:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1284:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1286:	2d00      	cmp	r5, #0
    1288:	d076      	beq.n	1378 <process_event+0x180>
    128a:	682b      	ldr	r3, [r5, #0]
    128c:	4629      	mov	r1, r5
    128e:	461d      	mov	r5, r3
    1290:	e7f0      	b.n	1274 <process_event+0x7c>
    1292:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1296:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1298:	2a01      	cmp	r2, #1
    129a:	d81b      	bhi.n	12d4 <process_event+0xdc>
	list->head = NULL;
    129c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    129e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    12a2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    12a4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12a6:	b289      	uxth	r1, r1
	list->tail = NULL;
    12a8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    12ac:	d109      	bne.n	12c2 <process_event+0xca>
    12ae:	463b      	mov	r3, r7
    12b0:	e003      	b.n	12ba <process_event+0xc2>
				mgr->refs += 1U;
    12b2:	8b62      	ldrh	r2, [r4, #26]
    12b4:	3201      	adds	r2, #1
    12b6:	8362      	strh	r2, [r4, #26]
	return node->next;
    12b8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    12ba:	2b00      	cmp	r3, #0
    12bc:	d1f9      	bne.n	12b2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12be:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    12c2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    12c4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    12c6:	f003 fb99 	bl	49fc <process_recheck>
    12ca:	2800      	cmp	r0, #0
    12cc:	d07b      	beq.n	13c6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    12ce:	f041 0120 	orr.w	r1, r1, #32
    12d2:	e077      	b.n	13c4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    12d4:	2b04      	cmp	r3, #4
    12d6:	d10a      	bne.n	12ee <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12d8:	f021 0107 	bic.w	r1, r1, #7
    12dc:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    12de:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    12e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    12e2:	f003 fb8b 	bl	49fc <process_recheck>
    12e6:	b110      	cbz	r0, 12ee <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    12e8:	f041 0120 	orr.w	r1, r1, #32
    12ec:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12ee:	8b21      	ldrh	r1, [r4, #24]
    12f0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    12f4:	45aa      	cmp	sl, r5
    12f6:	d050      	beq.n	139a <process_event+0x1a2>
    12f8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    12fa:	46b9      	mov	r9, r7
    12fc:	e7aa      	b.n	1254 <process_event+0x5c>
			transit = mgr->transitions->start;
    12fe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1300:	f021 0107 	bic.w	r1, r1, #7
    1304:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1308:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    130a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    130e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1310:	d12d      	bne.n	136e <process_event+0x176>
		    || (transit != NULL)) {
    1312:	f1b9 0f00 	cmp.w	r9, #0
    1316:	d040      	beq.n	139a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1318:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    131c:	8321      	strh	r1, [r4, #24]
    131e:	f388 8811 	msr	BASEPRI, r8
    1322:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1326:	4620      	mov	r0, r4
    1328:	4939      	ldr	r1, [pc, #228]	; (1410 <process_event+0x218>)
    132a:	47c8      	blx	r9
    132c:	e029      	b.n	1382 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    132e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1332:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1334:	f041 0104 	orr.w	r1, r1, #4
    1338:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    133a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    133c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1340:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1342:	d0e6      	beq.n	1312 <process_event+0x11a>
    1344:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1346:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    134a:	463e      	mov	r6, r7
    134c:	e782      	b.n	1254 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    134e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1352:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1354:	f041 0105 	orr.w	r1, r1, #5
    1358:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    135a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    135c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1360:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1362:	d0d6      	beq.n	1312 <process_event+0x11a>
    1364:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1366:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    136a:	463e      	mov	r6, r7
    136c:	e772      	b.n	1254 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    136e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1370:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    1374:	463e      	mov	r6, r7
    1376:	e76d      	b.n	1254 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1378:	462b      	mov	r3, r5
    137a:	e787      	b.n	128c <process_event+0x94>
			if (transit != NULL) {
    137c:	f1b9 0f00 	cmp.w	r9, #0
    1380:	d1d1      	bne.n	1326 <process_event+0x12e>
	__asm__ volatile(
    1382:	f04f 0320 	mov.w	r3, #32
    1386:	f3ef 8811 	mrs	r8, BASEPRI
    138a:	f383 8812 	msr	BASEPRI_MAX, r3
    138e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1392:	8b23      	ldrh	r3, [r4, #24]
    1394:	f023 0308 	bic.w	r3, r3, #8
    1398:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    139a:	8b25      	ldrh	r5, [r4, #24]
    139c:	06ea      	lsls	r2, r5, #27
    139e:	d52e      	bpl.n	13fe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    13a0:	f025 0310 	bic.w	r3, r5, #16
    13a4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    13a6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    13aa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13ac:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    13ae:	2e00      	cmp	r6, #0
    13b0:	f6bf af6f 	bge.w	1292 <process_event+0x9a>
	list->head = NULL;
    13b4:	2300      	movs	r3, #0
		*clients = mgr->clients;
    13b6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    13b8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13bc:	f021 0107 	bic.w	r1, r1, #7
    13c0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    13c4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13c6:	8b21      	ldrh	r1, [r4, #24]
    13c8:	f04f 0900 	mov.w	r9, #0
    13cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    13d0:	45aa      	cmp	sl, r5
    13d2:	f47f af3f 	bne.w	1254 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    13d6:	2f00      	cmp	r7, #0
    13d8:	d09b      	beq.n	1312 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    13da:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    13de:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    13e0:	f388 8811 	msr	BASEPRI, r8
    13e4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    13e8:	2f00      	cmp	r7, #0
    13ea:	d0c7      	beq.n	137c <process_event+0x184>
	return node->next;
    13ec:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    13ee:	4639      	mov	r1, r7
    13f0:	4633      	mov	r3, r6
    13f2:	4652      	mov	r2, sl
    13f4:	4620      	mov	r0, r4
    13f6:	f003 fb2d 	bl	4a54 <notify_one>
	list->head = node;
    13fa:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    13fc:	e7f4      	b.n	13e8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    13fe:	06ab      	lsls	r3, r5, #26
    1400:	f57f af1a 	bpl.w	1238 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1404:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1408:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    140a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    140e:	e6ff      	b.n	1210 <process_event+0x18>
    1410:	00004a81 	.word	0x00004a81

00001414 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <nrf_gpio_pin_control_select.constprop.0+0x18>)
    1416:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    141a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    141e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    1422:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    1426:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    142a:	4770      	bx	lr
    142c:	50842500 	.word	0x50842500

00001430 <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
    1430:	b510      	push	{r4, lr}
	__asm__ volatile(
    1432:	f04f 0320 	mov.w	r3, #32
    1436:	f3ef 8411 	mrs	r4, BASEPRI
    143a:	f383 8812 	msr	BASEPRI_MAX, r3
    143e:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    1442:	2201      	movs	r2, #1
    1444:	4b0c      	ldr	r3, [pc, #48]	; (1478 <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    1446:	490d      	ldr	r1, [pc, #52]	; (147c <nordicsemi_nrf53_init+0x4c>)
    1448:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    144c:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
    144e:	2000      	movs	r0, #0
    1450:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
    1454:	f7ff ffde 	bl	1414 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
    1458:	4610      	mov	r0, r2
    145a:	f7ff ffdb 	bl	1414 <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    145e:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1462:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    1466:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
    146a:	f384 8811 	msr	BASEPRI, r4
    146e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1472:	2000      	movs	r0, #0
    1474:	bd10      	pop	{r4, pc}
    1476:	bf00      	nop
    1478:	50001000 	.word	0x50001000
    147c:	50004000 	.word	0x50004000

00001480 <z_arm_on_enter_cpu_idle>:
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1480:	2305      	movs	r3, #5
{
    1482:	b570      	push	{r4, r5, r6, lr}
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    1484:	4d14      	ldr	r5, [pc, #80]	; (14d8 <z_arm_on_enter_cpu_idle+0x58>)
    1486:	4e15      	ldr	r6, [pc, #84]	; (14dc <z_arm_on_enter_cpu_idle+0x5c>)
    1488:	782c      	ldrb	r4, [r5, #0]
    148a:	3401      	adds	r4, #1
    148c:	fbb4 f3f3 	udiv	r3, r4, r3
    1490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1494:	1ae4      	subs	r4, r4, r3
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    1496:	f003 fe23 	bl	50e0 <sys_clock_cycle_get_32>
	if (timestamps_filled &&
    149a:	4a11      	ldr	r2, [pc, #68]	; (14e0 <z_arm_on_enter_cpu_idle+0x60>)
    149c:	7813      	ldrb	r3, [r2, #0]
    149e:	b123      	cbz	r3, 14aa <z_arm_on_enter_cpu_idle+0x2a>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
    14a0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    14a4:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
    14a6:	2807      	cmp	r0, #7
    14a8:	d914      	bls.n	14d4 <z_arm_on_enter_cpu_idle+0x54>
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    14aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    14ae:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
    14b2:	b141      	cbz	r1, 14c6 <z_arm_on_enter_cpu_idle+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    14b4:	2100      	movs	r1, #0
    14b6:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    14ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
    14be:	702c      	strb	r4, [r5, #0]
		if (current == 0) {
    14c0:	b90c      	cbnz	r4, 14c6 <z_arm_on_enter_cpu_idle+0x46>
			timestamps_filled = true;
    14c2:	2301      	movs	r3, #1
    14c4:	7013      	strb	r3, [r2, #0]
	timestamps[current] = k_cycle_get_32();
    14c6:	782c      	ldrb	r4, [r5, #0]
    14c8:	f003 fe0a 	bl	50e0 <sys_clock_cycle_get_32>
    14cc:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
	return true;
    14d0:	2001      	movs	r0, #1
}
    14d2:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    14d4:	2000      	movs	r0, #0
    14d6:	e7fc      	b.n	14d2 <z_arm_on_enter_cpu_idle+0x52>
    14d8:	20006069 	.word	0x20006069
    14dc:	200045a8 	.word	0x200045a8
    14e0:	20006068 	.word	0x20006068

000014e4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    14e4:	b148      	cbz	r0, 14fa <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    14e6:	4b05      	ldr	r3, [pc, #20]	; (14fc <arch_busy_wait+0x18>)
    14e8:	4a05      	ldr	r2, [pc, #20]	; (1500 <arch_busy_wait+0x1c>)
    14ea:	681b      	ldr	r3, [r3, #0]
    14ec:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
    14f0:	4358      	muls	r0, r3
    14f2:	4b04      	ldr	r3, [pc, #16]	; (1504 <arch_busy_wait+0x20>)
    14f4:	f043 0301 	orr.w	r3, r3, #1
    14f8:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    14fa:	4770      	bx	lr
    14fc:	2000201c 	.word	0x2000201c
    1500:	000f4240 	.word	0x000f4240
    1504:	00006ee0 	.word	0x00006ee0

00001508 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1508:	f002 b8ec 	b.w	36e4 <SystemInit>

0000150c <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
    150c:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
    150e:	4b11      	ldr	r3, [pc, #68]	; (1554 <flash_area_open+0x48>)
{
    1510:	460d      	mov	r5, r1
	if (flash_map == NULL) {
    1512:	681c      	ldr	r4, [r3, #0]
    1514:	b1dc      	cbz	r4, 154e <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1516:	4b10      	ldr	r3, [pc, #64]	; (1558 <flash_area_open+0x4c>)
    1518:	6819      	ldr	r1, [r3, #0]
    151a:	2300      	movs	r3, #0
    151c:	428b      	cmp	r3, r1
    151e:	db02      	blt.n	1526 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1520:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1524:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1526:	4622      	mov	r2, r4
    1528:	f812 6b10 	ldrb.w	r6, [r2], #16
    152c:	4286      	cmp	r6, r0
    152e:	d002      	beq.n	1536 <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
    1530:	4614      	mov	r4, r2
    1532:	3301      	adds	r3, #1
    1534:	e7f2      	b.n	151c <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1536:	68e0      	ldr	r0, [r4, #12]
    1538:	b910      	cbnz	r0, 1540 <flash_area_open+0x34>
		return -ENODEV;
    153a:	f06f 0012 	mvn.w	r0, #18
    153e:	e7f1      	b.n	1524 <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1540:	f005 fad2 	bl	6ae8 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1544:	2800      	cmp	r0, #0
    1546:	d0f8      	beq.n	153a <flash_area_open+0x2e>
	return 0;
    1548:	2000      	movs	r0, #0
	*fap = area;
    154a:	602c      	str	r4, [r5, #0]
	return 0;
    154c:	e7ea      	b.n	1524 <flash_area_open+0x18>
		return -EACCES;
    154e:	f06f 000c 	mvn.w	r0, #12
    1552:	e7e7      	b.n	1524 <flash_area_open+0x18>
    1554:	2000200c 	.word	0x2000200c
    1558:	00006ef8 	.word	0x00006ef8

0000155c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    155c:	b570      	push	{r4, r5, r6, lr}
    155e:	b088      	sub	sp, #32
    1560:	4605      	mov	r5, r0
    1562:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1564:	b2c0      	uxtb	r0, r0
    1566:	4669      	mov	r1, sp
{
    1568:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    156a:	f7ff ffcf 	bl	150c <flash_area_open>
	if (rc < 0 || fa == NULL) {
    156e:	2800      	cmp	r0, #0
    1570:	db1b      	blt.n	15aa <flash_area_get_sectors+0x4e>
    1572:	9800      	ldr	r0, [sp, #0]
    1574:	b1c8      	cbz	r0, 15aa <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1576:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1578:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    157a:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    157c:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    157e:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1580:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1584:	2300      	movs	r3, #0
	cb_data->status = 0;
    1586:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    158a:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
    158c:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
    158e:	f003 fb0f 	bl	4bb0 <flash_area_close>
	if (flash_dev == NULL) {
    1592:	b16d      	cbz	r5, 15b0 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1594:	4628      	mov	r0, r5
    1596:	4908      	ldr	r1, [pc, #32]	; (15b8 <flash_area_get_sectors+0x5c>)
    1598:	aa01      	add	r2, sp, #4
    159a:	f003 fd53 	bl	5044 <flash_page_foreach>
	if (cb_data->status == 0) {
    159e:	9807      	ldr	r0, [sp, #28]
    15a0:	b908      	cbnz	r0, 15a6 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    15a2:	9b05      	ldr	r3, [sp, #20]
    15a4:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    15a6:	b008      	add	sp, #32
    15a8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    15aa:	f06f 0015 	mvn.w	r0, #21
    15ae:	e7fa      	b.n	15a6 <flash_area_get_sectors+0x4a>
		return -ENODEV;
    15b0:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    15b4:	e7f7      	b.n	15a6 <flash_area_get_sectors+0x4a>
    15b6:	bf00      	nop
    15b8:	00004c4b 	.word	0x00004c4b

000015bc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    15bc:	4801      	ldr	r0, [pc, #4]	; (15c4 <nrf_cc3xx_platform_abort_init+0x8>)
    15be:	f002 bf49 	b.w	4454 <nrf_cc3xx_platform_set_abort>
    15c2:	bf00      	nop
    15c4:	00006fbc 	.word	0x00006fbc

000015c8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    15c8:	4901      	ldr	r1, [pc, #4]	; (15d0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    15ca:	2210      	movs	r2, #16
	str	r2, [r1]
    15cc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    15ce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    15d0:	e000ed10 	.word	0xe000ed10

000015d4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    15d4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    15d6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    15d8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    15dc:	b501      	push	{r0, lr}
    15de:	f7ff ff4f 	bl	1480 <z_arm_on_enter_cpu_idle>
    15e2:	2800      	cmp	r0, #0
    15e4:	d002      	beq.n	15ec <_skip_1>
    15e6:	f3bf 8f4f 	dsb	sy
    15ea:	bf20      	wfe

000015ec <_skip_1>:
    15ec:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
    15f0:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    15f4:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    15f6:	4770      	bx	lr

000015f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    15f8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    15fa:	2800      	cmp	r0, #0
    15fc:	db07      	blt.n	160e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15fe:	2301      	movs	r3, #1
    1600:	0941      	lsrs	r1, r0, #5
    1602:	4a03      	ldr	r2, [pc, #12]	; (1610 <arch_irq_enable+0x18>)
    1604:	f000 001f 	and.w	r0, r0, #31
    1608:	4083      	lsls	r3, r0
    160a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    160e:	4770      	bx	lr
    1610:	e000e100 	.word	0xe000e100

00001614 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1614:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1616:	2800      	cmp	r0, #0
    1618:	db0c      	blt.n	1634 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    161a:	2201      	movs	r2, #1
    161c:	4906      	ldr	r1, [pc, #24]	; (1638 <arch_irq_disable+0x24>)
    161e:	0943      	lsrs	r3, r0, #5
    1620:	f000 001f 	and.w	r0, r0, #31
    1624:	4082      	lsls	r2, r0
    1626:	3320      	adds	r3, #32
    1628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    162c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1630:	f3bf 8f6f 	isb	sy
}
    1634:	4770      	bx	lr
    1636:	bf00      	nop
    1638:	e000e100 	.word	0xe000e100

0000163c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    163c:	4b05      	ldr	r3, [pc, #20]	; (1654 <arch_irq_is_enabled+0x18>)
    163e:	0942      	lsrs	r2, r0, #5
    1640:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1644:	2301      	movs	r3, #1
    1646:	f000 001f 	and.w	r0, r0, #31
    164a:	fa03 f000 	lsl.w	r0, r3, r0
}
    164e:	4010      	ands	r0, r2
    1650:	4770      	bx	lr
    1652:	bf00      	nop
    1654:	e000e100 	.word	0xe000e100

00001658 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1658:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    165a:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    165c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1660:	bfac      	ite	ge
    1662:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1666:	4b06      	ldrlt	r3, [pc, #24]	; (1680 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1668:	ea4f 1141 	mov.w	r1, r1, lsl #5
    166c:	b2c9      	uxtb	r1, r1
    166e:	bfab      	itete	ge
    1670:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1674:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1678:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    167c:	5419      	strblt	r1, [r3, r0]
}
    167e:	4770      	bx	lr
    1680:	e000ed14 	.word	0xe000ed14

00001684 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1684:	bf30      	wfi
    b z_SysNmiOnReset
    1686:	f7ff bffd 	b.w	1684 <z_SysNmiOnReset>
    168a:	bf00      	nop

0000168c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    168c:	4a0b      	ldr	r2, [pc, #44]	; (16bc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    168e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1690:	4b0b      	ldr	r3, [pc, #44]	; (16c0 <z_arm_prep_c+0x34>)
    1692:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1696:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    169c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    16a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    16a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    16a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    16ac:	f002 fd04 	bl	40b8 <z_bss_zero>
	z_data_copy();
    16b0:	f002 fd4a 	bl	4148 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    16b4:	f000 f98c 	bl	19d0 <z_arm_interrupt_init>
	z_cstart();
    16b8:	f002 fd0a 	bl	40d0 <z_cstart>
    16bc:	00000000 	.word	0x00000000
    16c0:	e000ed00 	.word	0xe000ed00

000016c4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    16c4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    16c8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    16ca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    16ce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    16d2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    16d4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    16d8:	2902      	cmp	r1, #2
    beq _oops
    16da:	d0ff      	beq.n	16dc <_oops>

000016dc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    16dc:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    16de:	f003 fada 	bl	4c96 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    16e2:	bd01      	pop	{r0, pc}

000016e4 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    16e4:	4604      	mov	r4, r0
    16e6:	4608      	mov	r0, r1
    16e8:	4611      	mov	r1, r2
    16ea:	461a      	mov	r2, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    16ec:	2300      	movs	r3, #0
    16ee:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    16f2:	4b0a      	ldr	r3, [pc, #40]	; (171c <loop+0x2>)
    16f4:	2520      	movs	r5, #32
    16f6:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    16fa:	f386 880b 	msr	PSPLIM, r6
    16fe:	f383 8809 	msr	PSP, r3
    1702:	b663      	cpsie	if
    1704:	f04f 0300 	mov.w	r3, #0
    1708:	f383 8811 	msr	BASEPRI, r3
    170c:	f3bf 8f6f 	isb	sy
    1710:	47a0      	blx	r4
    1712:	f385 8811 	msr	BASEPRI, r5
    1716:	f3bf 8f6f 	isb	sy

0000171a <loop>:
    171a:	e7fe      	b.n	171a <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    171c:	20049070 	.word	0x20049070

00001720 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1720:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1722:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1726:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    172a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    172e:	4904      	ldr	r1, [pc, #16]	; (1740 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1730:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1732:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1734:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1736:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    173a:	4902      	ldr	r1, [pc, #8]	; (1744 <_isr_wrapper+0x24>)
	bx r1
    173c:	4708      	bx	r1
    173e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1740:	00006c4c 	.word	0x00006c4c
	ldr r1, =z_arm_int_exit
    1744:	00001749 	.word	0x00001749

00001748 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1748:	4770      	bx	lr
    174a:	bf00      	nop

0000174c <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    174c:	4b15      	ldr	r3, [pc, #84]	; (17a4 <usage_fault.constprop.0+0x58>)
    174e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1750:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1756:	bf14      	ite	ne
    1758:	201e      	movne	r0, #30
    175a:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    175c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1762:	bf18      	it	ne
    1764:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1766:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    176a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    176c:	bf18      	it	ne
    176e:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1770:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1776:	bf18      	it	ne
    1778:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    177a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    177e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1780:	bf18      	it	ne
    1782:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1784:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    178a:	bf18      	it	ne
    178c:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    178e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1792:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    1794:	bf18      	it	ne
    1796:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1798:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    179c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    17a0:	629a      	str	r2, [r3, #40]	; 0x28
}
    17a2:	4770      	bx	lr
    17a4:	e000ed00 	.word	0xe000ed00

000017a8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    17a8:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    17aa:	4b19      	ldr	r3, [pc, #100]	; (1810 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    17ac:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    17ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    17b0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    17b2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    17b6:	bf14      	ite	ne
    17b8:	2017      	movne	r0, #23
    17ba:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    17bc:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    17c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    17c2:	bf18      	it	ne
    17c4:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    17c6:	05a4      	lsls	r4, r4, #22
    17c8:	d509      	bpl.n	17de <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    17ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    17cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    17ce:	0400      	lsls	r0, r0, #16
    17d0:	d504      	bpl.n	17dc <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    17d2:	b11a      	cbz	r2, 17dc <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    17d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    17da:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    17dc:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    17de:	4b0c      	ldr	r3, [pc, #48]	; (1810 <bus_fault.constprop.0+0x68>)
    17e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    17e2:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    17e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    17e8:	bf18      	it	ne
    17ea:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    17ec:	05d2      	lsls	r2, r2, #23
    17ee:	d40c      	bmi.n	180a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    17f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    17f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    17f6:	bf18      	it	ne
    17f8:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    17fa:	4a05      	ldr	r2, [pc, #20]	; (1810 <bus_fault.constprop.0+0x68>)
    17fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17fe:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1802:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1804:	2300      	movs	r3, #0
    1806:	700b      	strb	r3, [r1, #0]
}
    1808:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    180a:	201b      	movs	r0, #27
    180c:	e7f5      	b.n	17fa <bus_fault.constprop.0+0x52>
    180e:	bf00      	nop
    1810:	e000ed00 	.word	0xe000ed00

00001814 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1814:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1816:	4b1c      	ldr	r3, [pc, #112]	; (1888 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1818:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    181a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    181c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    181e:	f010 0f10 	tst.w	r0, #16
    1822:	bf14      	ite	ne
    1824:	2011      	movne	r0, #17
    1826:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1828:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    182c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    182e:	bf18      	it	ne
    1830:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1832:	07a4      	lsls	r4, r4, #30
    1834:	d509      	bpl.n	184a <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    1836:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1838:	6a98      	ldr	r0, [r3, #40]	; 0x28
    183a:	0600      	lsls	r0, r0, #24
    183c:	d504      	bpl.n	1848 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    183e:	b11a      	cbz	r2, 1848 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1842:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1846:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1848:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    184a:	4b0f      	ldr	r3, [pc, #60]	; (1888 <mem_manage_fault.constprop.0+0x74>)
    184c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    184e:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1854:	bf18      	it	ne
    1856:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1858:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    185c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    185e:	bf18      	it	ne
    1860:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1862:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1864:	bf58      	it	pl
    1866:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1868:	4b07      	ldr	r3, [pc, #28]	; (1888 <mem_manage_fault.constprop.0+0x74>)
    186a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    186c:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    186e:	bf42      	ittt	mi
    1870:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1872:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1876:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    187a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    187e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1880:	2300      	movs	r3, #0
    1882:	700b      	strb	r3, [r1, #0]
}
    1884:	bd10      	pop	{r4, pc}
    1886:	bf00      	nop
    1888:	e000ed00 	.word	0xe000ed00

0000188c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    188c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    188e:	4b44      	ldr	r3, [pc, #272]	; (19a0 <z_arm_fault+0x114>)
{
    1890:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1892:	685b      	ldr	r3, [r3, #4]
    1894:	2500      	movs	r5, #0
{
    1896:	b08a      	sub	sp, #40	; 0x28
    1898:	f3c3 0308 	ubfx	r3, r3, #0, #9
    189c:	f385 8811 	msr	BASEPRI, r5
    18a0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    18a4:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    18a8:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    18ac:	d111      	bne.n	18d2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    18ae:	f002 000c 	and.w	r0, r2, #12
    18b2:	2808      	cmp	r0, #8
    18b4:	d00d      	beq.n	18d2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    18b6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    18b8:	bf4c      	ite	mi
    18ba:	460e      	movmi	r6, r1
			*nested_exc = true;
    18bc:	2501      	movpl	r5, #1
	*recoverable = false;
    18be:	2200      	movs	r2, #0
	switch (fault) {
    18c0:	3b03      	subs	r3, #3
	*recoverable = false;
    18c2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    18c6:	2b03      	cmp	r3, #3
    18c8:	d805      	bhi.n	18d6 <z_arm_fault+0x4a>
    18ca:	e8df f003 	tbb	[pc, r3]
    18ce:	5c1e      	.short	0x5c1e
    18d0:	5960      	.short	0x5960
		return NULL;
    18d2:	462e      	mov	r6, r5
    18d4:	e7f3      	b.n	18be <z_arm_fault+0x32>
    18d6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    18d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    18dc:	b99b      	cbnz	r3, 1906 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    18de:	2220      	movs	r2, #32
    18e0:	4631      	mov	r1, r6
    18e2:	a802      	add	r0, sp, #8
    18e4:	f003 fa33 	bl	4d4e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    18e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18ea:	2d00      	cmp	r5, #0
    18ec:	d053      	beq.n	1996 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    18ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
    18f2:	b922      	cbnz	r2, 18fe <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    18f4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    18f8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    18fc:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    18fe:	4620      	mov	r0, r4
    1900:	a902      	add	r1, sp, #8
    1902:	f003 f9c6 	bl	4c92 <z_arm_fatal_error>
}
    1906:	b00a      	add	sp, #40	; 0x28
    1908:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    190a:	4b25      	ldr	r3, [pc, #148]	; (19a0 <z_arm_fault+0x114>)
    190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    190e:	0791      	lsls	r1, r2, #30
    1910:	d4e1      	bmi.n	18d6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1914:	2a00      	cmp	r2, #0
    1916:	dbde      	blt.n	18d6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    191a:	0052      	lsls	r2, r2, #1
    191c:	d5db      	bpl.n	18d6 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    191e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1920:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1926:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1928:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    192c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1930:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1932:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    193a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    193c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1940:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1944:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1948:	4291      	cmp	r1, r2
    194a:	d009      	beq.n	1960 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    194c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    194e:	b2d2      	uxtb	r2, r2
    1950:	b142      	cbz	r2, 1964 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    1952:	2001      	movs	r0, #1
    1954:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1958:	f7ff ff5c 	bl	1814 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    195c:	4604      	mov	r4, r0
		break;
    195e:	e7bb      	b.n	18d8 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    1960:	6834      	ldr	r4, [r6, #0]
    1962:	e7b9      	b.n	18d8 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1966:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    196a:	d005      	beq.n	1978 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    196c:	2001      	movs	r0, #1
    196e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1972:	f7ff ff19 	bl	17a8 <bus_fault.constprop.0>
    1976:	e7f1      	b.n	195c <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    197a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    197e:	d3aa      	bcc.n	18d6 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    1980:	f7ff fee4 	bl	174c <usage_fault.constprop.0>
    1984:	e7ea      	b.n	195c <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    1986:	2000      	movs	r0, #0
    1988:	f10d 0107 	add.w	r1, sp, #7
    198c:	e7e4      	b.n	1958 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    198e:	2000      	movs	r0, #0
    1990:	f10d 0107 	add.w	r1, sp, #7
    1994:	e7ed      	b.n	1972 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1996:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    199a:	f023 0301 	bic.w	r3, r3, #1
    199e:	e7ad      	b.n	18fc <z_arm_fault+0x70>
    19a0:	e000ed00 	.word	0xe000ed00

000019a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    19a4:	4b04      	ldr	r3, [pc, #16]	; (19b8 <z_arm_fault_init+0x14>)
    19a6:	695a      	ldr	r2, [r3, #20]
    19a8:	f042 0210 	orr.w	r2, r2, #16
    19ac:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    19ae:	695a      	ldr	r2, [r3, #20]
    19b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    19b4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    19b6:	4770      	bx	lr
    19b8:	e000ed00 	.word	0xe000ed00

000019bc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    19bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    19c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    19c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    19c6:	4672      	mov	r2, lr
	bl z_arm_fault
    19c8:	f7ff ff60 	bl	188c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    19cc:	bd01      	pop	{r0, pc}
    19ce:	bf00      	nop

000019d0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    19d0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    19d2:	2120      	movs	r1, #32
    19d4:	4803      	ldr	r0, [pc, #12]	; (19e4 <z_arm_interrupt_init+0x14>)
    19d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    19d8:	3301      	adds	r3, #1
    19da:	2b45      	cmp	r3, #69	; 0x45
    19dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    19e0:	d1f9      	bne.n	19d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    19e2:	4770      	bx	lr
    19e4:	e000e100 	.word	0xe000e100

000019e8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    19e8:	2000      	movs	r0, #0
    msr CONTROL, r0
    19ea:	f380 8814 	msr	CONTROL, r0
    isb
    19ee:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    19f2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    19f4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    19f8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    19fc:	f7ff fd84 	bl	1508 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1a00:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1a02:	490e      	ldr	r1, [pc, #56]	; (1a3c <__start+0x54>)
    str r0, [r1]
    1a04:	6008      	str	r0, [r1, #0]
    dsb
    1a06:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a0a:	480d      	ldr	r0, [pc, #52]	; (1a40 <__start+0x58>)
    msr msp, r0
    1a0c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1a10:	f000 f82c 	bl	1a6c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a14:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1a16:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1a1a:	480a      	ldr	r0, [pc, #40]	; (1a44 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1a20:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1a22:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1a26:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1a2a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1a2c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1a2e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1a32:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1a36:	f7ff fe29 	bl	168c <z_arm_prep_c>
    1a3a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1a3c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1a40:	20049070 	.word	0x20049070
    ldr r0, =z_interrupt_stacks
    1a44:	20046070 	.word	0x20046070

00001a48 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1a48:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    1a4a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1a4c:	4906      	ldr	r1, [pc, #24]	; (1a68 <z_arm_clear_arm_mpu_config+0x20>)
    1a4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    1a52:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    1a56:	4293      	cmp	r3, r2
    1a58:	db00      	blt.n	1a5c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1a5a:	4770      	bx	lr
  mpu->RNR = rnr;
    1a5c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    1a60:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1a64:	3301      	adds	r3, #1
    1a66:	e7f6      	b.n	1a56 <z_arm_clear_arm_mpu_config+0xe>
    1a68:	e000ed00 	.word	0xe000ed00

00001a6c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1a6c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1a6e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1a70:	2400      	movs	r4, #0
    1a72:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1a76:	f7ff ffe7 	bl	1a48 <z_arm_clear_arm_mpu_config>
    1a7a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a7c:	f04f 30ff 	mov.w	r0, #4294967295
    1a80:	4a0c      	ldr	r2, [pc, #48]	; (1ab4 <z_arm_init_arch_hw_at_boot+0x48>)
    1a82:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a86:	3301      	adds	r3, #1
    1a88:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a8a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a8e:	d1f8      	bne.n	1a82 <z_arm_init_arch_hw_at_boot+0x16>
    1a90:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a92:	f04f 30ff 	mov.w	r0, #4294967295
    1a96:	4a07      	ldr	r2, [pc, #28]	; (1ab4 <z_arm_init_arch_hw_at_boot+0x48>)
    1a98:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a9c:	3301      	adds	r3, #1
    1a9e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1aa0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1aa4:	d1f8      	bne.n	1a98 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1aa6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1aa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1aac:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1ab0:	bd10      	pop	{r4, pc}
    1ab2:	bf00      	nop
    1ab4:	e000e100 	.word	0xe000e100

00001ab8 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ab8:	2101      	movs	r1, #1
    1aba:	4b02      	ldr	r3, [pc, #8]	; (1ac4 <z_arm_configure_static_mpu_regions+0xc>)
    1abc:	4a02      	ldr	r2, [pc, #8]	; (1ac8 <z_arm_configure_static_mpu_regions+0x10>)
    1abe:	4803      	ldr	r0, [pc, #12]	; (1acc <z_arm_configure_static_mpu_regions+0x14>)
    1ac0:	f000 b8dc 	b.w	1c7c <arm_core_mpu_configure_static_mpu_regions>
    1ac4:	20070000 	.word	0x20070000
    1ac8:	20002000 	.word	0x20002000
    1acc:	00006fc4 	.word	0x00006fc4

00001ad0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1ad0:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    1ad2:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1ad4:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1ad6:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1ada:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    1ade:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1ae0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1ae2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1ae4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    1ae8:	4905      	ldr	r1, [pc, #20]	; (1b00 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1aea:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1aee:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    1af2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    1af6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    1afa:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1afe:	bd10      	pop	{r4, pc}
    1b00:	e000ed00 	.word	0xe000ed00

00001b04 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b08:	460f      	mov	r7, r1
    1b0a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1b0c:	4606      	mov	r6, r0
    1b0e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    1b12:	4d4e      	ldr	r5, [pc, #312]	; (1c4c <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1b14:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1b16:	45b8      	cmp	r8, r7
    1b18:	f280 8094 	bge.w	1c44 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    1b1c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1b20:	f1b9 0f00 	cmp.w	r9, #0
    1b24:	d036      	beq.n	1b94 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    1b26:	f1b9 0f1f 	cmp.w	r9, #31
    1b2a:	f240 8089 	bls.w	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    1b2e:	f019 0f1f 	tst.w	r9, #31
    1b32:	f040 8085 	bne.w	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    1b36:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    1b3a:	f01a 0f1f 	tst.w	sl, #31
    1b3e:	d17f      	bne.n	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1b40:	4650      	mov	r0, sl
    1b42:	f003 f8b7 	bl	4cb4 <arm_cmse_mpu_region_get>
    1b46:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1b48:	eb09 000a 	add.w	r0, r9, sl
    1b4c:	3801      	subs	r0, #1
    1b4e:	f003 f8b1 	bl	4cb4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1b52:	4583      	cmp	fp, r0
    1b54:	d174      	bne.n	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    1b56:	f11b 0f16 	cmn.w	fp, #22
    1b5a:	d071      	beq.n	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    1b5c:	455c      	cmp	r4, fp
    1b5e:	dd6f      	ble.n	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1b60:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1b64:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    1b68:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1b6c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1b70:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1b74:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b78:	e9d6 3200 	ldrd	r3, r2, [r6]
    1b7c:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    1b7e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b80:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1b84:	d11e      	bne.n	1bc4 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    1b86:	45ca      	cmp	sl, r9
    1b88:	d108      	bne.n	1b9c <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1b8a:	4631      	mov	r1, r6
    1b8c:	fa5f f08b 	uxtb.w	r0, fp
    1b90:	f003 f899 	bl	4cc6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1b94:	f108 0801 	add.w	r8, r8, #1
    1b98:	360c      	adds	r6, #12
    1b9a:	e7bc      	b.n	1b16 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b9c:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    1b9e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1ba2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    1ba6:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1baa:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1bae:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    1bb0:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    1bb4:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1bb6:	f003 f886 	bl	4cc6 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    1bba:	f110 0f16 	cmn.w	r0, #22
    1bbe:	d03f      	beq.n	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    1bc0:	1c44      	adds	r4, r0, #1
    1bc2:	e7e7      	b.n	1b94 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    1bc4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1bc8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    1bcc:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1bce:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1bd2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1bd6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1bd8:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    1bda:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    1bdc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    1bde:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    1be2:	d0e8      	beq.n	1bb6 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    1be4:	f003 f86f 	bl	4cc6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1be8:	f110 0f16 	cmn.w	r0, #22
    1bec:	d028      	beq.n	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1bee:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1bf2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1bf6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = mpu_get_rbar() &
    1bfe:	f362 0304 	bfi	r3, r2, #0, #5
    1c02:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    1c06:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1c0a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1c0e:	085b      	lsrs	r3, r3, #1
    1c10:	f363 1247 	bfi	r2, r3, #5, #3
    1c14:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1c18:	e9d6 3200 	ldrd	r3, r2, [r6]
    1c1c:	4413      	add	r3, r2
    1c1e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1c20:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1c24:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1c26:	4453      	add	r3, sl
    1c28:	eba3 0309 	sub.w	r3, r3, r9
    1c2c:	b2c8      	uxtb	r0, r1
    1c2e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1c32:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1c34:	9303      	str	r3, [sp, #12]
    1c36:	d803      	bhi.n	1c40 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1c38:	4669      	mov	r1, sp
    1c3a:	f7ff ff49 	bl	1ad0 <region_init>
    1c3e:	e7bf      	b.n	1bc0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    1c40:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    1c44:	4620      	mov	r0, r4
    1c46:	b005      	add	sp, #20
    1c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c4c:	e000ed00 	.word	0xe000ed00

00001c50 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1c50:	2205      	movs	r2, #5
    1c52:	4b04      	ldr	r3, [pc, #16]	; (1c64 <arm_core_mpu_enable+0x14>)
    1c54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c5c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1c60:	4770      	bx	lr
    1c62:	bf00      	nop
    1c64:	e000ed00 	.word	0xe000ed00

00001c68 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1c68:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1c6c:	2200      	movs	r2, #0
    1c6e:	4b02      	ldr	r3, [pc, #8]	; (1c78 <arm_core_mpu_disable+0x10>)
    1c70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1c74:	4770      	bx	lr
    1c76:	bf00      	nop
    1c78:	e000ed00 	.word	0xe000ed00

00001c7c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1c7c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c7e:	4c03      	ldr	r4, [pc, #12]	; (1c8c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1c80:	7822      	ldrb	r2, [r4, #0]
    1c82:	f7ff ff3f 	bl	1b04 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c86:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1c88:	bd10      	pop	{r4, pc}
    1c8a:	bf00      	nop
    1c8c:	2000606a 	.word	0x2000606a

00001c90 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1c90:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1c92:	4d0e      	ldr	r5, [pc, #56]	; (1ccc <z_arm_mpu_init+0x3c>)
    1c94:	682c      	ldr	r4, [r5, #0]
    1c96:	2c08      	cmp	r4, #8
    1c98:	d815      	bhi.n	1cc6 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c9a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    1c9c:	f7ff ffe4 	bl	1c68 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    1ca0:	4b0b      	ldr	r3, [pc, #44]	; (1cd0 <z_arm_mpu_init+0x40>)
    1ca2:	4a0c      	ldr	r2, [pc, #48]	; (1cd4 <z_arm_mpu_init+0x44>)
    1ca4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1ca8:	4284      	cmp	r4, r0
    1caa:	d105      	bne.n	1cb8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1cac:	4b0a      	ldr	r3, [pc, #40]	; (1cd8 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1cae:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    1cb0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1cb2:	f7ff ffcd 	bl	1c50 <arm_core_mpu_enable>
}
    1cb6:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1cb8:	6869      	ldr	r1, [r5, #4]
    1cba:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1cbe:	f7ff ff07 	bl	1ad0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1cc2:	3001      	adds	r0, #1
    1cc4:	e7f0      	b.n	1ca8 <z_arm_mpu_init+0x18>
		return -1;
    1cc6:	f04f 30ff 	mov.w	r0, #4294967295
    1cca:	e7f4      	b.n	1cb6 <z_arm_mpu_init+0x26>
    1ccc:	00006fd0 	.word	0x00006fd0
    1cd0:	e000ed00 	.word	0xe000ed00
    1cd4:	0044ffaa 	.word	0x0044ffaa
    1cd8:	2000606a 	.word	0x2000606a

00001cdc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1cdc:	4b08      	ldr	r3, [pc, #32]	; (1d00 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1cde:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1ce0:	1ac3      	subs	r3, r0, r3
{
    1ce2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ce4:	4907      	ldr	r1, [pc, #28]	; (1d04 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1ce6:	109b      	asrs	r3, r3, #2
{
    1ce8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1cea:	4359      	muls	r1, r3
    1cec:	2240      	movs	r2, #64	; 0x40
    1cee:	4806      	ldr	r0, [pc, #24]	; (1d08 <onoff_stop+0x2c>)
    1cf0:	f003 f85d 	bl	4dae <stop>
	notify(mgr, res);
    1cf4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1cf6:	4601      	mov	r1, r0
	notify(mgr, res);
    1cf8:	4620      	mov	r0, r4
}
    1cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1cfe:	4718      	bx	r3
    1d00:	200045d0 	.word	0x200045d0
    1d04:	b6db6db7 	.word	0xb6db6db7
    1d08:	00006bec 	.word	0x00006bec

00001d0c <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d0c:	2340      	movs	r3, #64	; 0x40
{
    1d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d10:	4c0b      	ldr	r4, [pc, #44]	; (1d40 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d12:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1d14:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d16:	460b      	mov	r3, r1
{
    1d18:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d1a:	490a      	ldr	r1, [pc, #40]	; (1d44 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    1d1c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d1e:	4361      	muls	r1, r4
{
    1d20:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1d22:	4a09      	ldr	r2, [pc, #36]	; (1d48 <onoff_start+0x3c>)
    1d24:	4809      	ldr	r0, [pc, #36]	; (1d4c <onoff_start+0x40>)
    1d26:	f003 f86f 	bl	4e08 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1d2a:	1e01      	subs	r1, r0, #0
    1d2c:	da05      	bge.n	1d3a <onoff_start+0x2e>
		notify(mgr, err);
    1d2e:	4630      	mov	r0, r6
    1d30:	462b      	mov	r3, r5
	}
}
    1d32:	b002      	add	sp, #8
    1d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1d38:	4718      	bx	r3
}
    1d3a:	b002      	add	sp, #8
    1d3c:	bd70      	pop	{r4, r5, r6, pc}
    1d3e:	bf00      	nop
    1d40:	200045d0 	.word	0x200045d0
    1d44:	b6db6db7 	.word	0xb6db6db7
    1d48:	00004e7b 	.word	0x00004e7b
    1d4c:	00006bec 	.word	0x00006bec

00001d50 <generic_hfclk_stop>:
{
    1d50:	b510      	push	{r4, lr}
	__asm__ volatile(
    1d52:	f04f 0320 	mov.w	r3, #32
    1d56:	f3ef 8411 	mrs	r4, BASEPRI
    1d5a:	f383 8812 	msr	BASEPRI_MAX, r3
    1d5e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1d62:	4a07      	ldr	r2, [pc, #28]	; (1d80 <generic_hfclk_stop+0x30>)
    1d64:	6813      	ldr	r3, [r2, #0]
    1d66:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1d6a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1d6c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1d6e:	d402      	bmi.n	1d76 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1d70:	2001      	movs	r0, #1
    1d72:	f004 fea0 	bl	6ab6 <nrfx_clock_stop>
	__asm__ volatile(
    1d76:	f384 8811 	msr	BASEPRI, r4
    1d7a:	f3bf 8f6f 	isb	sy
}
    1d7e:	bd10      	pop	{r4, pc}
    1d80:	20004670 	.word	0x20004670

00001d84 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d88:	2200      	movs	r2, #0
    1d8a:	2101      	movs	r1, #1
{
    1d8c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d8e:	2005      	movs	r0, #5
    1d90:	f7ff fc62 	bl	1658 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1d94:	4811      	ldr	r0, [pc, #68]	; (1ddc <clk_init+0x58>)
    1d96:	f001 fd87 	bl	38a8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1d9a:	4b11      	ldr	r3, [pc, #68]	; (1de0 <clk_init+0x5c>)
    1d9c:	4298      	cmp	r0, r3
    1d9e:	d119      	bne.n	1dd4 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1da0:	f004 fe18 	bl	69d4 <nrfx_clock_enable>
    1da4:	2400      	movs	r4, #0
	return &data->mgr[type];
    1da6:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1daa:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1dac:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1de4 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    1db0:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1db2:	4641      	mov	r1, r8
    1db4:	fb09 5004 	mla	r0, r9, r4, r5
    1db8:	f002 fe70 	bl	4a9c <onoff_manager_init>
		if (err < 0) {
    1dbc:	2800      	cmp	r0, #0
    1dbe:	db07      	blt.n	1dd0 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1dc0:	2301      	movs	r3, #1
    1dc2:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1dc6:	441c      	add	r4, r3
    1dc8:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1dca:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1dcc:	d1f0      	bne.n	1db0 <clk_init+0x2c>
	}

	return 0;
    1dce:	2000      	movs	r0, #0
}
    1dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1dd4:	f06f 0004 	mvn.w	r0, #4
    1dd8:	e7fa      	b.n	1dd0 <clk_init+0x4c>
    1dda:	bf00      	nop
    1ddc:	00001e1d 	.word	0x00001e1d
    1de0:	0bad0000 	.word	0x0bad0000
    1de4:	00006ff8 	.word	0x00006ff8

00001de8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1de8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1dea:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1dec:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1dee:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1df0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1df2:	4808      	ldr	r0, [pc, #32]	; (1e14 <clkstarted_handle.constprop.0+0x2c>)
    1df4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1df6:	3378      	adds	r3, #120	; 0x78
    1df8:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    1dfa:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    1dfe:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1e00:	f002 ffc2 	bl	4d88 <set_on_state>
	if (callback) {
    1e04:	b12d      	cbz	r5, 1e12 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e06:	4632      	mov	r2, r6
    1e08:	462b      	mov	r3, r5
}
    1e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e0e:	4802      	ldr	r0, [pc, #8]	; (1e18 <clkstarted_handle.constprop.0+0x30>)
    1e10:	4718      	bx	r3
}
    1e12:	bd70      	pop	{r4, r5, r6, pc}
    1e14:	200045d0 	.word	0x200045d0
    1e18:	00006bec 	.word	0x00006bec

00001e1c <clock_event_handler>:
	switch (event) {
    1e1c:	2805      	cmp	r0, #5
    1e1e:	d811      	bhi.n	1e44 <clock_event_handler+0x28>
    1e20:	e8df f000 	tbb	[pc, r0]
    1e24:	10100e03 	.word	0x10100e03
    1e28:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1e2a:	4b07      	ldr	r3, [pc, #28]	; (1e48 <clock_event_handler+0x2c>)
    1e2c:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1e2e:	f010 0007 	ands.w	r0, r0, #7
    1e32:	d107      	bne.n	1e44 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e34:	f7ff bfd8 	b.w	1de8 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1e38:	2002      	movs	r0, #2
    1e3a:	e7fb      	b.n	1e34 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1e3c:	2003      	movs	r0, #3
    1e3e:	e7f9      	b.n	1e34 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1e40:	2001      	movs	r0, #1
    1e42:	e7f7      	b.n	1e34 <clock_event_handler+0x18>
}
    1e44:	4770      	bx	lr
    1e46:	bf00      	nop
    1e48:	200045d0 	.word	0x200045d0

00001e4c <generic_hfclk_start>:
{
    1e4c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1e4e:	f04f 0320 	mov.w	r3, #32
    1e52:	f3ef 8111 	mrs	r1, BASEPRI
    1e56:	f383 8812 	msr	BASEPRI_MAX, r3
    1e5a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1e5e:	4a12      	ldr	r2, [pc, #72]	; (1ea8 <generic_hfclk_start+0x5c>)
    1e60:	6813      	ldr	r3, [r2, #0]
    1e62:	f043 0002 	orr.w	r0, r3, #2
    1e66:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1e68:	07da      	lsls	r2, r3, #31
    1e6a:	d408      	bmi.n	1e7e <generic_hfclk_start+0x32>
	__asm__ volatile(
    1e6c:	f381 8811 	msr	BASEPRI, r1
    1e70:	f3bf 8f6f 	isb	sy
}
    1e74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1e78:	2001      	movs	r0, #1
    1e7a:	f004 bdbd 	b.w	69f8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1e7e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e82:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1e86:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1e8a:	07d3      	lsls	r3, r2, #31
    1e8c:	d5ee      	bpl.n	1e6c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1e8e:	4807      	ldr	r0, [pc, #28]	; (1eac <generic_hfclk_start+0x60>)
    1e90:	f002 ff7a 	bl	4d88 <set_on_state>
    1e94:	f381 8811 	msr	BASEPRI, r1
    1e98:	f3bf 8f6f 	isb	sy
}
    1e9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1ea0:	2000      	movs	r0, #0
    1ea2:	f7ff bfa1 	b.w	1de8 <clkstarted_handle.constprop.0>
    1ea6:	bf00      	nop
    1ea8:	20004670 	.word	0x20004670
    1eac:	20004648 	.word	0x20004648

00001eb0 <z_nrf_clock_control_lf_on>:
{
    1eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1eb4:	2201      	movs	r2, #1
    1eb6:	4607      	mov	r7, r0
    1eb8:	4934      	ldr	r1, [pc, #208]	; (1f8c <z_nrf_clock_control_lf_on+0xdc>)
    1eba:	e8d1 3fef 	ldaex	r3, [r1]
    1ebe:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1ec2:	2800      	cmp	r0, #0
    1ec4:	d1f9      	bne.n	1eba <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1ec6:	b933      	cbnz	r3, 1ed6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1ec8:	4931      	ldr	r1, [pc, #196]	; (1f90 <z_nrf_clock_control_lf_on+0xe0>)
		err = onoff_request(mgr, &cli);
    1eca:	4832      	ldr	r0, [pc, #200]	; (1f94 <z_nrf_clock_control_lf_on+0xe4>)
    1ecc:	604b      	str	r3, [r1, #4]
    1ece:	60cb      	str	r3, [r1, #12]
    1ed0:	608a      	str	r2, [r1, #8]
    1ed2:	f002 fdf6 	bl	4ac2 <onoff_request>
	switch (start_mode) {
    1ed6:	1e7b      	subs	r3, r7, #1
    1ed8:	2b01      	cmp	r3, #1
    1eda:	d82d      	bhi.n	1f38 <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1edc:	2f01      	cmp	r7, #1
    1ede:	d107      	bne.n	1ef0 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1ee0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1ee4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1ee8:	f003 0303 	and.w	r3, r3, #3
    1eec:	2b02      	cmp	r3, #2
    1eee:	d023      	beq.n	1f38 <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ef0:	f004 fe25 	bl	6b3e <k_is_in_isr>
    1ef4:	4605      	mov	r5, r0
    1ef6:	bb08      	cbnz	r0, 1f3c <z_nrf_clock_control_lf_on+0x8c>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1ef8:	4b27      	ldr	r3, [pc, #156]	; (1f98 <z_nrf_clock_control_lf_on+0xe8>)
    1efa:	781b      	ldrb	r3, [r3, #0]
    1efc:	b1f3      	cbz	r3, 1f3c <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    1efe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1f02:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1f04:	4606      	mov	r6, r0
    1f06:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1f0a:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f0e:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f12:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1f9c <z_nrf_clock_control_lf_on+0xec>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1f16:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1f1a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1f1e:	03d2      	lsls	r2, r2, #15
    1f20:	d516      	bpl.n	1f50 <z_nrf_clock_control_lf_on+0xa0>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1f22:	f003 0303 	and.w	r3, r3, #3
    1f26:	2b02      	cmp	r3, #2
    1f28:	d001      	beq.n	1f2e <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1f2a:	2f01      	cmp	r7, #1
    1f2c:	d110      	bne.n	1f50 <z_nrf_clock_control_lf_on+0xa0>
	if (isr_mode) {
    1f2e:	b33d      	cbz	r5, 1f80 <z_nrf_clock_control_lf_on+0xd0>
    1f30:	f386 8811 	msr	BASEPRI, r6
    1f34:	f3bf 8f6f 	isb	sy
}
    1f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    1f3c:	f04f 0320 	mov.w	r3, #32
    1f40:	f3ef 8611 	mrs	r6, BASEPRI
    1f44:	f383 8812 	msr	BASEPRI_MAX, r3
    1f48:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f4c:	2501      	movs	r5, #1
    1f4e:	e7dc      	b.n	1f0a <z_nrf_clock_control_lf_on+0x5a>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1f50:	4630      	mov	r0, r6
    1f52:	f7ff fb3f 	bl	15d4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1f56:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1f5a:	b2db      	uxtb	r3, r3
    1f5c:	2b01      	cmp	r3, #1
    1f5e:	d1da      	bne.n	1f16 <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1f60:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1f64:	2a00      	cmp	r2, #0
    1f66:	d0d6      	beq.n	1f16 <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f68:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1f6c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1f70:	2202      	movs	r2, #2
    1f72:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    1f76:	2220      	movs	r2, #32
    1f78:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1f7c:	60a3      	str	r3, [r4, #8]
}
    1f7e:	e7ca      	b.n	1f16 <z_nrf_clock_control_lf_on+0x66>
    p_reg->INTENSET = mask;
    1f80:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1f84:	2202      	movs	r2, #2
    1f86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1f8a:	e7d5      	b.n	1f38 <z_nrf_clock_control_lf_on+0x88>
    1f8c:	200045cc 	.word	0x200045cc
    1f90:	200045bc 	.word	0x200045bc
    1f94:	200045ec 	.word	0x200045ec
    1f98:	2004606e 	.word	0x2004606e
    1f9c:	e000e100 	.word	0xe000e100

00001fa0 <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
    1fa0:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
    1fa4:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
    1fa8:	280a      	cmp	r0, #10
    1faa:	bf9a      	itte	ls
    1fac:	4b02      	ldrls	r3, [pc, #8]	; (1fb8 <qspi_get_zephyr_ret_code+0x18>)
    1fae:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
    1fb2:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
    1fb6:	4770      	bx	lr
    1fb8:	00007298 	.word	0x00007298

00001fbc <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
    1fbc:	4b02      	ldr	r3, [pc, #8]	; (1fc8 <qspi_nor_pages_layout+0xc>)
    1fbe:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    1fc0:	2301      	movs	r3, #1
    1fc2:	6013      	str	r3, [r2, #0]
}
    1fc4:	4770      	bx	lr
    1fc6:	bf00      	nop
    1fc8:	000070ac 	.word	0x000070ac

00001fcc <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
    1fcc:	4800      	ldr	r0, [pc, #0]	; (1fd0 <qspi_flash_get_parameters+0x4>)
    1fce:	4770      	bx	lr
    1fd0:	00007040 	.word	0x00007040

00001fd4 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
    1fd4:	4b0c      	ldr	r3, [pc, #48]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
static inline void qspi_wait_for_completion(const struct device *dev,
    1fd6:	b510      	push	{r4, lr}
	if (res == NRFX_SUCCESS) {
    1fd8:	4299      	cmp	r1, r3
static inline void qspi_wait_for_completion(const struct device *dev,
    1fda:	4604      	mov	r4, r0
	if (res == NRFX_SUCCESS) {
    1fdc:	d10f      	bne.n	1ffe <qspi_wait_for_completion.isra.0+0x2a>
    1fde:	f04f 0320 	mov.w	r3, #32
    1fe2:	f3ef 8011 	mrs	r0, BASEPRI
    1fe6:	f383 8812 	msr	BASEPRI_MAX, r3
    1fea:	f3bf 8f6f 	isb	sy
		while (!dev_data->ready) {
    1fee:	7823      	ldrb	r3, [r4, #0]
    1ff0:	b133      	cbz	r3, 2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
		dev_data->ready = false;
    1ff2:	2300      	movs	r3, #0
    1ff4:	7023      	strb	r3, [r4, #0]
	__asm__ volatile(
    1ff6:	f380 8811 	msr	BASEPRI, r0
    1ffa:	f3bf 8f6f 	isb	sy
}
    1ffe:	bd10      	pop	{r4, pc}
    2000:	f7ff fae8 	bl	15d4 <arch_cpu_atomic_idle>
    2004:	e7eb      	b.n	1fde <qspi_wait_for_completion.isra.0+0xa>
    2006:	bf00      	nop
    2008:	0bad0000 	.word	0x0bad0000

0000200c <qspi_device_init>:
{
    200c:	b538      	push	{r3, r4, r5, lr}
    200e:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
    2010:	6900      	ldr	r0, [r0, #16]
	if (dev_data->xip_enabled) {
    2012:	7841      	ldrb	r1, [r0, #1]
    2014:	b9a9      	cbnz	r1, 2042 <qspi_device_init+0x36>
	if (!qspi_initialized) {
    2016:	4d0c      	ldr	r5, [pc, #48]	; (2048 <qspi_device_init+0x3c>)
	qspi_lock(dev);
    2018:	f002 ff56 	bl	4ec8 <qspi_lock.isra.0>
	if (!qspi_initialized) {
    201c:	782b      	ldrb	r3, [r5, #0]
    201e:	b95b      	cbnz	r3, 2038 <qspi_device_init+0x2c>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    2020:	4602      	mov	r2, r0
    2022:	490a      	ldr	r1, [pc, #40]	; (204c <qspi_device_init+0x40>)
    2024:	6860      	ldr	r0, [r4, #4]
    2026:	f001 fdff 	bl	3c28 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
    202a:	f7ff ffb9 	bl	1fa0 <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
    202e:	fab0 f380 	clz	r3, r0
    2032:	4601      	mov	r1, r0
    2034:	095b      	lsrs	r3, r3, #5
    2036:	702b      	strb	r3, [r5, #0]
	qspi_unlock(dev);
    2038:	6920      	ldr	r0, [r4, #16]
    203a:	f002 ff3d 	bl	4eb8 <qspi_unlock.isra.0>
}
    203e:	4608      	mov	r0, r1
    2040:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    2042:	2100      	movs	r1, #0
    2044:	e7fb      	b.n	203e <qspi_device_init+0x32>
    2046:	bf00      	nop
    2048:	2000606d 	.word	0x2000606d
    204c:	00004eb1 	.word	0x00004eb1

00002050 <qspi_device_uninit>:
{
    2050:	b538      	push	{r3, r4, r5, lr}
    2052:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
    2054:	6900      	ldr	r0, [r0, #16]
	if (dev_data->xip_enabled) {
    2056:	7843      	ldrb	r3, [r0, #1]
    2058:	b9ab      	cbnz	r3, 2086 <qspi_device_uninit+0x36>
	qspi_lock(dev);
    205a:	f002 ff35 	bl	4ec8 <qspi_lock.isra.0>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
    205e:	4d0a      	ldr	r5, [pc, #40]	; (2088 <qspi_device_uninit+0x38>)
    2060:	f001 ff18 	bl	3e94 <nrfx_qspi_mem_busy_check>
    2064:	42a8      	cmp	r0, r5
    2066:	d109      	bne.n	207c <qspi_device_uninit+0x2c>
		nrfx_qspi_uninit();
    2068:	f001 ff36 	bl	3ed8 <nrfx_qspi_uninit>
		qspi_initialized = false;
    206c:	2200      	movs	r2, #0
    206e:	4b07      	ldr	r3, [pc, #28]	; (208c <qspi_device_uninit+0x3c>)
	qspi_unlock(dev);
    2070:	6920      	ldr	r0, [r4, #16]
		qspi_initialized = false;
    2072:	701a      	strb	r2, [r3, #0]
}
    2074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	qspi_unlock(dev);
    2078:	f002 bf1e 	b.w	4eb8 <qspi_unlock.isra.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    207c:	f24c 3050 	movw	r0, #50000	; 0xc350
    2080:	f004 fd79 	bl	6b76 <z_impl_k_busy_wait>
}
    2084:	e7ec      	b.n	2060 <qspi_device_uninit+0x10>
}
    2086:	bd38      	pop	{r3, r4, r5, pc}
    2088:	0bad0000 	.word	0x0bad0000
    208c:	2000606d 	.word	0x2000606d

00002090 <qspi_nor_erase>:
{
    2090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr < 0 ||
    2094:	1e0d      	subs	r5, r1, #0
{
    2096:	4680      	mov	r8, r0
    2098:	4617      	mov	r7, r2
	const struct qspi_nor_config *params = dev->config;
    209a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (addr < 0 ||
    209e:	db66      	blt.n	216e <qspi_nor_erase+0xde>
    20a0:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
    20a4:	18aa      	adds	r2, r5, r2
	if (addr < 0 ||
    20a6:	429a      	cmp	r2, r3
    20a8:	d861      	bhi.n	216e <qspi_nor_erase+0xde>
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
    20aa:	f3c5 020b 	ubfx	r2, r5, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
    20ae:	2f00      	cmp	r7, #0
    20b0:	d05d      	beq.n	216e <qspi_nor_erase+0xde>
    20b2:	f3c7 030b 	ubfx	r3, r7, #0, #12
    20b6:	4313      	orrs	r3, r2
    20b8:	d159      	bne.n	216e <qspi_nor_erase+0xde>
	rv = qspi_device_init(dev);
    20ba:	f7ff ffa7 	bl	200c <qspi_device_init>
	if (rv != 0) {
    20be:	4604      	mov	r4, r0
    20c0:	bb48      	cbnz	r0, 2116 <qspi_nor_erase+0x86>
	rv = qspi_nor_write_protection_set(dev, false);
    20c2:	4601      	mov	r1, r0
    20c4:	4640      	mov	r0, r8
    20c6:	f002 ff42 	bl	4f4e <qspi_nor_write_protection_set>
	if (rv != 0) {
    20ca:	4604      	mov	r4, r0
    20cc:	bb18      	cbnz	r0, 2116 <qspi_nor_erase+0x86>
	qspi_lock(dev);
    20ce:	f8d8 0010 	ldr.w	r0, [r8, #16]
    20d2:	f002 fef9 	bl	4ec8 <qspi_lock.isra.0>
		if (res == NRFX_SUCCESS) {
    20d6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2174 <qspi_nor_erase+0xe4>
		if (size == params->size) {
    20da:	f8d9 3018 	ldr.w	r3, [r9, #24]
    20de:	42bb      	cmp	r3, r7
    20e0:	d11f      	bne.n	2122 <qspi_nor_erase+0x92>
			res = nrfx_qspi_chip_erase();
    20e2:	f004 fcfc 	bl	6ade <nrfx_qspi_chip_erase>
    20e6:	46bb      	mov	fp, r7
    20e8:	4606      	mov	r6, r0
		qspi_wait_for_completion(dev, res);
    20ea:	4631      	mov	r1, r6
    20ec:	f8d8 0010 	ldr.w	r0, [r8, #16]
    20f0:	f7ff ff70 	bl	1fd4 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
    20f4:	4556      	cmp	r6, sl
    20f6:	d12a      	bne.n	214e <qspi_nor_erase+0xbe>
	while (size > 0) {
    20f8:	ebb7 070b 	subs.w	r7, r7, fp
			addr += adj;
    20fc:	445d      	add	r5, fp
	while (size > 0) {
    20fe:	d1ec      	bne.n	20da <qspi_nor_erase+0x4a>
	qspi_unlock(dev);
    2100:	f8d8 0010 	ldr.w	r0, [r8, #16]
    2104:	f002 fed8 	bl	4eb8 <qspi_unlock.isra.0>
	int rv2 = qspi_nor_write_protection_set(dev, true);
    2108:	2101      	movs	r1, #1
    210a:	4640      	mov	r0, r8
    210c:	f002 ff1f 	bl	4f4e <qspi_nor_write_protection_set>
    2110:	2c00      	cmp	r4, #0
    2112:	bf08      	it	eq
    2114:	4604      	moveq	r4, r0
	qspi_device_uninit(dev);
    2116:	4640      	mov	r0, r8
    2118:	f7ff ff9a 	bl	2050 <qspi_device_uninit>
}
    211c:	4620      	mov	r0, r4
    211e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    2122:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    2126:	d309      	bcc.n	213c <qspi_nor_erase+0xac>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
    2128:	b2ab      	uxth	r3, r5
		} else if ((size >= QSPI_BLOCK_SIZE) &&
    212a:	b9ab      	cbnz	r3, 2158 <qspi_nor_erase+0xc8>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    212c:	4629      	mov	r1, r5
    212e:	2001      	movs	r0, #1
    2130:	f001 ff20 	bl	3f74 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
    2134:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
    2138:	4606      	mov	r6, r0
			adj = QSPI_BLOCK_SIZE;
    213a:	e7d6      	b.n	20ea <qspi_nor_erase+0x5a>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    213c:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    2140:	d20a      	bcs.n	2158 <qspi_nor_erase+0xc8>
		qspi_wait_for_completion(dev, res);
    2142:	490d      	ldr	r1, [pc, #52]	; (2178 <qspi_nor_erase+0xe8>)
    2144:	f8d8 0010 	ldr.w	r0, [r8, #16]
    2148:	f7ff ff44 	bl	1fd4 <qspi_wait_for_completion.isra.0>
			res = NRFX_ERROR_INVALID_PARAM;
    214c:	4e0a      	ldr	r6, [pc, #40]	; (2178 <qspi_nor_erase+0xe8>)
			rv = qspi_get_zephyr_ret_code(res);
    214e:	4630      	mov	r0, r6
    2150:	f7ff ff26 	bl	1fa0 <qspi_get_zephyr_ret_code>
    2154:	4604      	mov	r4, r0
			break;
    2156:	e7d3      	b.n	2100 <qspi_nor_erase+0x70>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
    2158:	f3c5 000b 	ubfx	r0, r5, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
    215c:	2800      	cmp	r0, #0
    215e:	d1f0      	bne.n	2142 <qspi_nor_erase+0xb2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    2160:	4629      	mov	r1, r5
    2162:	f001 ff07 	bl	3f74 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
    2166:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
    216a:	4606      	mov	r6, r0
			adj = QSPI_SECTOR_SIZE;
    216c:	e7bd      	b.n	20ea <qspi_nor_erase+0x5a>
		return -EINVAL;
    216e:	f06f 0415 	mvn.w	r4, #21
    2172:	e7d3      	b.n	211c <qspi_nor_erase+0x8c>
    2174:	0bad0000 	.word	0x0bad0000
    2178:	0bad0004 	.word	0x0bad0004

0000217c <qspi_nor_write>:
{
    217c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2180:	4605      	mov	r5, r0
    2182:	460e      	mov	r6, r1
    2184:	4698      	mov	r8, r3
	if (!src) {
    2186:	4617      	mov	r7, r2
    2188:	2a00      	cmp	r2, #0
    218a:	f000 8084 	beq.w	2296 <qspi_nor_write+0x11a>
	if ((size == 0)
    218e:	2b00      	cmp	r3, #0
    2190:	f000 8081 	beq.w	2296 <qspi_nor_write+0x11a>
	    || ((size > 4) && ((size % 4U) != 0))) {
    2194:	2b04      	cmp	r3, #4
    2196:	d902      	bls.n	219e <qspi_nor_write+0x22>
    2198:	f013 0f03 	tst.w	r3, #3
    219c:	d17b      	bne.n	2296 <qspi_nor_write+0x11a>
	if ((addr % 4U) != 0) {
    219e:	07b3      	lsls	r3, r6, #30
    21a0:	d179      	bne.n	2296 <qspi_nor_write+0x11a>
	if (addr < 0 ||
    21a2:	2e00      	cmp	r6, #0
	const struct qspi_nor_config *params = dev->config;
    21a4:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
    21a6:	db76      	blt.n	2296 <qspi_nor_write+0x11a>
    21a8:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    21aa:	eb06 0308 	add.w	r3, r6, r8
	if (addr < 0 ||
    21ae:	4293      	cmp	r3, r2
    21b0:	d871      	bhi.n	2296 <qspi_nor_write+0x11a>
	int rc = qspi_device_init(dev);
    21b2:	4628      	mov	r0, r5
    21b4:	f7ff ff2a 	bl	200c <qspi_device_init>
	if (rc != 0) {
    21b8:	4604      	mov	r4, r0
    21ba:	b998      	cbnz	r0, 21e4 <qspi_nor_write+0x68>
	res = qspi_nor_write_protection_set(dev, false);
    21bc:	4601      	mov	r1, r0
    21be:	4628      	mov	r0, r5
    21c0:	f002 fec5 	bl	4f4e <qspi_nor_write_protection_set>
    21c4:	4604      	mov	r4, r0
	qspi_lock(dev);
    21c6:	6928      	ldr	r0, [r5, #16]
    21c8:	f002 fe7e 	bl	4ec8 <qspi_lock.isra.0>
	if (!res) {
    21cc:	b18c      	cbz	r4, 21f2 <qspi_nor_write+0x76>
	qspi_unlock(dev);
    21ce:	6928      	ldr	r0, [r5, #16]
    21d0:	f002 fe72 	bl	4eb8 <qspi_unlock.isra.0>
	int res2 = qspi_nor_write_protection_set(dev, true);
    21d4:	2101      	movs	r1, #1
    21d6:	4628      	mov	r0, r5
    21d8:	f002 feb9 	bl	4f4e <qspi_nor_write_protection_set>
	rc = qspi_get_zephyr_ret_code(res);
    21dc:	4620      	mov	r0, r4
    21de:	f7ff fedf 	bl	1fa0 <qspi_get_zephyr_ret_code>
    21e2:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
    21e4:	4628      	mov	r0, r5
    21e6:	f7ff ff33 	bl	2050 <qspi_device_uninit>
}
    21ea:	4620      	mov	r0, r4
    21ec:	b004      	add	sp, #16
    21ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (size < 4U) {
    21f2:	f1b8 0f03 	cmp.w	r8, #3
    21f6:	d81c      	bhi.n	2232 <qspi_nor_write+0xb6>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
    21f8:	4632      	mov	r2, r6
    21fa:	2104      	movs	r1, #4
    21fc:	4668      	mov	r0, sp
    21fe:	f004 fc6b 	bl	6ad8 <nrfx_qspi_read>
    2202:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
    2204:	4601      	mov	r1, r0
    2206:	6928      	ldr	r0, [r5, #16]
    2208:	f7ff fee4 	bl	1fd4 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
    220c:	4b23      	ldr	r3, [pc, #140]	; (229c <qspi_nor_write+0x120>)
    220e:	429c      	cmp	r4, r3
    2210:	d132      	bne.n	2278 <qspi_nor_write+0xfc>
		memcpy(buf, sptr, slen);
    2212:	4642      	mov	r2, r8
    2214:	4639      	mov	r1, r7
    2216:	4668      	mov	r0, sp
    2218:	f002 fd99 	bl	4d4e <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
    221c:	4632      	mov	r2, r6
    221e:	2104      	movs	r1, #4
    2220:	4668      	mov	r0, sp
			res = nrfx_qspi_write(src, size, addr);
    2222:	f004 fc56 	bl	6ad2 <nrfx_qspi_write>
    2226:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    2228:	4601      	mov	r1, r0
    222a:	6928      	ldr	r0, [r5, #16]
    222c:	f7ff fed2 	bl	1fd4 <qspi_wait_for_completion.isra.0>
    2230:	e022      	b.n	2278 <qspi_nor_write+0xfc>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2232:	f007 4360 	and.w	r3, r7, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
    2236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    223a:	d028      	beq.n	228e <qspi_nor_write+0x112>
			if (res == NRFX_SUCCESS) {
    223c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 229c <qspi_nor_write+0x120>
			size_t len = MIN(slen, sizeof(buf));
    2240:	f1b8 0f10 	cmp.w	r8, #16
    2244:	46c1      	mov	r9, r8
    2246:	bf28      	it	cs
    2248:	f04f 0910 	movcs.w	r9, #16
			memcpy(buf, sp, len);
    224c:	4639      	mov	r1, r7
    224e:	464a      	mov	r2, r9
    2250:	4668      	mov	r0, sp
    2252:	f002 fd7c 	bl	4d4e <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
    2256:	4632      	mov	r2, r6
    2258:	2110      	movs	r1, #16
    225a:	4668      	mov	r0, sp
    225c:	f004 fc39 	bl	6ad2 <nrfx_qspi_write>
    2260:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
    2262:	4601      	mov	r1, r0
    2264:	6928      	ldr	r0, [r5, #16]
    2266:	f7ff feb5 	bl	1fd4 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
    226a:	4554      	cmp	r4, sl
    226c:	d104      	bne.n	2278 <qspi_nor_write+0xfc>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    226e:	ebb8 0809 	subs.w	r8, r8, r9
				sp += len;
    2272:	444f      	add	r7, r9
				addr += len;
    2274:	444e      	add	r6, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
    2276:	d1e3      	bne.n	2240 <qspi_nor_write+0xc4>
	qspi_unlock(dev);
    2278:	6928      	ldr	r0, [r5, #16]
    227a:	f002 fe1d 	bl	4eb8 <qspi_unlock.isra.0>
	int res2 = qspi_nor_write_protection_set(dev, true);
    227e:	2101      	movs	r1, #1
    2280:	4628      	mov	r0, r5
    2282:	f002 fe64 	bl	4f4e <qspi_nor_write_protection_set>
		res = res2;
    2286:	2c00      	cmp	r4, #0
    2288:	bf08      	it	eq
    228a:	4604      	moveq	r4, r0
    228c:	e7a6      	b.n	21dc <qspi_nor_write+0x60>
			res = nrfx_qspi_write(src, size, addr);
    228e:	4632      	mov	r2, r6
    2290:	4641      	mov	r1, r8
    2292:	4638      	mov	r0, r7
    2294:	e7c5      	b.n	2222 <qspi_nor_write+0xa6>
		return -EINVAL;
    2296:	f06f 0415 	mvn.w	r4, #21
    229a:	e7a6      	b.n	21ea <qspi_nor_write+0x6e>
    229c:	0bad0000 	.word	0x0bad0000

000022a0 <qspi_nor_read>:
{
    22a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a4:	4607      	mov	r7, r0
    22a6:	4688      	mov	r8, r1
    22a8:	461c      	mov	r4, r3
	if (!dest) {
    22aa:	4616      	mov	r6, r2
{
    22ac:	b085      	sub	sp, #20
	if (!dest) {
    22ae:	2a00      	cmp	r2, #0
    22b0:	f000 8099 	beq.w	23e6 <qspi_nor_read+0x146>
	if (!size) {
    22b4:	2b00      	cmp	r3, #0
    22b6:	f000 8094 	beq.w	23e2 <qspi_nor_read+0x142>
	if (addr < 0 ||
    22ba:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
    22bc:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
    22be:	f2c0 8092 	blt.w	23e6 <qspi_nor_read+0x146>
    22c2:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
    22c4:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
    22c6:	4293      	cmp	r3, r2
    22c8:	f200 808d 	bhi.w	23e6 <qspi_nor_read+0x146>
	int rc = qspi_device_init(dev);
    22cc:	f7ff fe9e 	bl	200c <qspi_device_init>
	if (rc != 0) {
    22d0:	4605      	mov	r5, r0
    22d2:	2800      	cmp	r0, #0
    22d4:	d17e      	bne.n	23d4 <qspi_nor_read+0x134>
	qspi_lock(dev);
    22d6:	f1c8 0500 	rsb	r5, r8, #0
    22da:	f005 0503 	and.w	r5, r5, #3
    22de:	6938      	ldr	r0, [r7, #16]
    22e0:	f002 fdf2 	bl	4ec8 <qspi_lock.isra.0>
	if (flash_prefix > size) {
    22e4:	42a5      	cmp	r5, r4
    22e6:	bf28      	it	cs
    22e8:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
    22ea:	4273      	negs	r3, r6
    22ec:	f003 0303 	and.w	r3, r3, #3
    22f0:	f006 0903 	and.w	r9, r6, #3
    22f4:	bf58      	it	pl
    22f6:	f1c3 0900 	rsbpl	r9, r3, #0
    22fa:	f1c9 0900 	rsb	r9, r9, #0
    22fe:	f009 0903 	and.w	r9, r9, #3
    2302:	45a1      	cmp	r9, r4
    2304:	bf28      	it	cs
    2306:	46a1      	movcs	r9, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
    2308:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
    230a:	eba4 0409 	sub.w	r4, r4, r9
    230e:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
    2312:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
    2316:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
    2318:	bfc8      	it	gt
    231a:	46a2      	movgt	sl, r4
    231c:	f003 0b03 	and.w	fp, r3, #3
    2320:	bfc8      	it	gt
    2322:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
    2326:	f1ba 0f00 	cmp.w	sl, #0
    232a:	d018      	beq.n	235e <qspi_nor_read+0xbe>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
    232c:	eb06 0309 	add.w	r3, r6, r9
    2330:	eb08 0205 	add.w	r2, r8, r5
    2334:	4651      	mov	r1, sl
    2336:	4618      	mov	r0, r3
    2338:	9301      	str	r3, [sp, #4]
    233a:	f004 fbcd 	bl	6ad8 <nrfx_qspi_read>
    233e:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    2340:	4601      	mov	r1, r0
    2342:	6938      	ldr	r0, [r7, #16]
    2344:	f7ff fe46 	bl	1fd4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    2348:	4a28      	ldr	r2, [pc, #160]	; (23ec <qspi_nor_read+0x14c>)
    234a:	4294      	cmp	r4, r2
    234c:	d13b      	bne.n	23c6 <qspi_nor_read+0x126>
		if (flash_prefix != dest_prefix) {
    234e:	454d      	cmp	r5, r9
    2350:	d005      	beq.n	235e <qspi_nor_read+0xbe>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
    2352:	9b01      	ldr	r3, [sp, #4]
    2354:	4652      	mov	r2, sl
    2356:	4619      	mov	r1, r3
    2358:	1970      	adds	r0, r6, r5
    235a:	f002 fce1 	bl	4d20 <memmove>
	if (flash_prefix != 0) {
    235e:	b1bd      	cbz	r5, 2390 <qspi_nor_read+0xf0>
				     (WORD_SIZE - flash_prefix));
    2360:	f1c5 0904 	rsb	r9, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
    2364:	2104      	movs	r1, #4
    2366:	eba8 0209 	sub.w	r2, r8, r9
    236a:	a802      	add	r0, sp, #8
    236c:	f004 fbb4 	bl	6ad8 <nrfx_qspi_read>
    2370:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    2372:	4601      	mov	r1, r0
    2374:	6938      	ldr	r0, [r7, #16]
    2376:	f7ff fe2d 	bl	1fd4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    237a:	4b1c      	ldr	r3, [pc, #112]	; (23ec <qspi_nor_read+0x14c>)
    237c:	429c      	cmp	r4, r3
    237e:	d122      	bne.n	23c6 <qspi_nor_read+0x126>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
    2380:	f109 0308 	add.w	r3, r9, #8
    2384:	462a      	mov	r2, r5
    2386:	4630      	mov	r0, r6
    2388:	eb0d 0103 	add.w	r1, sp, r3
    238c:	f002 fcdf 	bl	4d4e <memcpy>
	if (flash_suffix != 0) {
    2390:	f1bb 0f00 	cmp.w	fp, #0
    2394:	d016      	beq.n	23c4 <qspi_nor_read+0x124>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    2396:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
    2398:	eb08 0205 	add.w	r2, r8, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
    239c:	4452      	add	r2, sl
    239e:	eb0d 0001 	add.w	r0, sp, r1
    23a2:	f004 fb99 	bl	6ad8 <nrfx_qspi_read>
    23a6:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
    23a8:	4601      	mov	r1, r0
    23aa:	6938      	ldr	r0, [r7, #16]
    23ac:	f7ff fe12 	bl	1fd4 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
    23b0:	4b0e      	ldr	r3, [pc, #56]	; (23ec <qspi_nor_read+0x14c>)
    23b2:	429c      	cmp	r4, r3
    23b4:	d107      	bne.n	23c6 <qspi_nor_read+0x126>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
    23b6:	eb0a 0005 	add.w	r0, sl, r5
    23ba:	465a      	mov	r2, fp
    23bc:	a902      	add	r1, sp, #8
    23be:	4430      	add	r0, r6
    23c0:	f002 fcc5 	bl	4d4e <memcpy>
	return res;
    23c4:	4c09      	ldr	r4, [pc, #36]	; (23ec <qspi_nor_read+0x14c>)
	qspi_unlock(dev);
    23c6:	6938      	ldr	r0, [r7, #16]
    23c8:	f002 fd76 	bl	4eb8 <qspi_unlock.isra.0>
	rc = qspi_get_zephyr_ret_code(res);
    23cc:	4620      	mov	r0, r4
    23ce:	f7ff fde7 	bl	1fa0 <qspi_get_zephyr_ret_code>
    23d2:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    23d4:	4638      	mov	r0, r7
    23d6:	f7ff fe3b 	bl	2050 <qspi_device_uninit>
}
    23da:	4628      	mov	r0, r5
    23dc:	b005      	add	sp, #20
    23de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
    23e2:	461d      	mov	r5, r3
    23e4:	e7f9      	b.n	23da <qspi_nor_read+0x13a>
		return -EINVAL;
    23e6:	f06f 0515 	mvn.w	r5, #21
    23ea:	e7f6      	b.n	23da <qspi_nor_read+0x13a>
    23ec:	0bad0000 	.word	0x0bad0000

000023f0 <qspi_nor_init>:
{
    23f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    23f2:	6843      	ldr	r3, [r0, #4]
{
    23f4:	b087      	sub	sp, #28
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    23f6:	6a1d      	ldr	r5, [r3, #32]
{
    23f8:	4604      	mov	r4, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    23fa:	2100      	movs	r1, #0
    23fc:	4628      	mov	r0, r5
    23fe:	aa03      	add	r2, sp, #12
    2400:	f002 fe4c 	bl	509c <pinctrl_lookup_state>
	if (ret < 0) {
    2404:	2800      	cmp	r0, #0
    2406:	db66      	blt.n	24d6 <qspi_nor_init+0xe6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2408:	9b03      	ldr	r3, [sp, #12]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    240a:	682a      	ldr	r2, [r5, #0]
    240c:	7919      	ldrb	r1, [r3, #4]
    240e:	6818      	ldr	r0, [r3, #0]
    2410:	f000 f95e 	bl	26d0 <pinctrl_configure_pins>
	if (ret < 0) {
    2414:	2800      	cmp	r0, #0
    2416:	db5e      	blt.n	24d6 <qspi_nor_init+0xe6>

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    2418:	f04f 2750 	mov.w	r7, #1342197760	; 0x50005000
    241c:	2501      	movs	r5, #1
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
    241e:	2200      	movs	r2, #0
    2420:	2101      	movs	r1, #1
    2422:	202b      	movs	r0, #43	; 0x2b
    2424:	f7ff f918 	bl	1658 <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
    2428:	6866      	ldr	r6, [r4, #4]
	struct qspi_nor_data *dev_data = dev->data;
    242a:	6922      	ldr	r2, [r4, #16]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
    242c:	4630      	mov	r0, r6
    242e:	493d      	ldr	r1, [pc, #244]	; (2524 <qspi_nor_init+0x134>)
    2430:	f8c7 55b8 	str.w	r5, [r7, #1464]	; 0x5b8
    2434:	f001 fbf8 	bl	3c28 <nrfx_qspi_init>
    2438:	2302      	movs	r3, #2
    243a:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
	int ret = qspi_get_zephyr_ret_code(res);
    243e:	f7ff fdaf 	bl	1fa0 <qspi_get_zephyr_ret_code>
	if (ret < 0) {
    2442:	2800      	cmp	r0, #0
    2444:	db47      	blt.n	24d6 <qspi_nor_init+0xe6>
#endif /* CONFIG_PM_DEVICE */

static int exit_dpd(const struct device *const dev)
{
	if (IS_ENABLED(DT_INST_PROP(0, has_dpd))) {
		struct qspi_cmd cmd = {
    2446:	2200      	movs	r2, #0
    2448:	23ab      	movs	r3, #171	; 0xab
			.op_code = SPI_NOR_CMD_RDPD,
		};
		uint32_t t_exit_dpd = DT_INST_PROP_OR(0, t_exit_dpd, 0);
		int ret;

		ret = qspi_send_cmd(dev, &cmd, false);
    244a:	4620      	mov	r0, r4
    244c:	a903      	add	r1, sp, #12
		struct qspi_cmd cmd = {
    244e:	e9cd 2203 	strd	r2, r2, [sp, #12]
    2452:	9205      	str	r2, [sp, #20]
    2454:	f88d 300c 	strb.w	r3, [sp, #12]
		ret = qspi_send_cmd(dev, &cmd, false);
    2458:	f002 fd3e 	bl	4ed8 <qspi_send_cmd>
		if (ret < 0) {
    245c:	2800      	cmp	r0, #0
    245e:	db3a      	blt.n	24d6 <qspi_nor_init+0xe6>
	z_impl_k_busy_wait(usec_to_wait);
    2460:	2023      	movs	r0, #35	; 0x23
    2462:	f004 fb88 	bl	6b76 <z_impl_k_busy_wait>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
    2466:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
    2468:	3b02      	subs	r3, #2
    246a:	42ab      	cmp	r3, r5
    246c:	d905      	bls.n	247a <qspi_nor_init+0x8a>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
    246e:	7ab5      	ldrb	r5, [r6, #10]
    2470:	3d03      	subs	r5, #3
    2472:	2d01      	cmp	r5, #1
    2474:	bf8c      	ite	hi
    2476:	2500      	movhi	r5, #0
    2478:	2501      	movls	r5, #1
		ret = qspi_rdsr(dev, sr_num);
    247a:	4620      	mov	r0, r4
    247c:	f002 fd7c 	bl	4f78 <qspi_rdsr.constprop.0>
		if (ret < 0) {
    2480:	2800      	cmp	r0, #0
    2482:	db28      	blt.n	24d6 <qspi_nor_init+0xe6>
		uint8_t sr = (uint8_t)ret;
    2484:	b2c2      	uxtb	r2, r0
		if (qe_state != qe_value) {
    2486:	f3c0 1080 	ubfx	r0, r0, #6, #1
    248a:	4285      	cmp	r5, r0
    248c:	ad01      	add	r5, sp, #4
    248e:	d124      	bne.n	24da <qspi_nor_init+0xea>
	qspi_device_uninit(dev);
    2490:	4620      	mov	r0, r4
    2492:	f7ff fddd 	bl	2050 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
    2496:	2603      	movs	r6, #3
    2498:	2300      	movs	r3, #0
    249a:	e9cd 6302 	strd	r6, r3, [sp, #8]
    249e:	9304      	str	r3, [sp, #16]
    24a0:	239f      	movs	r3, #159	; 0x9f
	int ret = qspi_device_init(dev);
    24a2:	4620      	mov	r0, r4
	const struct qspi_buf rx_buf = {
    24a4:	f8cd d004 	str.w	sp, [sp, #4]
	const struct qspi_cmd cmd = {
    24a8:	f88d 300c 	strb.w	r3, [sp, #12]
    24ac:	9505      	str	r5, [sp, #20]
	int ret = qspi_device_init(dev);
    24ae:	f7ff fdad 	bl	200c <qspi_device_init>
	if (ret == 0) {
    24b2:	4602      	mov	r2, r0
    24b4:	bb78      	cbnz	r0, 2516 <qspi_nor_init+0x126>
		ret = qspi_send_cmd(dev, &cmd, false);
    24b6:	4620      	mov	r0, r4
    24b8:	a903      	add	r1, sp, #12
    24ba:	f002 fd0d 	bl	4ed8 <qspi_send_cmd>
    24be:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
    24c0:	4620      	mov	r0, r4
    24c2:	f7ff fdc5 	bl	2050 <qspi_device_uninit>
	if (ret != 0) {
    24c6:	bb4d      	cbnz	r5, 251c <qspi_nor_init+0x12c>
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
    24c8:	6860      	ldr	r0, [r4, #4]
    24ca:	4632      	mov	r2, r6
    24cc:	4669      	mov	r1, sp
    24ce:	301c      	adds	r0, #28
    24d0:	f002 fc16 	bl	4d00 <memcmp>
    24d4:	bb10      	cbnz	r0, 251c <qspi_nor_init+0x12c>
}
    24d6:	b007      	add	sp, #28
    24d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t sr_array[2] = {0};
    24da:	2300      	movs	r3, #0
			sr ^= qe_mask;
    24dc:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
    24e0:	f8ad 3000 	strh.w	r3, [sp]
		sr_array[0] = sr_val;
    24e4:	f88d 2000 	strb.w	r2, [sp]
	const struct qspi_buf sr_buf = {
    24e8:	2201      	movs	r2, #1
	ret = qspi_send_cmd(dev, &cmd, true);
    24ea:	4620      	mov	r0, r4
    24ec:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    24ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
	const struct qspi_buf sr_buf = {
    24f2:	f8cd d004 	str.w	sp, [sp, #4]
	struct qspi_cmd cmd = {
    24f6:	9305      	str	r3, [sp, #20]
    24f8:	f88d 200c 	strb.w	r2, [sp, #12]
    24fc:	9504      	str	r5, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
    24fe:	f002 fceb 	bl	4ed8 <qspi_send_cmd>
	if (ret == 0) {
    2502:	2800      	cmp	r0, #0
    2504:	d1e7      	bne.n	24d6 <qspi_nor_init+0xe6>
		ret = qspi_rdsr(dev, 1);
    2506:	4620      	mov	r0, r4
    2508:	f002 fd36 	bl	4f78 <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
    250c:	2800      	cmp	r0, #0
    250e:	dbe2      	blt.n	24d6 <qspi_nor_init+0xe6>
    2510:	07c3      	lsls	r3, r0, #31
    2512:	d4f8      	bmi.n	2506 <qspi_nor_init+0x116>
    2514:	e7bc      	b.n	2490 <qspi_nor_init+0xa0>
	qspi_device_uninit(dev);
    2516:	4620      	mov	r0, r4
    2518:	f7ff fd9a 	bl	2050 <qspi_device_uninit>
		return -ENODEV;
    251c:	f06f 0012 	mvn.w	r0, #18
    2520:	e7d9      	b.n	24d6 <qspi_nor_init+0xe6>
    2522:	bf00      	nop
    2524:	00004eb1 	.word	0x00004eb1

00002528 <flash_sim_page_layout>:

static void flash_sim_page_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &flash_sim_pages_layout;
    2528:	4b02      	ldr	r3, [pc, #8]	; (2534 <flash_sim_page_layout+0xc>)
    252a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    252c:	2301      	movs	r3, #1
    252e:	6013      	str	r3, [r2, #0]
}
    2530:	4770      	bx	lr
    2532:	bf00      	nop
    2534:	000070b4 	.word	0x000070b4

00002538 <flash_sim_get_parameters>:
flash_sim_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_sim_parameters;
}
    2538:	4800      	ldr	r0, [pc, #0]	; (253c <flash_sim_get_parameters+0x4>)
    253a:	4770      	bx	lr
    253c:	000070bc 	.word	0x000070bc

00002540 <flash_sim_write>:
{
    2540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2544:	461c      	mov	r4, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    2546:	440b      	add	r3, r1
    2548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    254c:	460d      	mov	r5, r1
    254e:	4617      	mov	r7, r2
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    2550:	d82c      	bhi.n	25ac <flash_sim_write+0x6c>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    2552:	2900      	cmp	r1, #0
    2554:	db2a      	blt.n	25ac <flash_sim_write+0x6c>
	if ((offset % FLASH_SIMULATOR_PROG_UNIT) ||
    2556:	ea41 0604 	orr.w	r6, r1, r4
    255a:	f016 0603 	ands.w	r6, r6, #3
    255e:	d125      	bne.n	25ac <flash_sim_write+0x6c>
	memset(buf, FLASH_SIMULATOR_ERASE_VALUE, sizeof(buf));
    2560:	2204      	movs	r2, #4
    2562:	21ff      	movs	r1, #255	; 0xff
    2564:	eb0d 0002 	add.w	r0, sp, r2
    2568:	f002 fbfc 	bl	4d64 <memset>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    256c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 25b4 <flash_sim_write+0x74>
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    2570:	eb08 0905 	add.w	r9, r8, r5
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    2574:	42a6      	cmp	r6, r4
    2576:	d309      	bcc.n	258c <flash_sim_write+0x4c>
    2578:	463a      	mov	r2, r7
    257a:	eb08 0305 	add.w	r3, r8, r5
    257e:	443c      	add	r4, r7
	for (uint32_t i = 0; i < len; i++) {
    2580:	42a2      	cmp	r2, r4
    2582:	d10c      	bne.n	259e <flash_sim_write+0x5e>
	return 0;
    2584:	2000      	movs	r0, #0
}
    2586:	b003      	add	sp, #12
    2588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(buf, MOCK_FLASH(offset + i), sizeof(buf))) {
    258c:	2204      	movs	r2, #4
    258e:	eb09 0106 	add.w	r1, r9, r6
    2592:	eb0d 0002 	add.w	r0, sp, r2
    2596:	f002 fbb3 	bl	4d00 <memcmp>
	for (uint32_t i = 0; i < len; i += FLASH_SIMULATOR_PROG_UNIT) {
    259a:	3604      	adds	r6, #4
    259c:	e7ea      	b.n	2574 <flash_sim_write+0x34>
		*(MOCK_FLASH(offset + i)) &= *((uint8_t *)data + i);
    259e:	7819      	ldrb	r1, [r3, #0]
    25a0:	f812 0b01 	ldrb.w	r0, [r2], #1
    25a4:	4001      	ands	r1, r0
    25a6:	f803 1b01 	strb.w	r1, [r3], #1
	for (uint32_t i = 0; i < len; i++) {
    25aa:	e7e9      	b.n	2580 <flash_sim_write+0x40>
		return -EINVAL;
    25ac:	f06f 0015 	mvn.w	r0, #21
    25b0:	e7e9      	b.n	2586 <flash_sim_write+0x46>
    25b2:	bf00      	nop
    25b4:	2000606e 	.word	0x2000606e

000025b8 <flash_sim_read>:
{
    25b8:	4610      	mov	r0, r2
    25ba:	b508      	push	{r3, lr}
    25bc:	461a      	mov	r2, r3
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    25be:	440b      	add	r3, r1
    25c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    25c4:	d807      	bhi.n	25d6 <flash_sim_read+0x1e>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    25c6:	2900      	cmp	r1, #0
    25c8:	db05      	blt.n	25d6 <flash_sim_read+0x1e>
	memcpy(data, MOCK_FLASH(offset), len);
    25ca:	4b04      	ldr	r3, [pc, #16]	; (25dc <flash_sim_read+0x24>)
    25cc:	4419      	add	r1, r3
    25ce:	f002 fbbe 	bl	4d4e <memcpy>
	return 0;
    25d2:	2000      	movs	r0, #0
}
    25d4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    25d6:	f06f 0015 	mvn.w	r0, #21
    25da:	e7fb      	b.n	25d4 <flash_sim_read+0x1c>
    25dc:	2000606e 	.word	0x2000606e

000025e0 <flash_sim_erase>:
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    25e0:	188b      	adds	r3, r1, r2
    25e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
{
    25e6:	b570      	push	{r4, r5, r6, lr}
	if ((offset + len > FLASH_SIMULATOR_FLASH_SIZE +
    25e8:	d81b      	bhi.n	2622 <flash_sim_erase+0x42>
			    FLASH_SIMULATOR_BASE_OFFSET) ||
    25ea:	2900      	cmp	r1, #0
    25ec:	db19      	blt.n	2622 <flash_sim_erase+0x42>
	    (len % FLASH_SIMULATOR_ERASE_UNIT)) {
    25ee:	ea42 0601 	orr.w	r6, r2, r1
    25f2:	f3c6 060b 	ubfx	r6, r6, #0, #12
	if ((offset % FLASH_SIMULATOR_ERASE_UNIT) ||
    25f6:	b9a6      	cbnz	r6, 2622 <flash_sim_erase+0x42>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    25f8:	4c0b      	ldr	r4, [pc, #44]	; (2628 <flash_sim_erase+0x48>)
    25fa:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    25fe:	f021 010f 	bic.w	r1, r1, #15
    2602:	0b15      	lsrs	r5, r2, #12
    2604:	440c      	add	r4, r1
    2606:	42ae      	cmp	r6, r5
    2608:	d101      	bne.n	260e <flash_sim_erase+0x2e>
    260a:	2000      	movs	r0, #0
}
    260c:	bd70      	pop	{r4, r5, r6, pc}
	memset(MOCK_FLASH(unit_addr), FLASH_SIMULATOR_ERASE_VALUE,
    260e:	4620      	mov	r0, r4
    2610:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2614:	21ff      	movs	r1, #255	; 0xff
    2616:	f002 fba5 	bl	4d64 <memset>
	for (uint32_t i = 0; i < len / FLASH_SIMULATOR_ERASE_UNIT; i++) {
    261a:	3601      	adds	r6, #1
    261c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    2620:	e7f1      	b.n	2606 <flash_sim_erase+0x26>
		return -EINVAL;
    2622:	f06f 0015 	mvn.w	r0, #21
    2626:	e7f1      	b.n	260c <flash_sim_erase+0x2c>
    2628:	2000606e 	.word	0x2000606e

0000262c <flash_init>:
}

#endif /* CONFIG_ARCH_POSIX */

static int flash_init(const struct device *dev)
{
    262c:	b508      	push	{r3, lr}
	memset(mock_flash, FLASH_SIMULATOR_ERASE_VALUE, ARRAY_SIZE(mock_flash));
    262e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    2632:	21ff      	movs	r1, #255	; 0xff
    2634:	4802      	ldr	r0, [pc, #8]	; (2640 <flash_init+0x14>)
    2636:	f002 fb95 	bl	4d64 <memset>
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_stats, STATS_SIZE_32, "flash_sim_stats");
	FLASH_SIM_STATS_INIT_AND_REG(flash_sim_thresholds, STATS_SIZE_32,
			   "flash_sim_thresholds");
	return flash_mock_init(dev);
}
    263a:	2000      	movs	r0, #0
    263c:	bd08      	pop	{r3, pc}
    263e:	bf00      	nop
    2640:	2000606e 	.word	0x2000606e

00002644 <z_impl_flash_simulator_get_memory>:
void *z_impl_flash_simulator_get_memory(const struct device *dev,
					size_t *mock_size)
{
	ARG_UNUSED(dev);

	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    2644:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	return mock_flash;
}
    2648:	4801      	ldr	r0, [pc, #4]	; (2650 <z_impl_flash_simulator_get_memory+0xc>)
	*mock_size = FLASH_SIMULATOR_FLASH_SIZE;
    264a:	600b      	str	r3, [r1, #0]
}
    264c:	4770      	bx	lr
    264e:	bf00      	nop
    2650:	2000606e 	.word	0x2000606e

00002654 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2654:	4b02      	ldr	r3, [pc, #8]	; (2660 <flash_nrf_pages_layout+0xc>)
    2656:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2658:	2301      	movs	r3, #1
    265a:	6013      	str	r3, [r2, #0]
}
    265c:	4770      	bx	lr
    265e:	bf00      	nop
    2660:	20004674 	.word	0x20004674

00002664 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2664:	4800      	ldr	r0, [pc, #0]	; (2668 <flash_nrf_get_parameters+0x4>)
    2666:	4770      	bx	lr
    2668:	000070ec 	.word	0x000070ec

0000266c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    266c:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    266e:	f004 fa2a 	bl	6ac6 <nrfx_nvmc_flash_page_count_get>
    2672:	4c03      	ldr	r4, [pc, #12]	; (2680 <nrf_flash_init+0x14>)
    2674:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2676:	f004 fa23 	bl	6ac0 <nrfx_nvmc_flash_page_size_get>
    267a:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    267c:	2000      	movs	r0, #0
    267e:	bd10      	pop	{r4, pc}
    2680:	20004674 	.word	0x20004674

00002684 <flash_nrf_write>:
{
    2684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2686:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2688:	4619      	mov	r1, r3
    268a:	4630      	mov	r0, r6
{
    268c:	4617      	mov	r7, r2
    268e:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
    2690:	f002 fc8d 	bl	4fae <is_regular_addr_valid>
    2694:	b1b8      	cbz	r0, 26c6 <flash_nrf_write+0x42>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2696:	ea46 0405 	orr.w	r4, r6, r5
    269a:	f014 0403 	ands.w	r4, r4, #3
    269e:	d112      	bne.n	26c6 <flash_nrf_write+0x42>
	if (!len) {
    26a0:	b14d      	cbz	r5, 26b6 <flash_nrf_write+0x32>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    26a2:	192b      	adds	r3, r5, r4
    26a4:	2b03      	cmp	r3, #3
    26a6:	eba6 0004 	sub.w	r0, r6, r4
    26aa:	d806      	bhi.n	26ba <flash_nrf_write+0x36>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    26ac:	4a07      	ldr	r2, [pc, #28]	; (26cc <flash_nrf_write+0x48>)
    26ae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    26b2:	07db      	lsls	r3, r3, #31
    26b4:	d5fb      	bpl.n	26ae <flash_nrf_write+0x2a>
	return ret;
    26b6:	2000      	movs	r0, #0
}
    26b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    26ba:	1b3b      	subs	r3, r7, r4
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    26bc:	6819      	ldr	r1, [r3, #0]
    26be:	f001 f98f 	bl	39e0 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    26c2:	3c04      	subs	r4, #4
}
    26c4:	e7ed      	b.n	26a2 <flash_nrf_write+0x1e>
		return -EINVAL;
    26c6:	f06f 0015 	mvn.w	r0, #21
    26ca:	e7f5      	b.n	26b8 <flash_nrf_write+0x34>
    26cc:	50039000 	.word	0x50039000

000026d0 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    26d0:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    26d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    26d8:	4e5b      	ldr	r6, [pc, #364]	; (2848 <CONFIG_MAIN_STACK_SIZE+0x48>)
    26da:	4f5c      	ldr	r7, [pc, #368]	; (284c <CONFIG_MAIN_STACK_SIZE+0x4c>)
    26dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    26e0:	4281      	cmp	r1, r0
    26e2:	d102      	bne.n	26ea <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    26e4:	2000      	movs	r0, #0
}
    26e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    26ea:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    26ec:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    26f0:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    26f4:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    26f6:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    26fa:	bf08      	it	eq
    26fc:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    2700:	2c22      	cmp	r4, #34	; 0x22
    2702:	f200 809d 	bhi.w	2840 <CONFIG_MAIN_STACK_SIZE+0x40>
    2706:	e8df f004 	tbb	[pc, r4]
    270a:	2312      	.short	0x2312
    270c:	3e2b4228 	.word	0x3e2b4228
    2710:	9b9b9b42 	.word	0x9b9b9b42
    2714:	9b72459b 	.word	0x9b72459b
    2718:	9b9b9b9b 	.word	0x9b9b9b9b
    271c:	9b9b9b9b 	.word	0x9b9b9b9b
    2720:	83807d75 	.word	0x83807d75
    2724:	869b9b9b 	.word	0x869b9b9b
    2728:	95928f8c 	.word	0x95928f8c
    272c:	98          	.byte	0x98
    272d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    272e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2732:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    2736:	f1b8 0f01 	cmp.w	r8, #1
    273a:	bf14      	ite	ne
    273c:	46b6      	movne	lr, r6
    273e:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    2740:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2744:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    2748:	f8ce 4008 	str.w	r4, [lr, #8]
    274c:	2401      	movs	r4, #1
    274e:	e002      	b.n	2756 <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    2750:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2754:	2400      	movs	r4, #0
    2756:	46a6      	mov	lr, r4
    2758:	e023      	b.n	27a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    275a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    275e:	e7e8      	b.n	2732 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2760:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2762:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    2766:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    276a:	f1b9 0f01 	cmp.w	r9, #1
    276e:	bf14      	ite	ne
    2770:	46b0      	movne	r8, r6
    2772:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    2774:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2778:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    277c:	f8c8 e00c 	str.w	lr, [r8, #12]
    2780:	f04f 0e01 	mov.w	lr, #1
    2784:	e00d      	b.n	27a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2786:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    278a:	2401      	movs	r4, #1
    278c:	e7eb      	b.n	2766 <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    278e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    2792:	e7df      	b.n	2754 <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2794:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2798:	2d00      	cmp	r5, #0
    279a:	d1db      	bne.n	2754 <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    279c:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    279e:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    27a0:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    27a2:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    27a6:	f003 091f 	and.w	r9, r3, #31
    27aa:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27ae:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    27b2:	ea4f 1353 	mov.w	r3, r3, lsr #5
    27b6:	bf1c      	itt	ne
    27b8:	2401      	movne	r4, #1
    27ba:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    27be:	2b01      	cmp	r3, #1
    27c0:	bf0c      	ite	eq
    27c2:	46b8      	moveq	r8, r7
    27c4:	46b0      	movne	r8, r6
    27c6:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    27ca:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    27ce:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    27d2:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    27d6:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    27d8:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    27dc:	ea43 030e 	orr.w	r3, r3, lr
    27e0:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    27e4:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    27e8:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    27ec:	e778      	b.n	26e0 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    27ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    27f2:	e7d1      	b.n	2798 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    27f4:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    27f8:	6804      	ldr	r4, [r0, #0]
    27fa:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    27fe:	2c00      	cmp	r4, #0
    2800:	d0c3      	beq.n	278a <pinctrl_configure_pins+0xba>
    2802:	e796      	b.n	2732 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2804:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2808:	e7f6      	b.n	27f8 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    280a:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    280e:	e7f3      	b.n	27f8 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2810:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    2814:	e7f0      	b.n	27f8 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2816:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    281a:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    281c:	f04f 0e00 	mov.w	lr, #0
    2820:	e7bf      	b.n	27a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2822:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    2826:	e784      	b.n	2732 <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2828:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    282c:	e7f5      	b.n	281a <CONFIG_MAIN_STACK_SIZE+0x1a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    282e:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    2832:	e7f2      	b.n	281a <CONFIG_MAIN_STACK_SIZE+0x1a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2834:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    2838:	e7ef      	b.n	281a <CONFIG_MAIN_STACK_SIZE+0x1a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    283a:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    283e:	e7ec      	b.n	281a <CONFIG_MAIN_STACK_SIZE+0x1a>
		switch (NRF_GET_FUN(pins[i])) {
    2840:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2844:	e74f      	b.n	26e6 <pinctrl_configure_pins+0x16>
    2846:	bf00      	nop
    2848:	50842500 	.word	0x50842500
    284c:	50842800 	.word	0x50842800

00002850 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2850:	2301      	movs	r3, #1
    2852:	4083      	lsls	r3, r0
{
    2854:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2856:	43dc      	mvns	r4, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2858:	4a0b      	ldr	r2, [pc, #44]	; (2888 <compare_int_lock+0x38>)
    285a:	e8d2 1fef 	ldaex	r1, [r2]
    285e:	ea01 0504 	and.w	r5, r1, r4
    2862:	e8c2 5fe6 	stlex	r6, r5, [r2]
    2866:	2e00      	cmp	r6, #0
    2868:	d1f7      	bne.n	285a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    286a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    286e:	4082      	lsls	r2, r0
    2870:	4806      	ldr	r0, [pc, #24]	; (288c <compare_int_lock+0x3c>)
    2872:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2876:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    287a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    287e:	420b      	tst	r3, r1
}
    2880:	bf14      	ite	ne
    2882:	2001      	movne	r0, #1
    2884:	2000      	moveq	r0, #0
    2886:	bd70      	pop	{r4, r5, r6, pc}
    2888:	20004680 	.word	0x20004680
    288c:	50015000 	.word	0x50015000

00002890 <compare_int_unlock>:
	return compare_int_lock(chan);
}

static void compare_int_unlock(int32_t chan, bool key)
{
	if (key) {
    2890:	b1d9      	cbz	r1, 28ca <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    2892:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2894:	4a0d      	ldr	r2, [pc, #52]	; (28cc <compare_int_unlock+0x3c>)
    2896:	4083      	lsls	r3, r0
    2898:	e8d2 cfef 	ldaex	ip, [r2]
    289c:	ea4c 0c03 	orr.w	ip, ip, r3
    28a0:	e8c2 cfe1 	stlex	r1, ip, [r2]
    28a4:	2900      	cmp	r1, #0
    28a6:	d1f7      	bne.n	2898 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    28a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    28ac:	4a08      	ldr	r2, [pc, #32]	; (28d0 <compare_int_unlock+0x40>)
    28ae:	4083      	lsls	r3, r0
    28b0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    28b4:	4b07      	ldr	r3, [pc, #28]	; (28d4 <compare_int_unlock+0x44>)
    28b6:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    28ba:	40c3      	lsrs	r3, r0
    28bc:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28be:	bf42      	ittt	mi
    28c0:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    28c4:	4b04      	ldrmi	r3, [pc, #16]	; (28d8 <compare_int_unlock+0x48>)
    28c6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
			NVIC_SetPendingIRQ(RTC_IRQn);
		}
	}
}
    28ca:	4770      	bx	lr
    28cc:	20004680 	.word	0x20004680
    28d0:	50015000 	.word	0x50015000
    28d4:	2000467c 	.word	0x2000467c
    28d8:	e000e100 	.word	0xe000e100

000028dc <z_nrf_rtc_timer_read>:
	compare_int_unlock(chan, key);
}

uint64_t z_nrf_rtc_timer_read(void)
{
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    28dc:	4b0d      	ldr	r3, [pc, #52]	; (2914 <z_nrf_rtc_timer_read+0x38>)
    28de:	6818      	ldr	r0, [r3, #0]
    28e0:	0a01      	lsrs	r1, r0, #8
    28e2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    28e4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    28e8:	4b0b      	ldr	r3, [pc, #44]	; (2918 <z_nrf_rtc_timer_read+0x3c>)
    28ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	__DMB();

	uint32_t cntr = counter();

	val += cntr;
    28ee:	1818      	adds	r0, r3, r0
    28f0:	f141 0100 	adc.w	r1, r1, #0

	if (cntr < OVERFLOW_RISK_RANGE_END) {
    28f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    28f8:	d20a      	bcs.n	2910 <z_nrf_rtc_timer_read+0x34>
		 * due to possibility that this code preempted overflow interrupt before final write
		 * of `overflow_cnt`. Update of `anchor` occurs far in time from this moment, so
		 * `anchor` is considered valid and stable. Because of this timing there is no risk
		 * of incorrect `anchor` value caused by non-atomic read of 64-bit `anchor`.
		 */
		if (val < anchor) {
    28fa:	4b08      	ldr	r3, [pc, #32]	; (291c <z_nrf_rtc_timer_read+0x40>)
    28fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    2900:	4290      	cmp	r0, r2
    2902:	eb71 0303 	sbcs.w	r3, r1, r3
    2906:	d203      	bcs.n	2910 <z_nrf_rtc_timer_read+0x34>
			/* Unhandled overflow, detected, let's add correction */
			val += COUNTER_SPAN;
    2908:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    290c:	f141 0100 	adc.w	r1, r1, #0
		 * check validity using `anchor`
		 */
	}

	return val;
}
    2910:	4770      	bx	lr
    2912:	bf00      	nop
    2914:	20004684 	.word	0x20004684
    2918:	50015000 	.word	0x50015000
    291c:	200020d8 	.word	0x200020d8

00002920 <compare_set>:
{
    2920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2924:	4616      	mov	r6, r2
    2926:	461f      	mov	r7, r3
    2928:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    292a:	f7ff ff91 	bl	2850 <compare_int_lock>
    292e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2930:	f7ff ffd4 	bl	28dc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2934:	42b0      	cmp	r0, r6
    2936:	eb71 0307 	sbcs.w	r3, r1, r7
    293a:	d250      	bcs.n	29de <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    293c:	4b38      	ldr	r3, [pc, #224]	; (2a20 <compare_set+0x100>)
    293e:	1a30      	subs	r0, r6, r0
    2940:	eb67 0101 	sbc.w	r1, r7, r1
    2944:	4298      	cmp	r0, r3
    2946:	f171 0100 	sbcs.w	r1, r1, #0
    294a:	d265      	bcs.n	2a18 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    294c:	4b35      	ldr	r3, [pc, #212]	; (2a24 <compare_set+0x104>)
    294e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2952:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2956:	429f      	cmp	r7, r3
    2958:	bf08      	it	eq
    295a:	4296      	cmpeq	r6, r2
    295c:	d049      	beq.n	29f2 <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    295e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENCLR = mask;
    2962:	4931      	ldr	r1, [pc, #196]	; (2a28 <compare_set+0x108>)
    2964:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    2968:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    296a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    296e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    2972:	f002 fba6 	bl	50c2 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2976:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    297a:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    297c:	f104 0550 	add.w	r5, r4, #80	; 0x50
    2980:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2982:	b2ad      	uxth	r5, r5
    2984:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    2988:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    298c:	4a27      	ldr	r2, [pc, #156]	; (2a2c <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    298e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    2992:	9301      	str	r3, [sp, #4]
    2994:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2998:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    299c:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    29a0:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    29a4:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29a8:	eba0 0008 	sub.w	r0, r0, r8
    29ac:	3803      	subs	r0, #3
    29ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    29b2:	4290      	cmp	r0, r2
    29b4:	d91d      	bls.n	29f2 <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29b6:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    29b8:	b160      	cbz	r0, 29d4 <compare_set+0xb4>
     return p_reg->COUNTER;
    29ba:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29be:	eba8 000b 	sub.w	r0, r8, fp
    29c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    29c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    29ca:	d912      	bls.n	29f2 <compare_set+0xd2>
					event_clear(chan);
    29cc:	4620      	mov	r0, r4
    29ce:	f002 fb78 	bl	50c2 <event_clear>
    29d2:	4a16      	ldr	r2, [pc, #88]	; (2a2c <compare_set+0x10c>)
			cc_val = now + cc_inc;
    29d4:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    29d8:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    29dc:	e7da      	b.n	2994 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    29de:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29e0:	4a13      	ldr	r2, [pc, #76]	; (2a30 <compare_set+0x110>)
    29e2:	40a3      	lsls	r3, r4
    29e4:	e8d2 0fef 	ldaex	r0, [r2]
    29e8:	4318      	orrs	r0, r3
    29ea:	e8c2 0fe1 	stlex	r1, r0, [r2]
    29ee:	2900      	cmp	r1, #0
    29f0:	d1f8      	bne.n	29e4 <compare_set+0xc4>
	return ret;
    29f2:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    29f4:	490b      	ldr	r1, [pc, #44]	; (2a24 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    29f6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    29f8:	0123      	lsls	r3, r4, #4
    29fa:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    29fe:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    2a00:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    2a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a06:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    2a08:	4620      	mov	r0, r4
    2a0a:	9900      	ldr	r1, [sp, #0]
    2a0c:	f7ff ff40 	bl	2890 <compare_int_unlock>
}
    2a10:	4628      	mov	r0, r5
    2a12:	b003      	add	sp, #12
    2a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    2a18:	f06f 0515 	mvn.w	r5, #21
    2a1c:	e7f4      	b.n	2a08 <compare_set+0xe8>
    2a1e:	bf00      	nop
    2a20:	00800001 	.word	0x00800001
    2a24:	200020c0 	.word	0x200020c0
    2a28:	50015000 	.word	0x50015000
    2a2c:	007ffffd 	.word	0x007ffffd
    2a30:	2000467c 	.word	0x2000467c

00002a34 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    2a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    2a36:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a38:	f04f 30ff 	mov.w	r0, #4294967295
    2a3c:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->INTENCLR = mask;
    2a40:	4c19      	ldr	r4, [pc, #100]	; (2aa8 <sys_clock_driver_init+0x74>)
    2a42:	4b1a      	ldr	r3, [pc, #104]	; (2aac <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
    2a44:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    2a46:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2a4a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2a4e:	4b18      	ldr	r3, [pc, #96]	; (2ab0 <sys_clock_driver_init+0x7c>)
    p_reg->PRESCALER = val;
    2a50:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    2a54:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2a58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2a60:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2a64:	4b13      	ldr	r3, [pc, #76]	; (2ab4 <sys_clock_driver_init+0x80>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2a66:	2101      	movs	r1, #1
    2a68:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2a6c:	2015      	movs	r0, #21
    2a6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2a72:	462a      	mov	r2, r5
    2a74:	f7fe fdf0 	bl	1658 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2a78:	2015      	movs	r0, #21
    2a7a:	f7fe fdbd 	bl	15f8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2a7e:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2a80:	4a0d      	ldr	r2, [pc, #52]	; (2ab8 <sys_clock_driver_init+0x84>)
    2a82:	60a3      	str	r3, [r4, #8]
    2a84:	6023      	str	r3, [r4, #0]
    2a86:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2a88:	4b0c      	ldr	r3, [pc, #48]	; (2abc <sys_clock_driver_init+0x88>)
    2a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2a8e:	9300      	str	r3, [sp, #0]
    2a90:	4628      	mov	r0, r5
    2a92:	2300      	movs	r3, #0
    2a94:	9501      	str	r5, [sp, #4]
    2a96:	f7ff ff43 	bl	2920 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2a9a:	4630      	mov	r0, r6
    2a9c:	f7ff fa08 	bl	1eb0 <z_nrf_clock_control_lf_on>

	return 0;
}
    2aa0:	4628      	mov	r0, r5
    2aa2:	b002      	add	sp, #8
    2aa4:	bd70      	pop	{r4, r5, r6, pc}
    2aa6:	bf00      	nop
    2aa8:	50015000 	.word	0x50015000
    2aac:	000f0003 	.word	0x000f0003
    2ab0:	200020c0 	.word	0x200020c0
    2ab4:	e000e100 	.word	0xe000e100
    2ab8:	20004680 	.word	0x20004680
    2abc:	00002ac1 	.word	0x00002ac1

00002ac0 <sys_clock_timeout_handler>:
{
    2ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2ac2:	4917      	ldr	r1, [pc, #92]	; (2b20 <sys_clock_timeout_handler+0x60>)
	return absolute_time & COUNTER_MAX;
    2ac4:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2ac8:	e9d1 6300 	ldrd	r6, r3, [r1]
    2acc:	1b92      	subs	r2, r2, r6
    2ace:	0a14      	lsrs	r4, r2, #8
	last_count += dticks * CYC_PER_TICK;
    2ad0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    2ad4:	1992      	adds	r2, r2, r6
    2ad6:	f143 0300 	adc.w	r3, r3, #0
    2ada:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2ade:	f5a5 1100 	sub.w	r1, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2ae2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
    2ae6:	d20a      	bcs.n	2afe <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2ae8:	490e      	ldr	r1, [pc, #56]	; (2b24 <sys_clock_timeout_handler+0x64>)
    2aea:	6809      	ldr	r1, [r1, #0]
    2aec:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    2af0:	0609      	lsls	r1, r1, #24
    2af2:	194e      	adds	r6, r1, r5
    2af4:	490c      	ldr	r1, [pc, #48]	; (2b28 <sys_clock_timeout_handler+0x68>)
    2af6:	f14c 0700 	adc.w	r7, ip, #0
    2afa:	e9c1 6700 	strd	r6, r7, [r1]
		compare_set(chan, last_count + CYC_PER_TICK,
    2afe:	2100      	movs	r1, #0
    2b00:	9101      	str	r1, [sp, #4]
    2b02:	490a      	ldr	r1, [pc, #40]	; (2b2c <sys_clock_timeout_handler+0x6c>)
    2b04:	f512 7280 	adds.w	r2, r2, #256	; 0x100
    2b08:	9100      	str	r1, [sp, #0]
    2b0a:	f143 0300 	adc.w	r3, r3, #0
    2b0e:	f7ff ff07 	bl	2920 <compare_set>
	sys_clock_announce(dticks);
    2b12:	4620      	mov	r0, r4
}
    2b14:	b003      	add	sp, #12
    2b16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	sys_clock_announce(dticks);
    2b1a:	f001 bba7 	b.w	426c <sys_clock_announce>
    2b1e:	bf00      	nop
    2b20:	200020d0 	.word	0x200020d0
    2b24:	20004684 	.word	0x20004684
    2b28:	200020d8 	.word	0x200020d8
    2b2c:	00002ac1 	.word	0x00002ac1

00002b30 <rtc_nrf_isr>:
{
    2b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2b34:	4b2e      	ldr	r3, [pc, #184]	; (2bf0 <rtc_nrf_isr+0xc0>)
    2b36:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2b3a:	0790      	lsls	r0, r2, #30
    2b3c:	d50b      	bpl.n	2b56 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b3e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2b42:	b142      	cbz	r2, 2b56 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b44:	2200      	movs	r2, #0
    2b46:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    2b4a:	4a2a      	ldr	r2, [pc, #168]	; (2bf4 <rtc_nrf_isr+0xc4>)
    2b4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2b50:	6813      	ldr	r3, [r2, #0]
    2b52:	3301      	adds	r3, #1
    2b54:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2b56:	4a26      	ldr	r2, [pc, #152]	; (2bf0 <rtc_nrf_isr+0xc0>)
    2b58:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2b5c:	03d9      	lsls	r1, r3, #15
    2b5e:	d527      	bpl.n	2bb0 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b60:	4b25      	ldr	r3, [pc, #148]	; (2bf8 <rtc_nrf_isr+0xc8>)
    2b62:	e8d3 1fef 	ldaex	r1, [r3]
    2b66:	f021 0001 	bic.w	r0, r1, #1
    2b6a:	e8c3 0fe4 	stlex	r4, r0, [r3]
    2b6e:	2c00      	cmp	r4, #0
    2b70:	d1f7      	bne.n	2b62 <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2b72:	07cb      	lsls	r3, r1, #31
    2b74:	d402      	bmi.n	2b7c <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b76:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    2b7a:	b1cb      	cbz	r3, 2bb0 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b7c:	2500      	movs	r5, #0
    2b7e:	4c1c      	ldr	r4, [pc, #112]	; (2bf0 <rtc_nrf_isr+0xc0>)
    2b80:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2b84:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2b88:	f7ff fea8 	bl	28dc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2b8c:	f04f 0320 	mov.w	r3, #32
    2b90:	f3ef 8211 	mrs	r2, BASEPRI
    2b94:	f383 8812 	msr	BASEPRI_MAX, r3
    2b98:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2b9c:	4b17      	ldr	r3, [pc, #92]	; (2bfc <rtc_nrf_isr+0xcc>)
    2b9e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2ba2:	42b0      	cmp	r0, r6
    2ba4:	41b9      	sbcs	r1, r7
    2ba6:	d206      	bcs.n	2bb6 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    2ba8:	f382 8811 	msr	BASEPRI, r2
    2bac:	f3bf 8f6f 	isb	sy
}
    2bb0:	b003      	add	sp, #12
    2bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2bb6:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    2bba:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2bbe:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    2bc2:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2bc4:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    2bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2bcc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2bd0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2bd4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2bd8:	f382 8811 	msr	BASEPRI, r2
    2bdc:	f3bf 8f6f 	isb	sy
		if (handler) {
    2be0:	2900      	cmp	r1, #0
    2be2:	d0e5      	beq.n	2bb0 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    2be4:	9000      	str	r0, [sp, #0]
    2be6:	4632      	mov	r2, r6
    2be8:	463b      	mov	r3, r7
    2bea:	4628      	mov	r0, r5
    2bec:	4788      	blx	r1
    2bee:	e7df      	b.n	2bb0 <rtc_nrf_isr+0x80>
    2bf0:	50015000 	.word	0x50015000
    2bf4:	20004684 	.word	0x20004684
    2bf8:	2000467c 	.word	0x2000467c
    2bfc:	200020c0 	.word	0x200020c0

00002c00 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2c00:	2301      	movs	r3, #1
{
    2c02:	b510      	push	{r4, lr}
    2c04:	4c07      	ldr	r4, [pc, #28]	; (2c24 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    2c06:	2015      	movs	r0, #21
    2c08:	6063      	str	r3, [r4, #4]
    2c0a:	f7fe fd03 	bl	1614 <arch_irq_disable>
    2c0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    2c12:	4b05      	ldr	r3, [pc, #20]	; (2c28 <sys_clock_disable+0x28>)
    2c14:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2c18:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2c1c:	4b03      	ldr	r3, [pc, #12]	; (2c2c <sys_clock_disable+0x2c>)
    2c1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2c22:	bd10      	pop	{r4, pc}
    2c24:	50015000 	.word	0x50015000
    2c28:	000f0003 	.word	0x000f0003
    2c2c:	e000e100 	.word	0xe000e100

00002c30 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    2c30:	ea40 0301 	orr.w	r3, r0, r1
    2c34:	f3c3 030d 	ubfx	r3, r3, #0, #14
{
    2c38:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    2c3a:	b98b      	cbnz	r3, 2c60 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    2c3c:	f240 1515 	movw	r5, #277	; 0x115
    2c40:	4c09      	ldr	r4, [pc, #36]	; (2c68 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    2c42:	0b89      	lsrs	r1, r1, #14
		nrf_spu_flashregion_set(NRF_SPU_S,
    2c44:	f3c0 3087 	ubfx	r0, r0, #14, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    2c48:	4299      	cmp	r1, r3
    2c4a:	d101      	bne.n	2c50 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    2c4c:	2000      	movs	r0, #0
}
    2c4e:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    2c50:	18c2      	adds	r2, r0, r3
    2c52:	b2d2      	uxtb	r2, r2
    2c54:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    2c58:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    2c5c:	3301      	adds	r3, #1
    2c5e:	e7f3      	b.n	2c48 <fprotect_area+0x18>
		return -EINVAL;
    2c60:	f06f 0015 	mvn.w	r0, #21
    2c64:	e7f3      	b.n	2c4e <fprotect_area+0x1e>
    2c66:	bf00      	nop
    2c68:	50003000 	.word	0x50003000

00002c6c <pcd_fw_copy_status_get>:
	cmd->magic = PCD_CMD_MAGIC_FAIL;
}

enum pcd_status pcd_fw_copy_status_get(void)
{
	if (cmd->magic == PCD_CMD_MAGIC_COPY) {
    2c6c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    2c70:	6818      	ldr	r0, [r3, #0]
    2c72:	4b05      	ldr	r3, [pc, #20]	; (2c88 <pcd_fw_copy_status_get+0x1c>)
    2c74:	4298      	cmp	r0, r3
    2c76:	d005      	beq.n	2c84 <pcd_fw_copy_status_get+0x18>
		return PCD_STATUS_COPY;
	} else if (cmd->magic == PCD_CMD_MAGIC_DONE) {
		return PCD_STATUS_COPY_DONE;
	}

	return PCD_STATUS_COPY_FAILED;
    2c78:	4b04      	ldr	r3, [pc, #16]	; (2c8c <pcd_fw_copy_status_get+0x20>)
    2c7a:	4298      	cmp	r0, r3
    2c7c:	bf0c      	ite	eq
    2c7e:	2001      	moveq	r0, #1
    2c80:	2002      	movne	r0, #2
    2c82:	4770      	bx	lr
		return PCD_STATUS_COPY;
    2c84:	2000      	movs	r0, #0
}
    2c86:	4770      	bx	lr
    2c88:	b5b4b3b6 	.word	0xb5b4b3b6
    2c8c:	f103ce5d 	.word	0xf103ce5d

00002c90 <network_core_finished_check_handler>:
	 */
	nrf_spu_extdomain_set(NRF_SPU, 0, false, false);
}

static void network_core_finished_check_handler(struct k_timer *timer)
{
    2c90:	b508      	push	{r3, lr}
	if (pcd_fw_copy_status_get() != PCD_STATUS_COPY) {
    2c92:	f7ff ffeb 	bl	2c6c <pcd_fw_copy_status_get>
    2c96:	b130      	cbz	r0, 2ca6 <network_core_finished_check_handler+0x16>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_TIMER_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_stop(timer);
    2c98:	4803      	ldr	r0, [pc, #12]	; (2ca8 <network_core_finished_check_handler+0x18>)
    2c9a:	f003 ff70 	bl	6b7e <z_impl_k_timer_stop>
                                             bool           secure_attr,
                                             bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->EXTDOMAIN[domain_id].PERM & SPU_EXTDOMAIN_PERM_LOCK_Msk));

    p_reg->EXTDOMAIN[domain_id].PERM =
    2c9e:	2200      	movs	r2, #0
    2ca0:	4b02      	ldr	r3, [pc, #8]	; (2cac <network_core_finished_check_handler+0x1c>)
    2ca2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
		 * successfully, tidy up and cancel timer
		 */
		k_timer_stop(&network_core_finished_check_timer);
		network_core_pcd_tidy();
	}
}
    2ca6:	bd08      	pop	{r3, pc}
    2ca8:	20002090 	.word	0x20002090
    2cac:	50003000 	.word	0x50003000

00002cb0 <pcd_network_core_update_initiate>:
    2cb0:	2210      	movs	r2, #16
    2cb2:	4b12      	ldr	r3, [pc, #72]	; (2cfc <pcd_network_core_update_initiate+0x4c>)

	return network_core_pcd_cmdset(src_addr, len, wait);
}

int pcd_network_core_update_initiate(const void *src_addr, size_t len)
{
    2cb4:	b510      	push	{r4, lr}
    2cb6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#if NRF_RESET_HAS_APPLICATION
NRF_STATIC_INLINE void nrf_reset_network_force_off(NRF_RESET_Type * p_reg, bool hold)
{
    if (hold)
    {
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    2cba:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2cbe:	2301      	movs	r3, #1
    2cc0:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    2cc4:	b1b0      	cbz	r0, 2cf4 <pcd_network_core_update_initiate+0x44>
    2cc6:	b1a9      	cbz	r1, 2cf4 <pcd_network_core_update_initiate+0x44>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    2cc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    2ccc:	4c0c      	ldr	r4, [pc, #48]	; (2d00 <pcd_network_core_update_initiate+0x50>)
	cmd->len = len;
    2cce:	6099      	str	r1, [r3, #8]
	cmd->data = data;
    2cd0:	e9c3 4000 	strd	r4, r0, [r3]
	cmd->offset = offset;
    2cd4:	f44f 4108 	mov.w	r1, #34816	; 0x8800
                                  RESET_NETWORK_FORCEOFF_FORCEOFF_Pos;
        *(volatile uint32_t *)0x50005618UL = 0UL;
    }
    else
    {
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release <<
    2cd8:	2400      	movs	r4, #0
    2cda:	60d9      	str	r1, [r3, #12]
    2cdc:	f8c2 4614 	str.w	r4, [r2, #1556]	; 0x614
	z_impl_k_timer_start(timer, duration, period);
    2ce0:	2280      	movs	r2, #128	; 0x80
    2ce2:	4808      	ldr	r0, [pc, #32]	; (2d04 <pcd_network_core_update_initiate+0x54>)
    2ce4:	4611      	mov	r1, r2
    2ce6:	f001 fb4f 	bl	4388 <z_impl_k_timer_start>
	z_impl_k_busy_wait(usec_to_wait);
    2cea:	4807      	ldr	r0, [pc, #28]	; (2d08 <pcd_network_core_update_initiate+0x58>)
    2cec:	f003 ff43 	bl	6b76 <z_impl_k_busy_wait>
    2cf0:	4620      	mov	r0, r4
			      NETWORK_CORE_UPDATE_CHECK_TIME);
		k_busy_wait(1 * USEC_PER_SEC);
	}

	return rc;
}
    2cf2:	bd10      	pop	{r4, pc}
    2cf4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2cf8:	e7fb      	b.n	2cf2 <pcd_network_core_update_initiate+0x42>
    2cfa:	bf00      	nop
    2cfc:	50003000 	.word	0x50003000
    2d00:	b5b4b3b6 	.word	0xb5b4b3b6
    2d04:	20002090 	.word	0x20002090
    2d08:	000f4240 	.word	0x000f4240

00002d0c <pcd_network_core_update>:
    2d0c:	2210      	movs	r2, #16
    2d0e:	4b17      	ldr	r3, [pc, #92]	; (2d6c <pcd_network_core_update+0x60>)

int pcd_network_core_update(const void *src_addr, size_t len)
{
    2d10:	b510      	push	{r4, lr}
    2d12:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    2d16:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    2d1a:	2301      	movs	r3, #1
    2d1c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
	if (data == NULL || len == 0) {
    2d20:	b308      	cbz	r0, 2d66 <pcd_network_core_update+0x5a>
    2d22:	b301      	cbz	r1, 2d66 <pcd_network_core_update+0x5a>
	cmd->magic = PCD_CMD_MAGIC_COPY;
    2d24:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	cmd->len = len;
    2d28:	6099      	str	r1, [r3, #8]
	cmd->offset = offset;
    2d2a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
	cmd->magic = PCD_CMD_MAGIC_COPY;
    2d2e:	4c10      	ldr	r4, [pc, #64]	; (2d70 <pcd_network_core_update+0x64>)
	cmd->offset = offset;
    2d30:	60d9      	str	r1, [r3, #12]
	cmd->data = data;
    2d32:	e9c3 4000 	strd	r4, r0, [r3]
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release <<
    2d36:	2300      	movs	r3, #0
    2d38:	4c0e      	ldr	r4, [pc, #56]	; (2d74 <pcd_network_core_update+0x68>)
    2d3a:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
    2d3e:	4620      	mov	r0, r4
    2d40:	f003 ff19 	bl	6b76 <z_impl_k_busy_wait>
		err = pcd_fw_copy_status_get();
    2d44:	f7ff ff92 	bl	2c6c <pcd_fw_copy_status_get>
	} while (err == PCD_STATUS_COPY);
    2d48:	2800      	cmp	r0, #0
    2d4a:	d0f8      	beq.n	2d3e <pcd_network_core_update+0x32>
	if (err == PCD_STATUS_COPY_FAILED) {
    2d4c:	2802      	cmp	r0, #2
    2d4e:	d009      	beq.n	2d64 <pcd_network_core_update+0x58>
        p_reg->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Hold <<
    2d50:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d54:	2201      	movs	r2, #1
    2d56:	2000      	movs	r0, #0
    2d58:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
    2d5c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    2d60:	f8c3 0440 	str.w	r0, [r3, #1088]	; 0x440
	return network_core_update(src_addr, len, true);
}
    2d64:	bd10      	pop	{r4, pc}
		return -EINVAL;
    2d66:	f06f 0015 	mvn.w	r0, #21
	return network_core_update(src_addr, len, true);
    2d6a:	e7fb      	b.n	2d64 <pcd_network_core_update+0x58>
    2d6c:	50003000 	.word	0x50003000
    2d70:	b5b4b3b6 	.word	0xb5b4b3b6
    2d74:	000f4240 	.word	0x000f4240

00002d78 <pcd_lock_ram>:
    p_reg->RAMREGION[region_id].PERM = permissions         |
    2d78:	f44f 7282 	mov.w	r2, #260	; 0x104
    2d7c:	4b01      	ldr	r3, [pc, #4]	; (2d84 <pcd_lock_ram+0xc>)
    2d7e:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
{
	uint32_t region = PCD_CMD_ADDRESS/CONFIG_NRF_SPU_RAM_REGION_SIZE;

	nrf_spu_ramregion_set(NRF_SPU, region, false, NRF_SPU_MEM_PERM_READ,
			true);
}
    2d82:	4770      	bx	lr
    2d84:	50003000 	.word	0x50003000

00002d88 <boot_read_image_header_hook>:
#include <dfu/pcd.h>

int boot_read_image_header_hook(int img_index, int slot,
		struct image_header *img_head)
{
	if (img_index == 1 && slot == 0) {
    2d88:	2801      	cmp	r0, #1
    2d8a:	d10f      	bne.n	2dac <boot_read_image_header_hook+0x24>
    2d8c:	b979      	cbnz	r1, 2dae <boot_read_image_header_hook+0x26>
		img_head->ih_magic = IMAGE_MAGIC;
    2d8e:	4b08      	ldr	r3, [pc, #32]	; (2db0 <boot_read_image_header_hook+0x28>)
		img_head->ih_ver.iv_major = 0;
		img_head->ih_ver.iv_minor = 0;
		img_head->ih_ver.iv_revision = 0;
		img_head->ih_ver.iv_build_num = 0;
		img_head->_pad1 = 0;
		return 0;
    2d90:	4608      	mov	r0, r1
		img_head->ih_magic = IMAGE_MAGIC;
    2d92:	6013      	str	r3, [r2, #0]
		img_head->ih_hdr_size = PM_MCUBOOT_PAD_SIZE;
    2d94:	f44f 7300 	mov.w	r3, #512	; 0x200
    2d98:	8113      	strh	r3, [r2, #8]
		img_head->ih_img_size = PM_CPUNET_APP_SIZE;
    2d9a:	f44f 335e 	mov.w	r3, #227328	; 0x37800
		img_head->ih_ver.iv_build_num = 0;
    2d9e:	e9c2 1105 	strd	r1, r1, [r2, #20]
		img_head->ih_flags = 0;
    2da2:	e9c2 3103 	strd	r3, r1, [r2, #12]
		img_head->ih_load_addr = PM_MCUBOOT_PRIMARY_1_ADDRESS;
    2da6:	6051      	str	r1, [r2, #4]
		img_head->_pad1 = 0;
    2da8:	61d1      	str	r1, [r2, #28]
		return 0;
    2daa:	4770      	bx	lr
	}

	return BOOT_HOOK_REGULAR;
    2dac:	2001      	movs	r0, #1
}
    2dae:	4770      	bx	lr
    2db0:	96f3b83d 	.word	0x96f3b83d

00002db4 <boot_image_check_hook>:

fih_int boot_image_check_hook(int img_index, int slot)
{
	if (img_index == 1 && slot == 0) {
    2db4:	2801      	cmp	r0, #1
    2db6:	d103      	bne.n	2dc0 <boot_image_check_hook+0xc>
    2db8:	b919      	cbnz	r1, 2dc2 <boot_image_check_hook+0xe>
		FIH_RET(FIH_SUCCESS);
    2dba:	4b02      	ldr	r3, [pc, #8]	; (2dc4 <boot_image_check_hook+0x10>)
    2dbc:	6818      	ldr	r0, [r3, #0]
    2dbe:	4770      	bx	lr
	}

	FIH_RET(fih_int_encode(BOOT_HOOK_REGULAR));
    2dc0:	2001      	movs	r0, #1
}
    2dc2:	4770      	bx	lr
    2dc4:	200020e8 	.word	0x200020e8

00002dc8 <network_core_update>:

	return BOOT_HOOK_REGULAR;
}

int network_core_update(bool wait)
{
    2dc8:	b513      	push	{r0, r1, r4, lr}
    2dca:	4604      	mov	r4, r0
    2dcc:	4810      	ldr	r0, [pc, #64]	; (2e10 <network_core_update+0x48>)
    2dce:	f003 fe8b 	bl	6ae8 <z_device_is_ready>
	static const struct device *mock_flash_dev;
	void *mock_flash;
	size_t mock_size;

	mock_flash_dev = DEVICE_DT_GET(DT_NODELABEL(PM_MCUBOOT_PRIMARY_1_DEV));
	if (!device_is_ready(mock_flash_dev)) {
    2dd2:	b1b0      	cbz	r0, 2e02 <network_core_update+0x3a>
		union { uintptr_t x; size_t * val; } parm1 = { .val = mock_size };
		return (void *) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_FLASH_SIMULATOR_GET_MEMORY);
	}
#endif
	compiler_barrier();
	return z_impl_flash_simulator_get_memory(dev, mock_size);
    2dd4:	2000      	movs	r0, #0
    2dd6:	a901      	add	r1, sp, #4
    2dd8:	f7ff fc34 	bl	2644 <z_impl_flash_simulator_get_memory>
		return -ENODEV;
	}

	mock_flash = flash_simulator_get_memory(NULL, &mock_size);
	hdr = (struct image_header *) mock_flash;
	if (hdr->ih_magic == IMAGE_MAGIC) {
    2ddc:	4b0d      	ldr	r3, [pc, #52]	; (2e14 <network_core_update+0x4c>)
    2dde:	6802      	ldr	r2, [r0, #0]
    2de0:	429a      	cmp	r2, r3
    2de2:	d111      	bne.n	2e08 <network_core_update+0x40>
		uint32_t fw_size = hdr->ih_img_size;
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    2de4:	8903      	ldrh	r3, [r0, #8]
		uint32_t fw_size = hdr->ih_img_size;
    2de6:	68c1      	ldr	r1, [r0, #12]
		uint32_t vtable_addr = (uint32_t)hdr + hdr->ih_hdr_size;
    2de8:	4418      	add	r0, r3
		uint32_t *vtable = (uint32_t *)(vtable_addr);
		uint32_t reset_addr = vtable[1];

		if (reset_addr > PM_CPUNET_B0N_ADDRESS) {
    2dea:	6843      	ldr	r3, [r0, #4]
    2dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2df0:	d90a      	bls.n	2e08 <network_core_update+0x40>
			if (wait) {
    2df2:	b11c      	cbz	r4, 2dfc <network_core_update+0x34>
				return pcd_network_core_update(vtable, fw_size);
    2df4:	f7ff ff8a 	bl	2d0c <pcd_network_core_update>
		}
	}

	/* No IMAGE_MAGIC no valid image */
	return -ENODATA;
}
    2df8:	b002      	add	sp, #8
    2dfa:	bd10      	pop	{r4, pc}
				return pcd_network_core_update_initiate(vtable, fw_size);
    2dfc:	f7ff ff58 	bl	2cb0 <pcd_network_core_update_initiate>
    2e00:	e7fa      	b.n	2df8 <network_core_update+0x30>
		return -ENODEV;
    2e02:	f06f 0012 	mvn.w	r0, #18
    2e06:	e7f7      	b.n	2df8 <network_core_update+0x30>
	return -ENODATA;
    2e08:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    2e0c:	e7f4      	b.n	2df8 <network_core_update+0x30>
    2e0e:	bf00      	nop
    2e10:	00006c04 	.word	0x00006c04
    2e14:	96f3b83d 	.word	0x96f3b83d

00002e18 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    2e18:	b530      	push	{r4, r5, lr}
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    2e1a:	6881      	ldr	r1, [r0, #8]
    2e1c:	b085      	sub	sp, #20
    2e1e:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    2e20:	f021 0407 	bic.w	r4, r1, #7
{
    2e24:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    2e26:	f001 ff09 	bl	4c3c <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    2e2a:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    2e2c:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    2e2e:	4668      	mov	r0, sp
    2e30:	f001 ff98 	bl	4d64 <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    2e34:	2210      	movs	r2, #16
    2e36:	4668      	mov	r0, sp
    2e38:	4906      	ldr	r1, [pc, #24]	; (2e54 <boot_write_magic+0x3c>)
    2e3a:	f001 ff88 	bl	4d4e <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    2e3e:	2310      	movs	r3, #16
    2e40:	466a      	mov	r2, sp
    2e42:	4621      	mov	r1, r4
    2e44:	4628      	mov	r0, r5
    2e46:	f001 fec9 	bl	4bdc <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    2e4a:	3800      	subs	r0, #0
    2e4c:	bf18      	it	ne
    2e4e:	2001      	movne	r0, #1
    2e50:	b005      	add	sp, #20
    2e52:	bd30      	pop	{r4, r5, pc}
    2e54:	000072ae 	.word	0x000072ae

00002e58 <boot_read_swap_state>:
{
    2e58:	b530      	push	{r4, r5, lr}
    2e5a:	460d      	mov	r5, r1
    2e5c:	6881      	ldr	r1, [r0, #8]
    2e5e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    2e60:	2310      	movs	r3, #16
    2e62:	aa02      	add	r2, sp, #8
    2e64:	3910      	subs	r1, #16
{
    2e66:	4604      	mov	r4, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    2e68:	f001 fea3 	bl	4bb2 <flash_area_read>
    if (rc < 0) {
    2e6c:	2800      	cmp	r0, #0
    2e6e:	da02      	bge.n	2e76 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    2e70:	2001      	movs	r0, #1
}
    2e72:	b007      	add	sp, #28
    2e74:	bd30      	pop	{r4, r5, pc}
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    2e76:	2210      	movs	r2, #16
    2e78:	4620      	mov	r0, r4
    2e7a:	a902      	add	r1, sp, #8
    2e7c:	f002 f967 	bl	514e <bootutil_buffer_is_erased>
    2e80:	2800      	cmp	r0, #0
    2e82:	d13a      	bne.n	2efa <boot_read_swap_state+0xa2>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    2e84:	2210      	movs	r2, #16
    2e86:	491e      	ldr	r1, [pc, #120]	; (2f00 <boot_read_swap_state+0xa8>)
    2e88:	a802      	add	r0, sp, #8
    2e8a:	f001 ff39 	bl	4d00 <memcmp>
    return BOOT_MAGIC_BAD;
    2e8e:	2800      	cmp	r0, #0
        state->magic = boot_magic_decode(magic);
    2e90:	bf0c      	ite	eq
    2e92:	2301      	moveq	r3, #1
    2e94:	2302      	movne	r3, #2
        state->magic = BOOT_MAGIC_UNSET;
    2e96:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    2e98:	4620      	mov	r0, r4
    2e9a:	f002 f944 	bl	5126 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    2e9e:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    2ea0:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    2ea2:	f10d 0207 	add.w	r2, sp, #7
    2ea6:	4620      	mov	r0, r4
    2ea8:	f001 fe83 	bl	4bb2 <flash_area_read>
    if (rc < 0) {
    2eac:	2800      	cmp	r0, #0
    2eae:	dbdf      	blt.n	2e70 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2eb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2eb4:	4620      	mov	r0, r4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2eb6:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2eba:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2ebc:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2ebe:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2ec0:	2201      	movs	r2, #1
    2ec2:	f10d 0107 	add.w	r1, sp, #7
    2ec6:	f002 f942 	bl	514e <bootutil_buffer_is_erased>
    2eca:	b910      	cbnz	r0, 2ed2 <boot_read_swap_state+0x7a>
    2ecc:	786b      	ldrb	r3, [r5, #1]
    2ece:	2b04      	cmp	r3, #4
    2ed0:	d903      	bls.n	2eda <boot_read_swap_state+0x82>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2ed2:	2301      	movs	r3, #1
    2ed4:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    2ed6:	2300      	movs	r3, #0
    2ed8:	712b      	strb	r3, [r5, #4]
}

static inline uint32_t
boot_image_ok_off(const struct flash_area *fap)
{
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    2eda:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    2edc:	4620      	mov	r0, r4
    2ede:	3a18      	subs	r2, #24
    2ee0:	f022 0207 	bic.w	r2, r2, #7
    2ee4:	3a08      	subs	r2, #8
    2ee6:	1ca9      	adds	r1, r5, #2
    2ee8:	f002 f944 	bl	5174 <boot_read_flag>
    if (rc) {
    2eec:	2800      	cmp	r0, #0
    2eee:	d1bf      	bne.n	2e70 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    2ef0:	4620      	mov	r0, r4
    2ef2:	1ce9      	adds	r1, r5, #3
    2ef4:	f002 f95a 	bl	51ac <boot_read_image_ok>
    2ef8:	e7bb      	b.n	2e72 <boot_read_swap_state+0x1a>
    2efa:	2303      	movs	r3, #3
    2efc:	e7cb      	b.n	2e96 <boot_read_swap_state+0x3e>
    2efe:	bf00      	nop
    2f00:	000072ae 	.word	0x000072ae

00002f04 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    2f04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    2f06:	4669      	mov	r1, sp
{
    2f08:	4604      	mov	r4, r0
    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
    2f0a:	f002 f8ef 	bl	50ec <boot_read_swap_state_primary_slot_hook>
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    2f0e:	2801      	cmp	r0, #1
    2f10:	d14a      	bne.n	2fa8 <boot_swap_type_multi+0xa4>
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2f12:	4669      	mov	r1, sp
    2f14:	2c00      	cmp	r4, #0
    2f16:	d041      	beq.n	2f9c <boot_swap_type_multi+0x98>
    2f18:	2c01      	cmp	r4, #1
    2f1a:	d03a      	beq.n	2f92 <boot_swap_type_multi+0x8e>
    2f1c:	20ff      	movs	r0, #255	; 0xff
    2f1e:	f002 f94b 	bl	51b8 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    2f22:	2800      	cmp	r0, #0
    2f24:	d148      	bne.n	2fb8 <boot_swap_type_multi+0xb4>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2f26:	20ff      	movs	r0, #255	; 0xff
    2f28:	a902      	add	r1, sp, #8
    2f2a:	f002 f945 	bl	51b8 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc == BOOT_EFLASH) {
    2f2e:	2801      	cmp	r0, #1
    2f30:	d140      	bne.n	2fb4 <boot_swap_type_multi+0xb0>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
                     "is unreachable. Treat it as empty", image_index);
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    2f32:	2303      	movs	r3, #3
    2f34:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    2f38:	f88d 300b 	strb.w	r3, [sp, #11]
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
        table = boot_swap_tables + i;

        if (boot_magic_compatible_check(table->magic_primary_slot,
                                        primary_slot.magic) &&
            boot_magic_compatible_check(table->magic_secondary_slot,
    2f3c:	2400      	movs	r4, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2f3e:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    2f42:	f89d 6008 	ldrb.w	r6, [sp, #8]
    2f46:	4a21      	ldr	r2, [pc, #132]	; (2fcc <boot_swap_type_multi+0xc8>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2f48:	4629      	mov	r1, r5
    2f4a:	7810      	ldrb	r0, [r2, #0]
    2f4c:	f002 f8f1 	bl	5132 <boot_magic_compatible_check>
    2f50:	b3a0      	cbz	r0, 2fbc <boot_swap_type_multi+0xb8>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2f52:	4631      	mov	r1, r6
    2f54:	7850      	ldrb	r0, [r2, #1]
    2f56:	f002 f8ec 	bl	5132 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    2f5a:	b378      	cbz	r0, 2fbc <boot_swap_type_multi+0xb8>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2f5c:	7893      	ldrb	r3, [r2, #2]
                                        secondary_slot.magic) &&
    2f5e:	2b04      	cmp	r3, #4
    2f60:	d003      	beq.n	2f6a <boot_swap_type_multi+0x66>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2f62:	f89d 1003 	ldrb.w	r1, [sp, #3]
    2f66:	4299      	cmp	r1, r3
    2f68:	d128      	bne.n	2fbc <boot_swap_type_multi+0xb8>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2f6a:	78d3      	ldrb	r3, [r2, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2f6c:	2b04      	cmp	r3, #4
    2f6e:	d003      	beq.n	2f78 <boot_swap_type_multi+0x74>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2f70:	f89d 100b 	ldrb.w	r1, [sp, #11]
    2f74:	4299      	cmp	r1, r3
    2f76:	d121      	bne.n	2fbc <boot_swap_type_multi+0xb8>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2f78:	7913      	ldrb	r3, [r2, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2f7a:	2b04      	cmp	r3, #4
    2f7c:	d003      	beq.n	2f86 <boot_swap_type_multi+0x82>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2f7e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    2f82:	4299      	cmp	r1, r3
    2f84:	d11a      	bne.n	2fbc <boot_swap_type_multi+0xb8>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
            BOOT_LOG_INF("Swap type: %s",
    2f86:	7950      	ldrb	r0, [r2, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2f88:	1e83      	subs	r3, r0, #2
    2f8a:	2b02      	cmp	r3, #2
    2f8c:	d814      	bhi.n	2fb8 <boot_swap_type_multi+0xb4>
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    2f8e:	b004      	add	sp, #16
    2f90:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2f92:	f002 f911 	bl	51b8 <boot_read_swap_state_by_id>
    if (rc) {
    2f96:	b978      	cbnz	r0, 2fb8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2f98:	2008      	movs	r0, #8
    2f9a:	e7c5      	b.n	2f28 <boot_swap_type_multi+0x24>
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2f9c:	2004      	movs	r0, #4
    2f9e:	f002 f90b 	bl	51b8 <boot_read_swap_state_by_id>
    if (rc) {
    2fa2:	b948      	cbnz	r0, 2fb8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2fa4:	2002      	movs	r0, #2
    2fa6:	e7bf      	b.n	2f28 <boot_swap_type_multi+0x24>
    if (rc) {
    2fa8:	b930      	cbnz	r0, 2fb8 <boot_swap_type_multi+0xb4>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2faa:	2c00      	cmp	r4, #0
    2fac:	d0fa      	beq.n	2fa4 <boot_swap_type_multi+0xa0>
    2fae:	2c01      	cmp	r4, #1
    2fb0:	d1b9      	bne.n	2f26 <boot_swap_type_multi+0x22>
    2fb2:	e7f1      	b.n	2f98 <boot_swap_type_multi+0x94>
    } else if (rc) {
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d0c1      	beq.n	2f3c <boot_swap_type_multi+0x38>
        return BOOT_SWAP_TYPE_PANIC;
    2fb8:	20ff      	movs	r0, #255	; 0xff
    2fba:	e7e8      	b.n	2f8e <boot_swap_type_multi+0x8a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2fbc:	3401      	adds	r4, #1
    2fbe:	2c03      	cmp	r4, #3
    2fc0:	f102 0206 	add.w	r2, r2, #6
    2fc4:	d1c0      	bne.n	2f48 <boot_swap_type_multi+0x44>
    return BOOT_SWAP_TYPE_NONE;
    2fc6:	2001      	movs	r0, #1
    2fc8:	e7e1      	b.n	2f8e <boot_swap_type_multi+0x8a>
    2fca:	bf00      	nop
    2fcc:	0000746e 	.word	0x0000746e

00002fd0 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    2fd0:	6801      	ldr	r1, [r0, #0]
    2fd2:	4a0e      	ldr	r2, [pc, #56]	; (300c <verify_header+0x3c>)
{
    2fd4:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    2fd6:	4291      	cmp	r1, r2
    2fd8:	d115      	bne.n	3006 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    2fda:	69c1      	ldr	r1, [r0, #28]
    2fdc:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    2fe0:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    2fe4:	4291      	cmp	r1, r2
    2fe6:	d10e      	bne.n	3006 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    2fe8:	6882      	ldr	r2, [r0, #8]
    2fea:	2a01      	cmp	r2, #1
    2fec:	d80b      	bhi.n	3006 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    2fee:	68c2      	ldr	r2, [r0, #12]
    2ff0:	b112      	cbz	r2, 2ff8 <verify_header+0x28>
    2ff2:	6901      	ldr	r1, [r0, #16]
    2ff4:	428a      	cmp	r2, r1
    2ff6:	d006      	beq.n	3006 <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    2ff8:	6958      	ldr	r0, [r3, #20]
    2ffa:	b128      	cbz	r0, 3008 <verify_header+0x38>
    2ffc:	699b      	ldr	r3, [r3, #24]
    2ffe:	1a1b      	subs	r3, r3, r0
    3000:	4258      	negs	r0, r3
    3002:	4158      	adcs	r0, r3
    3004:	4770      	bx	lr
        return( 1 );
    3006:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    3008:	4770      	bx	lr
    300a:	bf00      	nop
    300c:	ff00aa55 	.word	0xff00aa55

00003010 <verify_chain>:

static int verify_chain( void )
{
    3010:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    3012:	4b0d      	ldr	r3, [pc, #52]	; (3048 <verify_chain+0x38>)
    3014:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    3016:	b1a6      	cbz	r6, 3042 <verify_chain+0x32>
    3018:	4630      	mov	r0, r6
    301a:	f7ff ffd9 	bl	2fd0 <verify_header>
    301e:	4604      	mov	r4, r0
    3020:	b978      	cbnz	r0, 3042 <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    3022:	68f3      	ldr	r3, [r6, #12]
    3024:	b96b      	cbnz	r3, 3042 <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    3026:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    3028:	b90d      	cbnz	r5, 302e <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    302a:	4620      	mov	r0, r4
    302c:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    302e:	4628      	mov	r0, r5
    3030:	f7ff ffce 	bl	2fd0 <verify_header>
    3034:	b928      	cbnz	r0, 3042 <verify_chain+0x32>
        if( cur->prev != prv )
    3036:	68eb      	ldr	r3, [r5, #12]
    3038:	42b3      	cmp	r3, r6
    303a:	d102      	bne.n	3042 <verify_chain+0x32>
        cur = cur->next;
    303c:	462e      	mov	r6, r5
    303e:	692d      	ldr	r5, [r5, #16]
    3040:	e7f2      	b.n	3028 <verify_chain+0x18>
        return( 1 );
    3042:	2401      	movs	r4, #1
    3044:	e7f1      	b.n	302a <verify_chain+0x1a>
    3046:	bf00      	nop
    3048:	20004688 	.word	0x20004688

0000304c <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    3050:	4f3f      	ldr	r7, [pc, #252]	; (3150 <buffer_alloc_calloc+0x104>)
    3052:	683c      	ldr	r4, [r7, #0]
    3054:	b1d4      	cbz	r4, 308c <buffer_alloc_calloc+0x40>
    3056:	68bc      	ldr	r4, [r7, #8]
    3058:	b1c4      	cbz	r4, 308c <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    305a:	2800      	cmp	r0, #0
    305c:	d04a      	beq.n	30f4 <buffer_alloc_calloc+0xa8>
    305e:	2900      	cmp	r1, #0
    3060:	d048      	beq.n	30f4 <buffer_alloc_calloc+0xa8>
    original_len = len = n * size;
    3062:	fb01 f500 	mul.w	r5, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    3066:	fbb5 f0f0 	udiv	r0, r5, r0
    306a:	4288      	cmp	r0, r1
    306c:	d142      	bne.n	30f4 <buffer_alloc_calloc+0xa8>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    306e:	1d28      	adds	r0, r5, #4
    3070:	d840      	bhi.n	30f4 <buffer_alloc_calloc+0xa8>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3072:	07a9      	lsls	r1, r5, #30
    3074:	d00d      	beq.n	3092 <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3076:	f025 0603 	bic.w	r6, r5, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    307a:	3604      	adds	r6, #4
    memory_header *new, *cur = heap.first_free;
    307c:	68fc      	ldr	r4, [r7, #12]
    307e:	e003      	b.n	3088 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    3080:	6863      	ldr	r3, [r4, #4]
    3082:	42b3      	cmp	r3, r6
    3084:	d238      	bcs.n	30f8 <buffer_alloc_calloc+0xac>
            break;

        cur = cur->next_free;
    3086:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    3088:	2c00      	cmp	r4, #0
    308a:	d1f9      	bne.n	3080 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    308c:	4620      	mov	r0, r4
    308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3092:	462e      	mov	r6, r5
    3094:	e7f2      	b.n	307c <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    3096:	60fb      	str	r3, [r7, #12]
    3098:	e041      	b.n	311e <buffer_alloc_calloc+0xd2>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    309a:	f106 0120 	add.w	r1, r6, #32
    309e:	1863      	adds	r3, r4, r1
    new->size = cur->size - len - sizeof(memory_header);
    30a0:	3a20      	subs	r2, #32
    30a2:	605a      	str	r2, [r3, #4]
    new->alloc = 0;
    30a4:	2200      	movs	r2, #0
    new->prev = cur;
    30a6:	e9c3 2402 	strd	r2, r4, [r3, #8]
    new->magic1 = MAGIC1;
    30aa:	482a      	ldr	r0, [pc, #168]	; (3154 <buffer_alloc_calloc+0x108>)
    new->next = cur->next;
    30ac:	6922      	ldr	r2, [r4, #16]
    30ae:	611a      	str	r2, [r3, #16]
    new->magic1 = MAGIC1;
    30b0:	5060      	str	r0, [r4, r1]
    new->magic2 = MAGIC2;
    30b2:	4929      	ldr	r1, [pc, #164]	; (3158 <buffer_alloc_calloc+0x10c>)
    30b4:	61d9      	str	r1, [r3, #28]
    if( new->next != NULL )
    30b6:	b102      	cbz	r2, 30ba <buffer_alloc_calloc+0x6e>
        new->next->prev = new;
    30b8:	60d3      	str	r3, [r2, #12]
    new->prev_free = cur->prev_free;
    30ba:	6962      	ldr	r2, [r4, #20]
    30bc:	615a      	str	r2, [r3, #20]
    new->next_free = cur->next_free;
    30be:	69a1      	ldr	r1, [r4, #24]
    30c0:	6199      	str	r1, [r3, #24]
    if( new->prev_free != NULL )
    30c2:	b1aa      	cbz	r2, 30f0 <buffer_alloc_calloc+0xa4>
        new->prev_free->next_free = new;
    30c4:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    30c6:	699a      	ldr	r2, [r3, #24]
    30c8:	b102      	cbz	r2, 30cc <buffer_alloc_calloc+0x80>
        new->next_free->prev_free = new;
    30ca:	6153      	str	r3, [r2, #20]
    cur->alloc = 1;
    30cc:	f04f 0901 	mov.w	r9, #1
    cur->next = new;
    30d0:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    30d2:	2300      	movs	r3, #0
    cur->size = len;
    30d4:	e9c4 6901 	strd	r6, r9, [r4, #4]
    cur->next_free = NULL;
    30d8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    30dc:	693b      	ldr	r3, [r7, #16]
    30de:	07db      	lsls	r3, r3, #31
    30e0:	d52e      	bpl.n	3140 <buffer_alloc_calloc+0xf4>
    30e2:	f7ff ff95 	bl	3010 <verify_chain>
    30e6:	b358      	cbz	r0, 3140 <buffer_alloc_calloc+0xf4>
        mbedtls_exit( 1 );
    30e8:	4b1c      	ldr	r3, [pc, #112]	; (315c <buffer_alloc_calloc+0x110>)
    30ea:	4648      	mov	r0, r9
    30ec:	681b      	ldr	r3, [r3, #0]
    30ee:	e026      	b.n	313e <buffer_alloc_calloc+0xf2>
        heap.first_free = new;
    30f0:	60fb      	str	r3, [r7, #12]
    30f2:	e7e8      	b.n	30c6 <buffer_alloc_calloc+0x7a>
        return( NULL );
    30f4:	2400      	movs	r4, #0
    30f6:	e7c9      	b.n	308c <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    30f8:	68a3      	ldr	r3, [r4, #8]
    30fa:	b11b      	cbz	r3, 3104 <buffer_alloc_calloc+0xb8>
        mbedtls_exit( 1 );
    30fc:	4b17      	ldr	r3, [pc, #92]	; (315c <buffer_alloc_calloc+0x110>)
    30fe:	2001      	movs	r0, #1
    3100:	681b      	ldr	r3, [r3, #0]
    3102:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3104:	6862      	ldr	r2, [r4, #4]
    3106:	f104 0820 	add.w	r8, r4, #32
    310a:	1b92      	subs	r2, r2, r6
    310c:	2a23      	cmp	r2, #35	; 0x23
    310e:	d8c4      	bhi.n	309a <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    3110:	2301      	movs	r3, #1
    3112:	60a3      	str	r3, [r4, #8]
            cur->prev_free->next_free = cur->next_free;
    3114:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
        if( cur->prev_free != NULL )
    3118:	2a00      	cmp	r2, #0
    311a:	d0bc      	beq.n	3096 <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    311c:	6193      	str	r3, [r2, #24]
        if( cur->next_free != NULL )
    311e:	69a3      	ldr	r3, [r4, #24]
    3120:	b10b      	cbz	r3, 3126 <buffer_alloc_calloc+0xda>
            cur->next_free->prev_free = cur->prev_free;
    3122:	6962      	ldr	r2, [r4, #20]
    3124:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    3126:	2300      	movs	r3, #0
        cur->next_free = NULL;
    3128:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    312c:	693b      	ldr	r3, [r7, #16]
    312e:	07da      	lsls	r2, r3, #31
    3130:	d506      	bpl.n	3140 <buffer_alloc_calloc+0xf4>
    3132:	f7ff ff6d 	bl	3010 <verify_chain>
    3136:	b118      	cbz	r0, 3140 <buffer_alloc_calloc+0xf4>
            mbedtls_exit( 1 );
    3138:	2001      	movs	r0, #1
    313a:	4b08      	ldr	r3, [pc, #32]	; (315c <buffer_alloc_calloc+0x110>)
    313c:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    313e:	4798      	blx	r3
    memset( ret, 0, original_len );
    3140:	462a      	mov	r2, r5
    3142:	2100      	movs	r1, #0
    3144:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    3146:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    3148:	f001 fe0c 	bl	4d64 <memset>
    return( ret );
    314c:	e79e      	b.n	308c <buffer_alloc_calloc+0x40>
    314e:	bf00      	nop
    3150:	20004688 	.word	0x20004688
    3154:	ff00aa55 	.word	0xff00aa55
    3158:	ee119966 	.word	0xee119966
    315c:	20002010 	.word	0x20002010

00003160 <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    3160:	b570      	push	{r4, r5, r6, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    3162:	4605      	mov	r5, r0
    3164:	2800      	cmp	r0, #0
    3166:	f000 8088 	beq.w	327a <buffer_alloc_free+0x11a>
    316a:	4e44      	ldr	r6, [pc, #272]	; (327c <buffer_alloc_free+0x11c>)
    316c:	6833      	ldr	r3, [r6, #0]
    316e:	2b00      	cmp	r3, #0
    3170:	f000 8083 	beq.w	327a <buffer_alloc_free+0x11a>
    3174:	68b2      	ldr	r2, [r6, #8]
    3176:	2a00      	cmp	r2, #0
    3178:	d07f      	beq.n	327a <buffer_alloc_free+0x11a>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    317a:	4283      	cmp	r3, r0
    317c:	d803      	bhi.n	3186 <buffer_alloc_free+0x26>
    317e:	6872      	ldr	r2, [r6, #4]
    3180:	4413      	add	r3, r2
    3182:	4298      	cmp	r0, r3
    3184:	d303      	bcc.n	318e <buffer_alloc_free+0x2e>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3186:	4b3e      	ldr	r3, [pc, #248]	; (3280 <buffer_alloc_free+0x120>)
    3188:	2001      	movs	r0, #1
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    318e:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    3192:	4620      	mov	r0, r4
    3194:	f7ff ff1c 	bl	2fd0 <verify_header>
    3198:	b118      	cbz	r0, 31a2 <buffer_alloc_free+0x42>
        mbedtls_exit( 1 );
    319a:	4b39      	ldr	r3, [pc, #228]	; (3280 <buffer_alloc_free+0x120>)
    319c:	2001      	movs	r0, #1
    319e:	681b      	ldr	r3, [r3, #0]
    31a0:	4798      	blx	r3

    if( hdr->alloc != 1 )
    31a2:	f855 3c18 	ldr.w	r3, [r5, #-24]
    31a6:	2b01      	cmp	r3, #1
    31a8:	d003      	beq.n	31b2 <buffer_alloc_free+0x52>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    31aa:	4b35      	ldr	r3, [pc, #212]	; (3280 <buffer_alloc_free+0x120>)
    31ac:	2001      	movs	r0, #1
    31ae:	681b      	ldr	r3, [r3, #0]
    31b0:	4798      	blx	r3
    }

    hdr->alloc = 0;
    31b2:	2300      	movs	r3, #0
    31b4:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    31b8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    31bc:	b33b      	cbz	r3, 320e <buffer_alloc_free+0xae>
    31be:	689a      	ldr	r2, [r3, #8]
    31c0:	bb2a      	cbnz	r2, 320e <buffer_alloc_free+0xae>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    31c2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    31c6:	f102 0120 	add.w	r1, r2, #32
    31ca:	685a      	ldr	r2, [r3, #4]
    31cc:	440a      	add	r2, r1
    31ce:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
    31d0:	e955 3205 	ldrd	r3, r2, [r5, #-20]
    31d4:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
    31d6:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if( hdr->next != NULL )
    31da:	692b      	ldr	r3, [r5, #16]
    31dc:	b103      	cbz	r3, 31e0 <buffer_alloc_free+0x80>
            hdr->next->prev = hdr;
    31de:	60dd      	str	r5, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    31e0:	2220      	movs	r2, #32
    31e2:	2100      	movs	r1, #0
    31e4:	4620      	mov	r0, r4
    31e6:	f001 fdbd 	bl	4d64 <memset>
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    31ea:	6928      	ldr	r0, [r5, #16]
    31ec:	b110      	cbz	r0, 31f4 <buffer_alloc_free+0x94>
    31ee:	6883      	ldr	r3, [r0, #8]
    31f0:	2b00      	cmp	r3, #0
    31f2:	d02e      	beq.n	3252 <buffer_alloc_free+0xf2>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    31f4:	6933      	ldr	r3, [r6, #16]
    31f6:	079b      	lsls	r3, r3, #30
    31f8:	d53f      	bpl.n	327a <buffer_alloc_free+0x11a>
    31fa:	f7ff ff09 	bl	3010 <verify_chain>
    31fe:	2800      	cmp	r0, #0
    3200:	d03b      	beq.n	327a <buffer_alloc_free+0x11a>
        mbedtls_exit( 1 );
}
    3202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        mbedtls_exit( 1 );
    3206:	4b1e      	ldr	r3, [pc, #120]	; (3280 <buffer_alloc_free+0x120>)
    3208:	2001      	movs	r0, #1
    320a:	681b      	ldr	r3, [r3, #0]
    320c:	4718      	bx	r3
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    320e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    3212:	2800      	cmp	r0, #0
    3214:	d02a      	beq.n	326c <buffer_alloc_free+0x10c>
    3216:	6883      	ldr	r3, [r0, #8]
    3218:	bb43      	cbnz	r3, 326c <buffer_alloc_free+0x10c>
        hdr->size += sizeof(memory_header) + hdr->next->size;
    321a:	6842      	ldr	r2, [r0, #4]
    321c:	6863      	ldr	r3, [r4, #4]
    321e:	4413      	add	r3, r2
    3220:	3320      	adds	r3, #32
    3222:	6063      	str	r3, [r4, #4]
        hdr->next = hdr->next->next;
    3224:	6903      	ldr	r3, [r0, #16]
    3226:	6123      	str	r3, [r4, #16]
        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3228:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    322c:	b99a      	cbnz	r2, 3256 <buffer_alloc_free+0xf6>
    322e:	b9cb      	cbnz	r3, 3264 <buffer_alloc_free+0x104>
        hdr->prev_free = old->prev_free;
    3230:	6943      	ldr	r3, [r0, #20]
    3232:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
    3234:	6982      	ldr	r2, [r0, #24]
    3236:	61a2      	str	r2, [r4, #24]
        if( hdr->prev_free != NULL )
    3238:	b1b3      	cbz	r3, 3268 <buffer_alloc_free+0x108>
            hdr->prev_free->next_free = hdr;
    323a:	619c      	str	r4, [r3, #24]
        if( hdr->next_free != NULL )
    323c:	69a3      	ldr	r3, [r4, #24]
    323e:	b103      	cbz	r3, 3242 <buffer_alloc_free+0xe2>
            hdr->next_free->prev_free = hdr;
    3240:	615c      	str	r4, [r3, #20]
        if( hdr->next != NULL )
    3242:	6923      	ldr	r3, [r4, #16]
    3244:	b103      	cbz	r3, 3248 <buffer_alloc_free+0xe8>
            hdr->next->prev = hdr;
    3246:	60dc      	str	r4, [r3, #12]
        memset( old, 0, sizeof(memory_header) );
    3248:	2220      	movs	r2, #32
    324a:	2100      	movs	r1, #0
    324c:	f001 fd8a 	bl	4d64 <memset>
    if( old == NULL )
    3250:	e7d0      	b.n	31f4 <buffer_alloc_free+0x94>
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3252:	462c      	mov	r4, r5
    3254:	e7e1      	b.n	321a <buffer_alloc_free+0xba>
                hdr->prev_free->next_free = hdr->next_free;
    3256:	6193      	str	r3, [r2, #24]
            if( hdr->next_free != NULL )
    3258:	69a3      	ldr	r3, [r4, #24]
    325a:	2b00      	cmp	r3, #0
    325c:	d0e8      	beq.n	3230 <buffer_alloc_free+0xd0>
                hdr->next_free->prev_free = hdr->prev_free;
    325e:	6962      	ldr	r2, [r4, #20]
    3260:	615a      	str	r2, [r3, #20]
    3262:	e7e5      	b.n	3230 <buffer_alloc_free+0xd0>
                heap.first_free = hdr->next_free;
    3264:	60f3      	str	r3, [r6, #12]
    3266:	e7f7      	b.n	3258 <buffer_alloc_free+0xf8>
            heap.first_free = hdr;
    3268:	60f4      	str	r4, [r6, #12]
    326a:	e7e7      	b.n	323c <buffer_alloc_free+0xdc>
        hdr->next_free = heap.first_free;
    326c:	68f3      	ldr	r3, [r6, #12]
    326e:	f845 3c08 	str.w	r3, [r5, #-8]
        if( heap.first_free != NULL )
    3272:	b103      	cbz	r3, 3276 <buffer_alloc_free+0x116>
            heap.first_free->prev_free = hdr;
    3274:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    3276:	60f4      	str	r4, [r6, #12]
    3278:	e7bc      	b.n	31f4 <buffer_alloc_free+0x94>
}
    327a:	bd70      	pop	{r4, r5, r6, pc}
    327c:	20004688 	.word	0x20004688
    3280:	20002010 	.word	0x20002010

00003284 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3284:	b538      	push	{r3, r4, r5, lr}
    3286:	460c      	mov	r4, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3288:	2214      	movs	r2, #20
    328a:	2100      	movs	r1, #0
{
    328c:	4605      	mov	r5, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    328e:	4813      	ldr	r0, [pc, #76]	; (32dc <mbedtls_memory_buffer_alloc_init+0x58>)
    3290:	f001 fd68 	bl	4d64 <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3294:	4912      	ldr	r1, [pc, #72]	; (32e0 <mbedtls_memory_buffer_alloc_init+0x5c>)
    3296:	4813      	ldr	r0, [pc, #76]	; (32e4 <mbedtls_memory_buffer_alloc_init+0x60>)
    3298:	f000 f834 	bl	3304 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    329c:	2c23      	cmp	r4, #35	; 0x23
    329e:	d91c      	bls.n	32da <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    32a0:	f015 0303 	ands.w	r3, r5, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    32a4:	bf1f      	itttt	ne
    32a6:	3c04      	subne	r4, #4
    32a8:	18e4      	addne	r4, r4, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    32aa:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    32ae:	18ed      	addne	r5, r5, r3
    }

    memset( buf, 0, len );
    32b0:	4622      	mov	r2, r4
    32b2:	2100      	movs	r1, #0
    32b4:	4628      	mov	r0, r5
    32b6:	f001 fd55 	bl	4d64 <memset>

    heap.buf = buf;
    32ba:	4b08      	ldr	r3, [pc, #32]	; (32dc <mbedtls_memory_buffer_alloc_init+0x58>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    32bc:	490a      	ldr	r1, [pc, #40]	; (32e8 <mbedtls_memory_buffer_alloc_init+0x64>)
    heap.len = len;
    32be:	e9c3 5400 	strd	r5, r4, [r3]
    heap.first->size = len - sizeof( memory_header );
    32c2:	3c20      	subs	r4, #32
    heap.first = (memory_header *)buf;
    32c4:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof( memory_header );
    32c6:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
    32c8:	689a      	ldr	r2, [r3, #8]
    32ca:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
    32cc:	689a      	ldr	r2, [r3, #8]
    32ce:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
    32d2:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
    32d6:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
    32d8:	60da      	str	r2, [r3, #12]
}
    32da:	bd38      	pop	{r3, r4, r5, pc}
    32dc:	20004688 	.word	0x20004688
    32e0:	00003161 	.word	0x00003161
    32e4:	0000304d 	.word	0x0000304d
    32e8:	ff00aa55 	.word	0xff00aa55

000032ec <mbedtls_calloc>:
void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    32ec:	4b01      	ldr	r3, [pc, #4]	; (32f4 <mbedtls_calloc+0x8>)
    32ee:	681b      	ldr	r3, [r3, #0]
    32f0:	4718      	bx	r3
    32f2:	bf00      	nop
    32f4:	20002018 	.word	0x20002018

000032f8 <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    32f8:	4b01      	ldr	r3, [pc, #4]	; (3300 <mbedtls_free+0x8>)
    32fa:	681b      	ldr	r3, [r3, #0]
    32fc:	4718      	bx	r3
    32fe:	bf00      	nop
    3300:	20002014 	.word	0x20002014

00003304 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3304:	4b02      	ldr	r3, [pc, #8]	; (3310 <mbedtls_platform_set_calloc_free+0xc>)
    3306:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3308:	4b02      	ldr	r3, [pc, #8]	; (3314 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    330a:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    330c:	6019      	str	r1, [r3, #0]
}
    330e:	4770      	bx	lr
    3310:	20002018 	.word	0x20002018
    3314:	20002014 	.word	0x20002014

00003318 <rsa_check_context.constprop.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    331a:	f100 0608 	add.w	r6, r0, #8
    331e:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3320:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3322:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3324:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3326:	f002 f8b4 	bl	5492 <mbedtls_mpi_size>
    332a:	4287      	cmp	r7, r0
    332c:	d14b      	bne.n	33c6 <rsa_check_context.constprop.0+0xae>
    332e:	6863      	ldr	r3, [r4, #4]
    3330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3334:	d847      	bhi.n	33c6 <rsa_check_context.constprop.0+0xae>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3336:	2100      	movs	r1, #0
    3338:	4630      	mov	r0, r6
    333a:	f002 f9a2 	bl	5682 <mbedtls_mpi_cmp_int>
    333e:	2800      	cmp	r0, #0
    3340:	dd41      	ble.n	33c6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3342:	2100      	movs	r1, #0
    3344:	4630      	mov	r0, r6
    3346:	f002 f890 	bl	546a <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    334a:	b3e0      	cbz	r0, 33c6 <rsa_check_context.constprop.0+0xae>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    334c:	b945      	cbnz	r5, 3360 <rsa_check_context.constprop.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    334e:	4629      	mov	r1, r5
    3350:	f104 0014 	add.w	r0, r4, #20

    /* It wouldn't lead to an error if it wasn't satisfied,
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3354:	f002 f995 	bl	5682 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3358:	2800      	cmp	r0, #0
    335a:	dd34      	ble.n	33c6 <rsa_check_context.constprop.0+0xae>
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    }
#endif

    return( 0 );
    335c:	2000      	movs	r0, #0
}
    335e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3360:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    3364:	2100      	movs	r1, #0
    3366:	4628      	mov	r0, r5
    3368:	f002 f98b 	bl	5682 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    336c:	2800      	cmp	r0, #0
    336e:	dd2a      	ble.n	33c6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3370:	2100      	movs	r1, #0
    3372:	4628      	mov	r0, r5
    3374:	f002 f879 	bl	546a <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3378:	b328      	cbz	r0, 33c6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    337a:	f104 0538 	add.w	r5, r4, #56	; 0x38
    337e:	2100      	movs	r1, #0
    3380:	4628      	mov	r0, r5
    3382:	f002 f97e 	bl	5682 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3386:	2800      	cmp	r0, #0
    3388:	dd1d      	ble.n	33c6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    338a:	2100      	movs	r1, #0
    338c:	4628      	mov	r0, r5
    338e:	f002 f86c 	bl	546a <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3392:	b1c0      	cbz	r0, 33c6 <rsa_check_context.constprop.0+0xae>
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3394:	2100      	movs	r1, #0
    3396:	f104 0014 	add.w	r0, r4, #20
    339a:	f002 f972 	bl	5682 <mbedtls_mpi_cmp_int>
    339e:	2800      	cmp	r0, #0
    33a0:	dd11      	ble.n	33c6 <rsa_check_context.constprop.0+0xae>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    33a2:	2100      	movs	r1, #0
    33a4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    33a8:	f002 f96b 	bl	5682 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    33ac:	2800      	cmp	r0, #0
    33ae:	dd0a      	ble.n	33c6 <rsa_check_context.constprop.0+0xae>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    33b0:	2100      	movs	r1, #0
    33b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    33b6:	f002 f964 	bl	5682 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    33ba:	2800      	cmp	r0, #0
    33bc:	dd03      	ble.n	33c6 <rsa_check_context.constprop.0+0xae>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    33be:	2100      	movs	r1, #0
    33c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    33c4:	e7c6      	b.n	3354 <rsa_check_context.constprop.0+0x3c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    33c6:	4801      	ldr	r0, [pc, #4]	; (33cc <rsa_check_context.constprop.0+0xb4>)
    33c8:	e7c9      	b.n	335e <rsa_check_context.constprop.0+0x46>
    33ca:	bf00      	nop
    33cc:	ffffbf80 	.word	0xffffbf80

000033d0 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    33d0:	b570      	push	{r4, r5, r6, lr}
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    33d2:	2100      	movs	r1, #0
{
    33d4:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    33d6:	f7ff ff9f 	bl	3318 <rsa_check_context.constprop.0>
    33da:	4605      	mov	r5, r0
    33dc:	b110      	cbz	r0, 33e4 <mbedtls_rsa_check_pubkey+0x14>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    33de:	4d0e      	ldr	r5, [pc, #56]	; (3418 <mbedtls_rsa_check_pubkey+0x48>)
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    return( 0 );
}
    33e0:	4628      	mov	r0, r5
    33e2:	bd70      	pop	{r4, r5, r6, pc}
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    33e4:	f104 0608 	add.w	r6, r4, #8
    33e8:	4630      	mov	r0, r6
    33ea:	f002 f84e 	bl	548a <mbedtls_mpi_bitlen>
    33ee:	287f      	cmp	r0, #127	; 0x7f
    33f0:	d9f5      	bls.n	33de <mbedtls_rsa_check_pubkey+0xe>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    33f2:	3414      	adds	r4, #20
    33f4:	4629      	mov	r1, r5
    33f6:	4620      	mov	r0, r4
    33f8:	f002 f837 	bl	546a <mbedtls_mpi_get_bit>
    33fc:	2800      	cmp	r0, #0
    33fe:	d0ee      	beq.n	33de <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3400:	4620      	mov	r0, r4
    3402:	f002 f842 	bl	548a <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3406:	2801      	cmp	r0, #1
    3408:	d9e9      	bls.n	33de <mbedtls_rsa_check_pubkey+0xe>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    340a:	4631      	mov	r1, r6
    340c:	4620      	mov	r0, r4
    340e:	f002 f8f7 	bl	5600 <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3412:	2800      	cmp	r0, #0
    3414:	dbe4      	blt.n	33e0 <mbedtls_rsa_check_pubkey+0x10>
    3416:	e7e2      	b.n	33de <mbedtls_rsa_check_pubkey+0xe>
    3418:	ffffbe00 	.word	0xffffbe00

0000341c <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    341c:	b5f0      	push	{r4, r5, r6, r7, lr}
    341e:	460c      	mov	r4, r1
    3420:	b087      	sub	sp, #28
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t olen;
    mbedtls_mpi T;

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3422:	2100      	movs	r1, #0
{
    3424:	4605      	mov	r5, r0
    3426:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3428:	f7ff ff76 	bl	3318 <rsa_check_context.constprop.0>
    342c:	2800      	cmp	r0, #0
    342e:	d139      	bne.n	34a4 <mbedtls_rsa_public+0x88>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3430:	a803      	add	r0, sp, #12
    3432:	f001 ff72 	bl	531a <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3436:	4621      	mov	r1, r4
    3438:	686a      	ldr	r2, [r5, #4]
    343a:	a803      	add	r0, sp, #12
    343c:	f002 f82f 	bl	549e <mbedtls_mpi_read_binary>
    3440:	4604      	mov	r4, r0
    3442:	b118      	cbz	r0, 344c <mbedtls_rsa_public+0x30>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3444:	a803      	add	r0, sp, #12
    3446:	f001 ff6e 	bl	5326 <mbedtls_mpi_free>

    if( ret != 0 )
    344a:	e00c      	b.n	3466 <mbedtls_rsa_public+0x4a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    344c:	f105 0408 	add.w	r4, r5, #8
    3450:	4621      	mov	r1, r4
    3452:	a803      	add	r0, sp, #12
    3454:	f002 f8d4 	bl	5600 <mbedtls_mpi_cmp_mpi>
    3458:	2800      	cmp	r0, #0
    345a:	db07      	blt.n	346c <mbedtls_rsa_public+0x50>
    mbedtls_mpi_free( &T );
    345c:	a803      	add	r0, sp, #12
    345e:	f001 ff62 	bl	5326 <mbedtls_mpi_free>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3462:	f06f 0403 	mvn.w	r4, #3
        ( *mbedtls_test_hook_error_add )( high, low, file, line );
#endif
    (void)file;
    (void)line;

    return( high + low );
    3466:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
        return( MBEDTLS_ERROR_ADD( MBEDTLS_ERR_RSA_PUBLIC_FAILED, ret ) );
    346a:	e018      	b.n	349e <mbedtls_rsa_public+0x82>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    346c:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3470:	a903      	add	r1, sp, #12
    olen = ctx->len;
    3472:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3474:	4608      	mov	r0, r1
    3476:	9300      	str	r3, [sp, #0]
    3478:	f105 0214 	add.w	r2, r5, #20
    347c:	4623      	mov	r3, r4
    347e:	f002 fbda 	bl	5c36 <mbedtls_mpi_exp_mod>
    3482:	4604      	mov	r4, r0
    3484:	2800      	cmp	r0, #0
    3486:	d1dd      	bne.n	3444 <mbedtls_rsa_public+0x28>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3488:	463a      	mov	r2, r7
    348a:	4631      	mov	r1, r6
    348c:	a803      	add	r0, sp, #12
    348e:	f002 f81c 	bl	54ca <mbedtls_mpi_write_binary>
    3492:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
    3494:	a803      	add	r0, sp, #12
    3496:	f001 ff46 	bl	5326 <mbedtls_mpi_free>
    if( ret != 0 )
    349a:	2c00      	cmp	r4, #0
    349c:	d1e3      	bne.n	3466 <mbedtls_rsa_public+0x4a>

    return( 0 );
}
    349e:	4620      	mov	r0, r4
    34a0:	b007      	add	sp, #28
    34a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    34a4:	4c00      	ldr	r4, [pc, #0]	; (34a8 <mbedtls_rsa_public+0x8c>)
    34a6:	e7fa      	b.n	349e <mbedtls_rsa_public+0x82>
    34a8:	ffffbf80 	.word	0xffffbf80

000034ac <mbedtls_sha256_starts>:
 * SHA-256 context setup
 */
int mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
#if defined(MBEDTLS_SHA224_C)
    if( is224 != 0 && is224 != 1 )
    34ac:	2901      	cmp	r1, #1
{
    34ae:	4603      	mov	r3, r0
    34b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( is224 != 0 && is224 != 1 )
    34b4:	d843      	bhi.n	353e <mbedtls_sha256_starts+0x92>
#endif

    ctx->total[0] = 0;
    ctx->total[1] = 0;

    if( is224 == 0 )
    34b6:	4a23      	ldr	r2, [pc, #140]	; (3544 <mbedtls_sha256_starts+0x98>)
    34b8:	2900      	cmp	r1, #0
    34ba:	bf18      	it	ne
    34bc:	4690      	movne	r8, r2
    34be:	4a22      	ldr	r2, [pc, #136]	; (3548 <mbedtls_sha256_starts+0x9c>)
    34c0:	4f22      	ldr	r7, [pc, #136]	; (354c <mbedtls_sha256_starts+0xa0>)
    34c2:	bf18      	it	ne
    34c4:	4696      	movne	lr, r2
    34c6:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    34ca:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    34ce:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    34d2:	bf18      	it	ne
    34d4:	4694      	movne	ip, r2
    34d6:	4a1e      	ldr	r2, [pc, #120]	; (3550 <mbedtls_sha256_starts+0xa4>)
    34d8:	481e      	ldr	r0, [pc, #120]	; (3554 <mbedtls_sha256_starts+0xa8>)
    34da:	bf18      	it	ne
    34dc:	4617      	movne	r7, r2
    34de:	4a1e      	ldr	r2, [pc, #120]	; (3558 <mbedtls_sha256_starts+0xac>)
    34e0:	4e1e      	ldr	r6, [pc, #120]	; (355c <mbedtls_sha256_starts+0xb0>)
    34e2:	bf18      	it	ne
    34e4:	4616      	movne	r6, r2
    34e6:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    34ea:	bf08      	it	eq
    34ec:	4680      	moveq	r8, r0
    34ee:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    34f2:	481b      	ldr	r0, [pc, #108]	; (3560 <mbedtls_sha256_starts+0xb4>)
    34f4:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    34f8:	bf08      	it	eq
    34fa:	4686      	moveq	lr, r0
    34fc:	4d19      	ldr	r5, [pc, #100]	; (3564 <mbedtls_sha256_starts+0xb8>)
    34fe:	481a      	ldr	r0, [pc, #104]	; (3568 <mbedtls_sha256_starts+0xbc>)
    3500:	bf18      	it	ne
    3502:	4615      	movne	r5, r2
    3504:	4a19      	ldr	r2, [pc, #100]	; (356c <mbedtls_sha256_starts+0xc0>)
    3506:	bf08      	it	eq
    3508:	4684      	moveq	ip, r0
    350a:	4c19      	ldr	r4, [pc, #100]	; (3570 <mbedtls_sha256_starts+0xc4>)
    350c:	4819      	ldr	r0, [pc, #100]	; (3574 <mbedtls_sha256_starts+0xc8>)
    350e:	bf18      	it	ne
    3510:	4614      	movne	r4, r2
    3512:	f1a2 6211 	sub.w	r2, r2, #152043520	; 0x9100000
    3516:	f5a2 220c 	sub.w	r2, r2, #573440	; 0x8c000
    351a:	f2a2 228e 	subw	r2, r2, #654	; 0x28e
    351e:	bf18      	it	ne
    3520:	4602      	movne	r2, r0
    ctx->total[0] = 0;
    3522:	2000      	movs	r0, #0
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    3524:	e9c3 8e02 	strd	r8, lr, [r3, #8]
    ctx->total[1] = 0;
    3528:	e9c3 0000 	strd	r0, r0, [r3]
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    352c:	e9c3 c704 	strd	ip, r7, [r3, #16]
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    3530:	e9c3 6506 	strd	r6, r5, [r3, #24]
        ctx->state[6] = 0x1F83D9AB;
        ctx->state[7] = 0x5BE0CD19;
    3534:	e9c3 4208 	strd	r4, r2, [r3, #32]
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
#endif
    }

    ctx->is224 = is224;
    3538:	6699      	str	r1, [r3, #104]	; 0x68

    return( 0 );
}
    353a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return MBEDTLS_ERR_SHA256_BAD_INPUT_DATA;
    353e:	f06f 0073 	mvn.w	r0, #115	; 0x73
    3542:	e7fa      	b.n	353a <mbedtls_sha256_starts+0x8e>
    3544:	c1059ed8 	.word	0xc1059ed8
    3548:	367cd507 	.word	0x367cd507
    354c:	a54ff53a 	.word	0xa54ff53a
    3550:	f70e5939 	.word	0xf70e5939
    3554:	6a09e667 	.word	0x6a09e667
    3558:	ffc00b31 	.word	0xffc00b31
    355c:	510e527f 	.word	0x510e527f
    3560:	bb67ae85 	.word	0xbb67ae85
    3564:	9b05688c 	.word	0x9b05688c
    3568:	3c6ef372 	.word	0x3c6ef372
    356c:	64f98fa7 	.word	0x64f98fa7
    3570:	1f83d9ab 	.word	0x1f83d9ab
    3574:	befa4fa4 	.word	0xbefa4fa4

00003578 <mbedtls_internal_sha256_process>:
 */
static
#endif
int mbedtls_internal_sha256_process_c( mbedtls_sha256_context *ctx,
                                const unsigned char data[SHA256_BLOCK_SIZE] )
{
    3578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    357c:	b0d1      	sub	sp, #324	; 0x144
    357e:	f50d 7b8e 	add.w	fp, sp, #284	; 0x11c
    3582:	465a      	mov	r2, fp
    3584:	1d03      	adds	r3, r0, #4
    3586:	9301      	str	r3, [sp, #4]
    3588:	f100 0324 	add.w	r3, r0, #36	; 0x24
    358c:	9303      	str	r3, [sp, #12]
    358e:	9b01      	ldr	r3, [sp, #4]
    } local;

    unsigned int i;

    for( i = 0; i < 8; i++ )
        local.A[i] = ctx->state[i];
    3590:	f853 0f04 	ldr.w	r0, [r3, #4]!
    3594:	f842 0f04 	str.w	r0, [r2, #4]!
    for( i = 0; i < 8; i++ )
    3598:	9803      	ldr	r0, [sp, #12]
    359a:	4298      	cmp	r0, r3
    359c:	d1f8      	bne.n	3590 <mbedtls_internal_sha256_process+0x18>
    359e:	e9dd 0748 	ldrd	r0, r7, [sp, #288]	; 0x120

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    35a2:	f04f 0900 	mov.w	r9, #0
    35a6:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    35a8:	ad4c      	add	r5, sp, #304	; 0x130
    35aa:	9302      	str	r3, [sp, #8]
    35ac:	e9dd e34a 	ldrd	lr, r3, [sp, #296]	; 0x128
    35b0:	9304      	str	r3, [sp, #16]
    35b2:	4b42      	ldr	r3, [pc, #264]	; (36bc <mbedtls_internal_sha256_process+0x144>)
    35b4:	aa06      	add	r2, sp, #24
    35b6:	9305      	str	r3, [sp, #20]
    35b8:	e895 1120 	ldmia.w	r5, {r5, r8, ip}
    {
        if( i < 16 )
    35bc:	f1b9 0f0f 	cmp.w	r9, #15
    35c0:	d863      	bhi.n	368a <mbedtls_internal_sha256_process+0x112>
            local.W[i] = MBEDTLS_GET_UINT32_BE( data, 4 * i );
    35c2:	784c      	ldrb	r4, [r1, #1]
    35c4:	780b      	ldrb	r3, [r1, #0]
    35c6:	0424      	lsls	r4, r4, #16
    35c8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    35cc:	78cb      	ldrb	r3, [r1, #3]
    35ce:	4323      	orrs	r3, r4
    35d0:	788c      	ldrb	r4, [r1, #2]
    35d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    35d6:	ea4f 2af5 	mov.w	sl, r5, ror #11
    35da:	ea8c 0408 	eor.w	r4, ip, r8
    35de:	9e05      	ldr	r6, [sp, #20]
    35e0:	ea8a 1ab5 	eor.w	sl, sl, r5, ror #6
    35e4:	402c      	ands	r4, r5
    35e6:	ea8a 6a75 	eor.w	sl, sl, r5, ror #25
    35ea:	ea84 040c 	eor.w	r4, r4, ip
    35ee:	4454      	add	r4, sl
    35f0:	f856 ab04 	ldr.w	sl, [r6], #4
    35f4:	6093      	str	r3, [r2, #8]
    35f6:	4454      	add	r4, sl
    35f8:	4423      	add	r3, r4
    35fa:	9c02      	ldr	r4, [sp, #8]
    35fc:	ea4f 3a70 	mov.w	sl, r0, ror #13
    3600:	4423      	add	r3, r4
    3602:	ea40 0407 	orr.w	r4, r0, r7
    3606:	9605      	str	r6, [sp, #20]
    3608:	ea8a 0ab0 	eor.w	sl, sl, r0, ror #2
    360c:	ea04 040e 	and.w	r4, r4, lr
    3610:	ea00 0607 	and.w	r6, r0, r7
    3614:	ea8a 5ab0 	eor.w	sl, sl, r0, ror #22
    3618:	4334      	orrs	r4, r6
    361a:	4454      	add	r4, sl
    for( i = 0; i < 64; i++ )
    361c:	f109 0901 	add.w	r9, r9, #1
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3620:	f8dd a010 	ldr.w	sl, [sp, #16]
    for( i = 0; i < 64; i++ )
    3624:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3628:	449a      	add	sl, r3
    for( i = 0; i < 64; i++ )
    362a:	f102 0204 	add.w	r2, r2, #4
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    362e:	4423      	add	r3, r4
    for( i = 0; i < 64; i++ )
    3630:	f101 0104 	add.w	r1, r1, #4
    3634:	f8cd c008 	str.w	ip, [sp, #8]
    3638:	f8cd e010 	str.w	lr, [sp, #16]
    363c:	d11e      	bne.n	367c <mbedtls_internal_sha256_process+0x104>
    363e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    3642:	e9cd 8c4e 	strd	r8, ip, [sp, #312]	; 0x138
    3646:	e9cd a54c 	strd	sl, r5, [sp, #304]	; 0x130
    364a:	e9cd 7e4a 	strd	r7, lr, [sp, #296]	; 0x128
    364e:	e9cd 3048 	strd	r3, r0, [sp, #288]	; 0x120
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += local.A[i];
    3652:	9a01      	ldr	r2, [sp, #4]
    3654:	f852 3f04 	ldr.w	r3, [r2, #4]!
    3658:	9201      	str	r2, [sp, #4]
    365a:	f85b 2f04 	ldr.w	r2, [fp, #4]!
    365e:	4413      	add	r3, r2
    3660:	9a01      	ldr	r2, [sp, #4]
    3662:	6013      	str	r3, [r2, #0]
    for( i = 0; i < 8; i++ )
    3664:	9b03      	ldr	r3, [sp, #12]
    3666:	4293      	cmp	r3, r2
    3668:	d1f3      	bne.n	3652 <mbedtls_internal_sha256_process+0xda>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    366a:	a806      	add	r0, sp, #24
    366c:	f44f 7194 	mov.w	r1, #296	; 0x128
    3670:	f000 fef8 	bl	4464 <mbedtls_platform_zeroize>

    return( 0 );
}
    3674:	2000      	movs	r0, #0
    3676:	b051      	add	sp, #324	; 0x144
    3678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    367c:	46be      	mov	lr, r7
    367e:	46c4      	mov	ip, r8
    3680:	4607      	mov	r7, r0
    3682:	46a8      	mov	r8, r5
        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3684:	4618      	mov	r0, r3
    3686:	4655      	mov	r5, sl
    3688:	e798      	b.n	35bc <mbedtls_internal_sha256_process+0x44>
            R( i );
    368a:	6813      	ldr	r3, [r2, #0]
    368c:	f852 4c38 	ldr.w	r4, [r2, #-56]
    3690:	ea4f 4af3 	mov.w	sl, r3, ror #19
    3694:	ea8a 4a73 	eor.w	sl, sl, r3, ror #17
    3698:	ea8a 2a93 	eor.w	sl, sl, r3, lsr #10
    369c:	f852 3c14 	ldr.w	r3, [r2, #-20]
    36a0:	f852 6c34 	ldr.w	r6, [r2, #-52]
    36a4:	4423      	add	r3, r4
    36a6:	f852 4c34 	ldr.w	r4, [r2, #-52]
    36aa:	4453      	add	r3, sl
    36ac:	ea4f 44b4 	mov.w	r4, r4, ror #18
    36b0:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
    36b4:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
    36b8:	4423      	add	r3, r4
    36ba:	e78c      	b.n	35d6 <mbedtls_internal_sha256_process+0x5e>
    36bc:	000070f4 	.word	0x000070f4

000036c0 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    36c0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    36c4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    36c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    36cc:	2a07      	cmp	r2, #7
    36ce:	d105      	bne.n	36dc <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    36d0:	3b02      	subs	r3, #2
    36d2:	2b03      	cmp	r3, #3
    36d4:	d802      	bhi.n	36dc <nrf53_errata_42+0x1c>
    36d6:	4a02      	ldr	r2, [pc, #8]	; (36e0 <nrf53_errata_42+0x20>)
    36d8:	5cd0      	ldrb	r0, [r2, r3]
    36da:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    36dc:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    36de:	4770      	bx	lr
    36e0:	00007488 	.word	0x00007488

000036e4 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    36e4:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    36e6:	f7ff ffeb 	bl	36c0 <nrf53_errata_42>
    36ea:	b158      	cbz	r0, 3704 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    36ec:	4b64      	ldr	r3, [pc, #400]	; (3880 <SystemInit+0x19c>)
    36ee:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    36f2:	b93a      	cbnz	r2, 3704 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    36f4:	210d      	movs	r1, #13
    36f6:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    36fa:	2101      	movs	r1, #1
    36fc:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    3700:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    3704:	2200      	movs	r2, #0
    3706:	00d3      	lsls	r3, r2, #3
    3708:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    370c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3710:	3101      	adds	r1, #1
    3712:	d007      	beq.n	3724 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3714:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3718:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    371a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    371e:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    3720:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3722:	d1f0      	bne.n	3706 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    3724:	f7ff ffcc 	bl	36c0 <nrf53_errata_42>
    3728:	2800      	cmp	r0, #0
    372a:	f040 80a0 	bne.w	386e <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    372e:	f7ff ffc7 	bl	36c0 <nrf53_errata_42>
    3732:	b140      	cbz	r0, 3746 <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    3734:	4b53      	ldr	r3, [pc, #332]	; (3884 <SystemInit+0x1a0>)
    3736:	4a54      	ldr	r2, [pc, #336]	; (3888 <SystemInit+0x1a4>)
    3738:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    373c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3740:	2201      	movs	r2, #1
    3742:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3746:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    374a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    374e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    3752:	2a07      	cmp	r2, #7
    3754:	d109      	bne.n	376a <SystemInit+0x86>
                {
                    switch(var2)
    3756:	3b02      	subs	r3, #2
    3758:	2b03      	cmp	r3, #3
    375a:	d806      	bhi.n	376a <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    375c:	4a4b      	ldr	r2, [pc, #300]	; (388c <SystemInit+0x1a8>)
    375e:	5cd3      	ldrb	r3, [r2, r3]
    3760:	b11b      	cbz	r3, 376a <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    3762:	2200      	movs	r2, #0
    3764:	4b4a      	ldr	r3, [pc, #296]	; (3890 <SystemInit+0x1ac>)
    3766:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    376a:	f7ff ffa9 	bl	36c0 <nrf53_errata_42>
    376e:	b150      	cbz	r0, 3786 <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    3770:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3774:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3778:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    377a:	bf42      	ittt	mi
    377c:	2200      	movmi	r2, #0
    377e:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    3782:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3786:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    378a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    378e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    3792:	2a07      	cmp	r2, #7
    3794:	d109      	bne.n	37aa <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    3796:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    379a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    379e:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    37a0:	bf44      	itt	mi
    37a2:	f06f 0201 	mvnmi.w	r2, #1
    37a6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    37aa:	f7ff ff89 	bl	36c0 <nrf53_errata_42>
    37ae:	b118      	cbz	r0, 37b8 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    37b0:	2265      	movs	r2, #101	; 0x65
    37b2:	4b33      	ldr	r3, [pc, #204]	; (3880 <SystemInit+0x19c>)
    37b4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    37b8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    37bc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    37c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    37c4:	2a07      	cmp	r2, #7
    37c6:	d116      	bne.n	37f6 <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    37c8:	4b31      	ldr	r3, [pc, #196]	; (3890 <SystemInit+0x1ac>)
    37ca:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    37ce:	2b00      	cmp	r3, #0
    37d0:	da11      	bge.n	37f6 <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    37d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    37d6:	2203      	movs	r2, #3
    37d8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    37dc:	2201      	movs	r2, #1
    37de:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    37e0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    37e4:	2a00      	cmp	r2, #0
    37e6:	d0fb      	beq.n	37e0 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    37e8:	2200      	movs	r2, #0
    37ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    37ee:	2201      	movs	r2, #1
    37f0:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    37f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    37f6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    37fa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    37fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    3802:	2a07      	cmp	r2, #7
    3804:	d123      	bne.n	384e <SystemInit+0x16a>
                {
                    switch(var2)
    3806:	3b02      	subs	r3, #2
    3808:	2b03      	cmp	r3, #3
    380a:	d802      	bhi.n	3812 <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    380c:	4a21      	ldr	r2, [pc, #132]	; (3894 <SystemInit+0x1b0>)
    380e:	5cd3      	ldrb	r3, [r2, r3]
    3810:	b1eb      	cbz	r3, 384e <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    3812:	227e      	movs	r2, #126	; 0x7e
    3814:	4b1a      	ldr	r3, [pc, #104]	; (3880 <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    3816:	491b      	ldr	r1, [pc, #108]	; (3884 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    3818:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    381c:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    3820:	237f      	movs	r3, #127	; 0x7f
    3822:	4a1d      	ldr	r2, [pc, #116]	; (3898 <SystemInit+0x1b4>)
    3824:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    3828:	2300      	movs	r3, #0
    382a:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    382e:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    3832:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    3836:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    383a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    383e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    3842:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    3846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    384a:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    384e:	4a13      	ldr	r2, [pc, #76]	; (389c <SystemInit+0x1b8>)
    3850:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    3854:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3858:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    385c:	4a10      	ldr	r2, [pc, #64]	; (38a0 <SystemInit+0x1bc>)
    385e:	4b11      	ldr	r3, [pc, #68]	; (38a4 <SystemInit+0x1c0>)
    3860:	6811      	ldr	r1, [r2, #0]
    3862:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    3866:	69d2      	ldr	r2, [r2, #28]
    3868:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    386c:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    386e:	2229      	movs	r2, #41	; 0x29
    3870:	4b03      	ldr	r3, [pc, #12]	; (3880 <SystemInit+0x19c>)
    3872:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    3876:	2203      	movs	r2, #3
    3878:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    387c:	e757      	b.n	372e <SystemInit+0x4a>
    387e:	bf00      	nop
    3880:	50004000 	.word	0x50004000
    3884:	50039000 	.word	0x50039000
    3888:	beef0044 	.word	0xbeef0044
    388c:	00007484 	.word	0x00007484
    3890:	50032000 	.word	0x50032000
    3894:	00007480 	.word	0x00007480
    3898:	50002000 	.word	0x50002000
    389c:	e000ed00 	.word	0xe000ed00
    38a0:	00ff8000 	.word	0x00ff8000
    38a4:	50006000 	.word	0x50006000

000038a8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    38a8:	4b04      	ldr	r3, [pc, #16]	; (38bc <nrfx_clock_init+0x14>)
    38aa:	791a      	ldrb	r2, [r3, #4]
    38ac:	b922      	cbnz	r2, 38b8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    38ae:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    38b0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    38b2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    38b4:	4802      	ldr	r0, [pc, #8]	; (38c0 <nrfx_clock_init+0x18>)
    38b6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    38b8:	4802      	ldr	r0, [pc, #8]	; (38c4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    38ba:	4770      	bx	lr
    38bc:	2000469c 	.word	0x2000469c
    38c0:	0bad0000 	.word	0x0bad0000
    38c4:	0bad000c 	.word	0x0bad000c

000038c8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38c8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    38cc:	b510      	push	{r4, lr}
    38ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    38d2:	b152      	cbz	r2, 38ea <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38d4:	2000      	movs	r0, #0
    38d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    38da:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    38de:	2201      	movs	r2, #1
    38e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    38e4:	4b23      	ldr	r3, [pc, #140]	; (3974 <nrfx_power_clock_irq_handler+0xac>)
    38e6:	681b      	ldr	r3, [r3, #0]
    38e8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    38ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    38f2:	b18a      	cbz	r2, 3918 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38f4:	2200      	movs	r2, #0
    38f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    38fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    38fe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3902:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3906:	f002 0203 	and.w	r2, r2, #3
    390a:	2a01      	cmp	r2, #1
    390c:	f04f 0102 	mov.w	r1, #2
    3910:	d128      	bne.n	3964 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3912:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3916:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3918:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    391c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    3920:	b162      	cbz	r2, 393c <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3922:	2200      	movs	r2, #0
    3924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3928:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    392c:	f44f 7280 	mov.w	r2, #256	; 0x100
    3930:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    3934:	4b0f      	ldr	r3, [pc, #60]	; (3974 <nrfx_power_clock_irq_handler+0xac>)
    3936:	2004      	movs	r0, #4
    3938:	681b      	ldr	r3, [r3, #0]
    393a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    393c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3940:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    3944:	b1aa      	cbz	r2, 3972 <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3946:	2200      	movs	r2, #0
    3948:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    394c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    3950:	f44f 7200 	mov.w	r2, #512	; 0x200
    3954:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    3958:	4b06      	ldr	r3, [pc, #24]	; (3974 <nrfx_power_clock_irq_handler+0xac>)
    395a:	2005      	movs	r0, #5
    }
#endif
}
    395c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    3960:	681b      	ldr	r3, [r3, #0]
    3962:	4718      	bx	r3
    3964:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3968:	4b02      	ldr	r3, [pc, #8]	; (3974 <nrfx_power_clock_irq_handler+0xac>)
    396a:	2001      	movs	r0, #1
    396c:	681b      	ldr	r3, [r3, #0]
    396e:	4798      	blx	r3
    3970:	e7d2      	b.n	3918 <nrfx_power_clock_irq_handler+0x50>
}
    3972:	bd10      	pop	{r4, pc}
    3974:	2000469c 	.word	0x2000469c

00003978 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    3978:	2200      	movs	r2, #0
    397a:	4b03      	ldr	r3, [pc, #12]	; (3988 <nvmc_readonly_mode_set+0x10>)
    397c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    3984:	4770      	bx	lr
    3986:	bf00      	nop
    3988:	50039000 	.word	0x50039000

0000398c <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    398c:	4a04      	ldr	r2, [pc, #16]	; (39a0 <nvmc_word_write+0x14>)
    398e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3992:	07db      	lsls	r3, r3, #31
    3994:	d5fb      	bpl.n	398e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    3996:	6001      	str	r1, [r0, #0]
    3998:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    399c:	4770      	bx	lr
    399e:	bf00      	nop
    39a0:	50039000 	.word	0x50039000

000039a4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    39a4:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    39a6:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    39aa:	b983      	cbnz	r3, 39ce <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    39ac:	2202      	movs	r2, #2
    39ae:	4b09      	ldr	r3, [pc, #36]	; (39d4 <nrfx_nvmc_page_erase+0x30>)
    39b0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    39b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF53_SERIES) || defined(NRF91_SERIES)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    39b8:	f04f 32ff 	mov.w	r2, #4294967295
    39bc:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    39be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    39c2:	07d2      	lsls	r2, r2, #31
    39c4:	d5fb      	bpl.n	39be <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    39c6:	f7ff ffd7 	bl	3978 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    39ca:	4803      	ldr	r0, [pc, #12]	; (39d8 <nrfx_nvmc_page_erase+0x34>)
}
    39cc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    39ce:	4803      	ldr	r0, [pc, #12]	; (39dc <nrfx_nvmc_page_erase+0x38>)
    39d0:	e7fc      	b.n	39cc <nrfx_nvmc_page_erase+0x28>
    39d2:	bf00      	nop
    39d4:	50039000 	.word	0x50039000
    39d8:	0bad0000 	.word	0x0bad0000
    39dc:	0bad000a 	.word	0x0bad000a

000039e0 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    39e0:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    39e2:	b508      	push	{r3, lr}
    39e4:	4b05      	ldr	r3, [pc, #20]	; (39fc <nrfx_nvmc_word_write+0x1c>)
    39e6:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    39ea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    39ee:	f7ff ffcd 	bl	398c <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    39f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    39f6:	f7ff bfbf 	b.w	3978 <nvmc_readonly_mode_set>
    39fa:	bf00      	nop
    39fc:	50039000 	.word	0x50039000

00003a00 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
    3a00:	b570      	push	{r4, r5, r6, lr}
    3a02:	f000 4460 	and.w	r4, r0, #3758096384	; 0xe0000000
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
    NRFX_ASSERT(p_buffer != NULL);

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
    3a06:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    3a0a:	d168      	bne.n	3ade <qspi_xfer+0xde>
    3a0c:	0784      	lsls	r4, r0, #30
    3a0e:	d166      	bne.n	3ade <qspi_xfer+0xde>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
    3a10:	4d35      	ldr	r5, [pc, #212]	; (3ae8 <qspi_xfer+0xe8>)
    3a12:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
    3a16:	2c01      	cmp	r4, #1
    3a18:	d001      	beq.n	3a1e <qspi_xfer+0x1e>
    3a1a:	429c      	cmp	r4, r3
    3a1c:	d161      	bne.n	3ae2 <qspi_xfer+0xe2>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
    3a1e:	682c      	ldr	r4, [r5, #0]
    3a20:	bb04      	cbnz	r4, 3a64 <qspi_xfer+0x64>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    3a22:	2b02      	cmp	r3, #2
    3a24:	4b31      	ldr	r3, [pc, #196]	; (3aec <qspi_xfer+0xec>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
    3a26:	bf0b      	itete	eq
    3a28:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
    3a2c:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    3a30:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    3a34:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    3a38:	bf0b      	itete	eq
    3a3a:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
    3a3e:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
    3a42:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
    3a44:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a46:	2100      	movs	r1, #0
    3a48:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a4c:	f102 43a0 	add.w	r3, r2, #1342177280	; 0x50000000
    3a50:	2201      	movs	r2, #1
    3a52:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    3a56:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a58:	4a24      	ldr	r2, [pc, #144]	; (3aec <qspi_xfer+0xec>)
    3a5a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d0fb      	beq.n	3a5a <qspi_xfer+0x5a>
    3a62:	e00d      	b.n	3a80 <qspi_xfer+0x80>
        if (m_cb.p_buffer_primary)
    3a64:	68ae      	ldr	r6, [r5, #8]
    3a66:	4c21      	ldr	r4, [pc, #132]	; (3aec <qspi_xfer+0xec>)
    3a68:	b166      	cbz	r6, 3a84 <qspi_xfer+0x84>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    3a6a:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
    3a6c:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
    3a6e:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
    3a70:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    3a72:	d12d      	bne.n	3ad0 <qspi_xfer+0xd0>
    p_reg->WRITE.DST = dest_addr;
    3a74:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    3a78:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
    3a7c:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
    3a80:	481b      	ldr	r0, [pc, #108]	; (3af0 <qspi_xfer+0xf0>)
}
    3a82:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
    3a84:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
    3a86:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            m_cb.size_primary     = length;
    3a8a:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
    3a8c:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
    3a8e:	60a8      	str	r0, [r5, #8]
    p_reg->WRITE.DST = dest_addr;
    3a90:	bf0c      	ite	eq
    3a92:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
    3a96:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a9a:	f04f 0200 	mov.w	r2, #0
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
    3a9e:	bf0b      	itete	eq
    3aa0:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
    3aa4:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
    3aa8:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
    3aac:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
        task = NRF_QSPI_TASK_WRITESTART;
    3ab0:	bf08      	it	eq
    3ab2:	2308      	moveq	r3, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ab4:	490d      	ldr	r1, [pc, #52]	; (3aec <qspi_xfer+0xec>)
        task = NRF_QSPI_TASK_READSTART;
    3ab6:	bf18      	it	ne
    3ab8:	2304      	movne	r3, #4
    3aba:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
    3abe:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ac0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3ac4:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
    p_reg->INTENSET = mask;
    3ac8:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3acc:	601a      	str	r2, [r3, #0]
}
    3ace:	e7d7      	b.n	3a80 <qspi_xfer+0x80>
    p_reg->READ.SRC = src_addr;
    3ad0:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
    3ad4:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
    3ad8:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
    3adc:	e7d0      	b.n	3a80 <qspi_xfer+0x80>
        return NRFX_ERROR_INVALID_ADDR;
    3ade:	4805      	ldr	r0, [pc, #20]	; (3af4 <qspi_xfer+0xf4>)
    3ae0:	e7cf      	b.n	3a82 <qspi_xfer+0x82>
        return NRFX_ERROR_BUSY;
    3ae2:	4805      	ldr	r0, [pc, #20]	; (3af8 <qspi_xfer+0xf8>)
    3ae4:	e7cd      	b.n	3a82 <qspi_xfer+0x82>
    3ae6:	bf00      	nop
    3ae8:	200046a4 	.word	0x200046a4
    3aec:	5002b000 	.word	0x5002b000
    3af0:	0bad0000 	.word	0x0bad0000
    3af4:	0bad000a 	.word	0x0bad000a
    3af8:	0bad000b 	.word	0x0bad000b

00003afc <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
    3afc:	b538      	push	{r3, r4, r5, lr}
    3afe:	f24c 3450 	movw	r4, #50000	; 0xc350
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3b02:	4d06      	ldr	r5, [pc, #24]	; (3b1c <qspi_ready_wait+0x20>)
    3b04:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
    3b08:	b933      	cbnz	r3, 3b18 <qspi_ready_wait+0x1c>
    3b0a:	200a      	movs	r0, #10
    3b0c:	f002 fe9d 	bl	684a <nrfx_busy_wait>
    3b10:	3c01      	subs	r4, #1
    3b12:	d1f7      	bne.n	3b04 <qspi_ready_wait+0x8>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
    3b14:	4802      	ldr	r0, [pc, #8]	; (3b20 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
    3b16:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
    3b18:	4802      	ldr	r0, [pc, #8]	; (3b24 <qspi_ready_wait+0x28>)
    3b1a:	e7fc      	b.n	3b16 <qspi_ready_wait+0x1a>
    3b1c:	5002b000 	.word	0x5002b000
    3b20:	0bad0007 	.word	0x0bad0007
    3b24:	0bad0000 	.word	0x0bad0000

00003b28 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
    3b28:	4b08      	ldr	r3, [pc, #32]	; (3b4c <qspi_event_xfer_handle.constprop.0+0x24>)
    3b2a:	689a      	ldr	r2, [r3, #8]
    3b2c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
    3b2e:	691a      	ldr	r2, [r3, #16]
    3b30:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
    3b32:	699a      	ldr	r2, [r3, #24]
    3b34:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
    3b36:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
    3b38:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
    3b3a:	b132      	cbz	r2, 3b4a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
    3b3c:	695a      	ldr	r2, [r3, #20]
    3b3e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
    3b40:	69da      	ldr	r2, [r3, #28]
    3b42:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
    3b44:	2200      	movs	r2, #0
    3b46:	60da      	str	r2, [r3, #12]
    3b48:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
    3b4a:	4770      	bx	lr
    3b4c:	200046a4 	.word	0x200046a4

00003b50 <nrf_gpio_cfg.constprop.0>:
NRF_STATIC_INLINE void nrf_gpio_cfg(
    3b50:	b510      	push	{r4, lr}
        case 0: return NRF_P0;
    3b52:	4a0a      	ldr	r2, [pc, #40]	; (3b7c <nrf_gpio_cfg.constprop.0+0x2c>)
    3b54:	4c0a      	ldr	r4, [pc, #40]	; (3b80 <nrf_gpio_cfg.constprop.0+0x30>)
    *p_pin = pin_number & 0x1F;
    3b56:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    3b5a:	0940      	lsrs	r0, r0, #5
        case 0: return NRF_P0;
    3b5c:	2801      	cmp	r0, #1
    3b5e:	bf18      	it	ne
    3b60:	4622      	movne	r2, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3b62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3b66:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    3b6a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    3b6e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3b72:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    3b76:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    3b7a:	bd10      	pop	{r4, pc}
    3b7c:	50842800 	.word	0x50842800
    3b80:	50842500 	.word	0x50842500

00003b84 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
    3b84:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
    3b86:	4b0e      	ldr	r3, [pc, #56]	; (3bc0 <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
    3b88:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
    3b8a:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
    3b8e:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
    3b92:	2807      	cmp	r0, #7
    3b94:	d813      	bhi.n	3bbe <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
    3b96:	e8df f000 	tbb	[pc, r0]
    3b9a:	0f11      	.short	0x0f11
    3b9c:	080a0b0d 	.word	0x080a0b0d
    3ba0:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
    3ba2:	0e10      	lsrs	r0, r2, #24
    3ba4:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
    3ba6:	0c10      	lsrs	r0, r2, #16
    3ba8:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
    3baa:	0a10      	lsrs	r0, r2, #8
    3bac:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
    3bae:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
    3bb0:	0e1a      	lsrs	r2, r3, #24
    3bb2:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
    3bb4:	0c1a      	lsrs	r2, r3, #16
    3bb6:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
    3bb8:	0a1a      	lsrs	r2, r3, #8
    3bba:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
    3bbc:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
    3bbe:	bd10      	pop	{r4, pc}
    3bc0:	5002b000 	.word	0x5002b000

00003bc4 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
    3bc4:	3802      	subs	r0, #2
    3bc6:	2807      	cmp	r0, #7
    3bc8:	d81f      	bhi.n	3c0a <nrf_qspi_cinstrdata_set.constprop.0+0x46>
    3bca:	e8df f000 	tbb	[pc, r0]
    3bce:	2729      	.short	0x2729
    3bd0:	21231125 	.word	0x21231125
    3bd4:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
    3bd6:	79cb      	ldrb	r3, [r1, #7]
    3bd8:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
    3bda:	798a      	ldrb	r2, [r1, #6]
    3bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
    3be0:	794a      	ldrb	r2, [r1, #5]
    3be2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
    3be6:	790a      	ldrb	r2, [r1, #4]
    3be8:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
    3bea:	4a0e      	ldr	r2, [pc, #56]	; (3c24 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    3bec:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
    3bf0:	78cb      	ldrb	r3, [r1, #3]
    3bf2:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
    3bf4:	788a      	ldrb	r2, [r1, #2]
    3bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
    3bfa:	784a      	ldrb	r2, [r1, #1]
    3bfc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
    3c00:	780a      	ldrb	r2, [r1, #0]
    3c02:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
    3c04:	4a07      	ldr	r2, [pc, #28]	; (3c24 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
    3c06:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
    3c0a:	4770      	bx	lr
    switch (length)
    3c0c:	2300      	movs	r3, #0
    3c0e:	e7e4      	b.n	3bda <nrf_qspi_cinstrdata_set.constprop.0+0x16>
    3c10:	2300      	movs	r3, #0
    3c12:	e7e5      	b.n	3be0 <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
    3c14:	2300      	movs	r3, #0
    3c16:	e7e6      	b.n	3be6 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
    3c18:	2300      	movs	r3, #0
    3c1a:	e7eb      	b.n	3bf4 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
    3c1c:	2300      	movs	r3, #0
    3c1e:	e7ec      	b.n	3bfa <nrf_qspi_cinstrdata_set.constprop.0+0x36>
    3c20:	2300      	movs	r3, #0
    3c22:	e7ed      	b.n	3c00 <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
    3c24:	5002b000 	.word	0x5002b000

00003c28 <nrfx_qspi_init>:
{
    3c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    3c2c:	4d6d      	ldr	r5, [pc, #436]	; (3de4 <nrfx_qspi_init+0x1bc>)
{
    3c2e:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    3c30:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
    3c34:	460e      	mov	r6, r1
    3c36:	4617      	mov	r7, r2
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
    3c38:	2b00      	cmp	r3, #0
    3c3a:	f040 80ce 	bne.w	3dda <nrfx_qspi_init+0x1b2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    3c3e:	7cc2      	ldrb	r2, [r0, #19]
    3c40:	b112      	cbz	r2, 3c48 <nrfx_qspi_init+0x20>
    3c42:	7d03      	ldrb	r3, [r0, #20]
    3c44:	2b00      	cmp	r3, #0
    3c46:	d16c      	bne.n	3d22 <nrfx_qspi_init+0xfa>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    3c48:	7920      	ldrb	r0, [r4, #4]
    3c4a:	28ff      	cmp	r0, #255	; 0xff
    3c4c:	f000 80c8 	beq.w	3de0 <nrfx_qspi_init+0x1b8>
    3c50:	7963      	ldrb	r3, [r4, #5]
    3c52:	2bff      	cmp	r3, #255	; 0xff
    3c54:	f000 80c4 	beq.w	3de0 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    3c58:	79a3      	ldrb	r3, [r4, #6]
    3c5a:	2bff      	cmp	r3, #255	; 0xff
    3c5c:	f000 80c0 	beq.w	3de0 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
    3c60:	79e1      	ldrb	r1, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
    3c62:	29ff      	cmp	r1, #255	; 0xff
    3c64:	f000 80bc 	beq.w	3de0 <nrfx_qspi_init+0x1b8>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    3c68:	6863      	ldr	r3, [r4, #4]
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    3c6a:	f8df c17c 	ldr.w	ip, [pc, #380]	; 3de8 <nrfx_qspi_init+0x1c0>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
    3c6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
    3c72:	4563      	cmp	r3, ip
    3c74:	f040 80b4 	bne.w	3de0 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
    3c78:	290e      	cmp	r1, #14
    3c7a:	f040 80b1 	bne.w	3de0 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    3c7e:	7a23      	ldrb	r3, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
    3c80:	2bff      	cmp	r3, #255	; 0xff
    3c82:	d002      	beq.n	3c8a <nrfx_qspi_init+0x62>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    3c84:	2b0f      	cmp	r3, #15
    3c86:	f040 80ab 	bne.w	3de0 <nrfx_qspi_init+0x1b8>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    3c8a:	7a63      	ldrb	r3, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
    3c8c:	2bff      	cmp	r3, #255	; 0xff
    3c8e:	d002      	beq.n	3c96 <nrfx_qspi_init+0x6e>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
    3c90:	2b10      	cmp	r3, #16
    3c92:	f040 80a5 	bne.w	3de0 <nrfx_qspi_init+0x1b8>
    if (!p_config->skip_gpio_cfg)
    3c96:	b9b2      	cbnz	r2, 3cc6 <nrfx_qspi_init+0x9e>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
    3c98:	2103      	movs	r1, #3
    3c9a:	f7ff ff59 	bl	3b50 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.csn_pin);
    3c9e:	7960      	ldrb	r0, [r4, #5]
    3ca0:	f7ff ff56 	bl	3b50 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io0_pin);
    3ca4:	79a0      	ldrb	r0, [r4, #6]
    3ca6:	f7ff ff53 	bl	3b50 <nrf_gpio_cfg.constprop.0>
        QSPI_PIN_INIT(p_config->pins.io1_pin);
    3caa:	79e0      	ldrb	r0, [r4, #7]
    3cac:	f7ff ff50 	bl	3b50 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    3cb0:	7a20      	ldrb	r0, [r4, #8]
    3cb2:	28ff      	cmp	r0, #255	; 0xff
    3cb4:	d001      	beq.n	3cba <nrfx_qspi_init+0x92>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
    3cb6:	f7ff ff4b 	bl	3b50 <nrf_gpio_cfg.constprop.0>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    3cba:	7a60      	ldrb	r0, [r4, #9]
    3cbc:	28ff      	cmp	r0, #255	; 0xff
    3cbe:	d002      	beq.n	3cc6 <nrfx_qspi_init+0x9e>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
    3cc0:	2103      	movs	r1, #3
    3cc2:	f7ff ff45 	bl	3b50 <nrf_gpio_cfg.constprop.0>
    if (!p_config->skip_psel_cfg)
    3cc6:	7d23      	ldrb	r3, [r4, #20]
    3cc8:	bb5b      	cbnz	r3, 3d22 <nrfx_qspi_init+0xfa>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
    3cca:	7923      	ldrb	r3, [r4, #4]
    3ccc:	2bff      	cmp	r3, #255	; 0xff
    3cce:	bf14      	ite	ne
    3cd0:	461a      	movne	r2, r3
    3cd2:	f04f 32ff 	moveq.w	r2, #4294967295
    3cd6:	4b45      	ldr	r3, [pc, #276]	; (3dec <nrfx_qspi_init+0x1c4>)
    3cd8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
    3cdc:	7962      	ldrb	r2, [r4, #5]
    3cde:	2aff      	cmp	r2, #255	; 0xff
    3ce0:	bf08      	it	eq
    3ce2:	f04f 32ff 	moveq.w	r2, #4294967295
    3ce6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
    3cea:	79a2      	ldrb	r2, [r4, #6]
    3cec:	2aff      	cmp	r2, #255	; 0xff
    3cee:	bf08      	it	eq
    3cf0:	f04f 32ff 	moveq.w	r2, #4294967295
    3cf4:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
    3cf8:	79e2      	ldrb	r2, [r4, #7]
    3cfa:	2aff      	cmp	r2, #255	; 0xff
    3cfc:	bf08      	it	eq
    3cfe:	f04f 32ff 	moveq.w	r2, #4294967295
    3d02:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
    3d06:	7a22      	ldrb	r2, [r4, #8]
    3d08:	2aff      	cmp	r2, #255	; 0xff
    3d0a:	bf08      	it	eq
    3d0c:	f04f 32ff 	moveq.w	r2, #4294967295
    3d10:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
    3d14:	7a62      	ldrb	r2, [r4, #9]
    3d16:	2aff      	cmp	r2, #255	; 0xff
    3d18:	bf08      	it	eq
    3d1a:	f04f 32ff 	moveq.w	r2, #4294967295
    3d1e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->INTENCLR = mask;
    3d22:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d24:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3d26:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3dec <nrfx_qspi_init+0x1c4>
    3d2a:	f8c8 3308 	str.w	r3, [r8, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d2e:	f8c8 2100 	str.w	r2, [r8, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d32:	f8c8 3000 	str.w	r3, [r8]
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    3d36:	f7ff fee1 	bl	3afc <qspi_ready_wait>
    3d3a:	4b2d      	ldr	r3, [pc, #180]	; (3df0 <nrfx_qspi_init+0x1c8>)
    3d3c:	4298      	cmp	r0, r3
    3d3e:	d04d      	beq.n	3ddc <nrfx_qspi_init+0x1b4>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
    3d40:	6823      	ldr	r3, [r4, #0]
    p_reg->XIPOFFSET = xip_offset;
    3d42:	f8c8 3540 	str.w	r3, [r8, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    3d46:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
    3d48:	7ae1      	ldrb	r1, [r4, #11]
    uint32_t config = p_config->readoc;
    3d4a:	7aa2      	ldrb	r2, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
    3d4c:	019b      	lsls	r3, r3, #6
    3d4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    3d52:	4313      	orrs	r3, r2
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
    3d54:	7b62      	ldrb	r2, [r4, #13]
    3d56:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
    p_reg->IFCONFIG0 = config;
    3d5a:	f8c8 3544 	str.w	r3, [r8, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
    3d5e:	7c62      	ldrb	r2, [r4, #17]
    return p_reg->IFCONFIG0;
    3d60:	f8d8 3544 	ldr.w	r3, [r8, #1348]	; 0x544
    3d64:	bba2      	cbnz	r2, 3dd0 <nrfx_qspi_init+0x1a8>
        regval |= ((1 << 16) | (1 << 17));
    3d66:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
    3d6a:	4920      	ldr	r1, [pc, #128]	; (3dec <nrfx_qspi_init+0x1c4>)
    3d6c:	f8c1 3544 	str.w	r3, [r1, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
    3d70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    3d74:	f8c1 3640 	str.w	r3, [r1, #1600]	; 0x640
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    3d78:	f8d1 2600 	ldr.w	r2, [r1, #1536]	; 0x600
    config |= p_config->sck_delay;
    3d7c:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
    3d7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    config |= p_config->sck_delay;
    3d86:	4313      	orrs	r3, r2
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
    3d88:	7be2      	ldrb	r2, [r4, #15]
    3d8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
    3d8e:	7c22      	ldrb	r2, [r4, #16]
    3d90:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
    3d94:	7c62      	ldrb	r2, [r4, #17]
    3d96:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
    3d9a:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    3d9e:	7ce3      	ldrb	r3, [r4, #19]
    m_cb.p_context = p_context;
    3da0:	e9c5 6700 	strd	r6, r7, [r5]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
    3da4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    if (handler)
    3da8:	b116      	cbz	r6, 3db0 <nrfx_qspi_init+0x188>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
    3daa:	202b      	movs	r0, #43	; 0x2b
    3dac:	f7fd fc24 	bl	15f8 <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
    3db0:	2100      	movs	r1, #0
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    3db2:	2201      	movs	r2, #1
    m_cb.p_buffer_secondary = NULL;
    3db4:	e9c5 1102 	strd	r1, r1, [r5, #8]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
    3db8:	4b0c      	ldr	r3, [pc, #48]	; (3dec <nrfx_qspi_init+0x1c4>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
    3dba:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
    3dbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3dc2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dc6:	601a      	str	r2, [r3, #0]
}
    3dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
    3dcc:	f7ff be96 	b.w	3afc <qspi_ready_wait>
        regval &= ~(1 << 17);
    3dd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
    3dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    3dd8:	e7c7      	b.n	3d6a <nrfx_qspi_init+0x142>
        return NRFX_ERROR_INVALID_STATE;
    3dda:	4806      	ldr	r0, [pc, #24]	; (3df4 <nrfx_qspi_init+0x1cc>)
}
    3ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3de0:	4805      	ldr	r0, [pc, #20]	; (3df8 <nrfx_qspi_init+0x1d0>)
    3de2:	e7fb      	b.n	3ddc <nrfx_qspi_init+0x1b4>
    3de4:	200046a4 	.word	0x200046a4
    3de8:	000d1211 	.word	0x000d1211
    3dec:	5002b000 	.word	0x5002b000
    3df0:	0bad0007 	.word	0x0bad0007
    3df4:	0bad0005 	.word	0x0bad0005
    3df8:	0bad0004 	.word	0x0bad0004

00003dfc <nrfx_qspi_cinstr_xfer>:
{
    3dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e00:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    3e02:	4a1f      	ldr	r2, [pc, #124]	; (3e80 <nrfx_qspi_cinstr_xfer+0x84>)
{
    3e04:	4604      	mov	r4, r0
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
    3e06:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3e0a:	2a01      	cmp	r2, #1
    3e0c:	d135      	bne.n	3e7a <nrfx_qspi_cinstr_xfer+0x7e>
    if (p_tx_buffer)
    3e0e:	b111      	cbz	r1, 3e16 <nrfx_qspi_cinstr_xfer+0x1a>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
    3e10:	7840      	ldrb	r0, [r0, #1]
    3e12:	f7ff fed7 	bl	3bc4 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
    3e16:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e18:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
    3e1a:	4e1a      	ldr	r6, [pc, #104]	; (3e84 <nrfx_qspi_cinstr_xfer+0x88>)
        if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    3e1c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 3e88 <nrfx_qspi_cinstr_xfer+0x8c>
    3e20:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e24:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e28:	6033      	str	r3, [r6, #0]
    3e2a:	f7ff fe67 	bl	3afc <qspi_ready_wait>
    3e2e:	4540      	cmp	r0, r8
    3e30:	d102      	bne.n	3e38 <nrfx_qspi_cinstr_xfer+0x3c>
            return NRFX_ERROR_TIMEOUT;
    3e32:	4815      	ldr	r0, [pc, #84]	; (3e88 <nrfx_qspi_cinstr_xfer+0x8c>)
}
    3e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e38:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    3e3c:	78a3      	ldrb	r3, [r4, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    3e3e:	7862      	ldrb	r2, [r4, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    3e40:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    3e42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    3e46:	7822      	ldrb	r2, [r4, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
    3e48:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    3e4a:	78e2      	ldrb	r2, [r4, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
    3e4c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    3e50:	7922      	ldrb	r2, [r4, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
    3e52:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
    3e56:	7962      	ldrb	r2, [r4, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
    3e58:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
    3e5c:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
    3e60:	f7ff fe4c 	bl	3afc <qspi_ready_wait>
    3e64:	4540      	cmp	r0, r8
    3e66:	d0e4      	beq.n	3e32 <nrfx_qspi_cinstr_xfer+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e68:	f8c6 7100 	str.w	r7, [r6, #256]	; 0x100
    if (p_rx_buffer)
    3e6c:	b11d      	cbz	r5, 3e76 <nrfx_qspi_cinstr_xfer+0x7a>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
    3e6e:	4629      	mov	r1, r5
    3e70:	7860      	ldrb	r0, [r4, #1]
    3e72:	f7ff fe87 	bl	3b84 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
    3e76:	4805      	ldr	r0, [pc, #20]	; (3e8c <nrfx_qspi_cinstr_xfer+0x90>)
    3e78:	e7dc      	b.n	3e34 <nrfx_qspi_cinstr_xfer+0x38>
        return NRFX_ERROR_BUSY;
    3e7a:	4805      	ldr	r0, [pc, #20]	; (3e90 <nrfx_qspi_cinstr_xfer+0x94>)
    3e7c:	e7da      	b.n	3e34 <nrfx_qspi_cinstr_xfer+0x38>
    3e7e:	bf00      	nop
    3e80:	200046a4 	.word	0x200046a4
    3e84:	5002b000 	.word	0x5002b000
    3e88:	0bad0007 	.word	0x0bad0007
    3e8c:	0bad0000 	.word	0x0bad0000
    3e90:	0bad000b 	.word	0x0bad000b

00003e94 <nrfx_qspi_mem_busy_check>:
{
    3e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t status_value = 0;
    3e96:	2300      	movs	r3, #0
    nrf_qspi_cinstr_conf_t const config = {
    3e98:	4a0c      	ldr	r2, [pc, #48]	; (3ecc <nrfx_qspi_mem_busy_check+0x38>)
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    3e9a:	a802      	add	r0, sp, #8
    nrf_qspi_cinstr_conf_t const config = {
    3e9c:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    3e9e:	f10d 0207 	add.w	r2, sp, #7
    3ea2:	4611      	mov	r1, r2
    uint8_t status_value = 0;
    3ea4:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
    3ea8:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
    3eac:	f7ff ffa6 	bl	3dfc <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
    3eb0:	4b07      	ldr	r3, [pc, #28]	; (3ed0 <nrfx_qspi_mem_busy_check+0x3c>)
    3eb2:	4298      	cmp	r0, r3
    3eb4:	d106      	bne.n	3ec4 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
    3eb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
    3eba:	f013 0f01 	tst.w	r3, #1
    3ebe:	4b05      	ldr	r3, [pc, #20]	; (3ed4 <nrfx_qspi_mem_busy_check+0x40>)
    3ec0:	bf18      	it	ne
    3ec2:	4618      	movne	r0, r3
}
    3ec4:	b005      	add	sp, #20
    3ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    3eca:	bf00      	nop
    3ecc:	01000205 	.word	0x01000205
    3ed0:	0bad0000 	.word	0x0bad0000
    3ed4:	0bad000b 	.word	0x0bad000b

00003ed8 <nrfx_qspi_uninit>:
{
    3ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_IRQ_DISABLE(QSPI_IRQn);
    3edc:	202b      	movs	r0, #43	; 0x2b
    3ede:	f7fd fb99 	bl	1614 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
    3ee2:	4b21      	ldr	r3, [pc, #132]	; (3f68 <nrfx_qspi_uninit+0x90>)
    if (!m_cb.skip_gpio_cfg)
    3ee4:	4e21      	ldr	r6, [pc, #132]	; (3f6c <nrfx_qspi_uninit+0x94>)
    3ee6:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
    3eea:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
    3eee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    p_reg->CINSTRCONF = mask;
    3ef2:	bf04      	itt	eq
    3ef4:	4a1e      	ldreq	r2, [pc, #120]	; (3f70 <nrfx_qspi_uninit+0x98>)
    3ef6:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
    p_reg->INTENCLR = mask;
    3efa:	2201      	movs	r2, #1
    3efc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f00:	611a      	str	r2, [r3, #16]
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
    3f02:	2200      	movs	r2, #0
    3f04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
    3f0c:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    3f10:	bb22      	cbnz	r2, 3f5c <nrfx_qspi_uninit+0x84>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
    3f12:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
    3f16:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    nrf_gpio_cfg_default(pins.sck_pin);
    3f1a:	b2c0      	uxtb	r0, r0
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
    3f1c:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
    3f20:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
    3f24:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
    3f28:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    3f2c:	f002 fdce 	bl	6acc <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
    3f30:	fa5f f089 	uxtb.w	r0, r9
    3f34:	f002 fdca 	bl	6acc <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
    3f38:	fa5f f088 	uxtb.w	r0, r8
    3f3c:	f002 fdc6 	bl	6acc <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
    3f40:	b2f8      	uxtb	r0, r7
    3f42:	f002 fdc3 	bl	6acc <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    3f46:	b2e8      	uxtb	r0, r5
    3f48:	28ff      	cmp	r0, #255	; 0xff
    3f4a:	b2e4      	uxtb	r4, r4
    3f4c:	d001      	beq.n	3f52 <nrfx_qspi_uninit+0x7a>
        nrf_gpio_cfg_default(pins.io2_pin);
    3f4e:	f002 fdbd 	bl	6acc <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
    3f52:	2cff      	cmp	r4, #255	; 0xff
    3f54:	d002      	beq.n	3f5c <nrfx_qspi_uninit+0x84>
        nrf_gpio_cfg_default(pins.io3_pin);
    3f56:	4620      	mov	r0, r4
    3f58:	f002 fdb8 	bl	6acc <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
    3f5c:	2300      	movs	r3, #0
    3f5e:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    3f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f66:	bf00      	nop
    3f68:	5002b000 	.word	0x5002b000
    3f6c:	200046a4 	.word	0x200046a4
    3f70:	00030100 	.word	0x00030100

00003f74 <nrfx_qspi_erase>:
    if (!nrfx_is_word_aligned((void const *)start_address))
    3f74:	078b      	lsls	r3, r1, #30
    3f76:	d121      	bne.n	3fbc <nrfx_qspi_erase+0x48>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
    3f78:	4a12      	ldr	r2, [pc, #72]	; (3fc4 <nrfx_qspi_erase+0x50>)
    3f7a:	6813      	ldr	r3, [r2, #0]
    3f7c:	b11b      	cbz	r3, 3f86 <nrfx_qspi_erase+0x12>
    3f7e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    3f82:	2b01      	cmp	r3, #1
    3f84:	d11c      	bne.n	3fc0 <nrfx_qspi_erase+0x4c>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
    3f86:	2304      	movs	r3, #4
    3f88:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
    3f8c:	4b0e      	ldr	r3, [pc, #56]	; (3fc8 <nrfx_qspi_erase+0x54>)
    3f8e:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f92:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
    3f94:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f98:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f9c:	2101      	movs	r1, #1
    3f9e:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
    3fa0:	6810      	ldr	r0, [r2, #0]
    3fa2:	b940      	cbnz	r0, 3fb6 <nrfx_qspi_erase+0x42>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fa4:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    3fa8:	2900      	cmp	r1, #0
    3faa:	d0fb      	beq.n	3fa4 <nrfx_qspi_erase+0x30>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
    3fac:	2301      	movs	r3, #1
    3fae:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
    3fb2:	4806      	ldr	r0, [pc, #24]	; (3fcc <nrfx_qspi_erase+0x58>)
    3fb4:	4770      	bx	lr
    p_reg->INTENSET = mask;
    3fb6:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
    3fba:	e7fa      	b.n	3fb2 <nrfx_qspi_erase+0x3e>
        return NRFX_ERROR_INVALID_ADDR;
    3fbc:	4804      	ldr	r0, [pc, #16]	; (3fd0 <nrfx_qspi_erase+0x5c>)
    3fbe:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
    3fc0:	4804      	ldr	r0, [pc, #16]	; (3fd4 <nrfx_qspi_erase+0x60>)
}
    3fc2:	4770      	bx	lr
    3fc4:	200046a4 	.word	0x200046a4
    3fc8:	5002b000 	.word	0x5002b000
    3fcc:	0bad0000 	.word	0x0bad0000
    3fd0:	0bad000a 	.word	0x0bad000a
    3fd4:	0bad000b 	.word	0x0bad000b

00003fd8 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
    3fd8:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fda:	4b17      	ldr	r3, [pc, #92]	; (4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>)
    3fdc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
    3fe0:	b1e2      	cbz	r2, 401c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fe2:	2200      	movs	r2, #0
    switch (m_cb.state)
    3fe4:	4c15      	ldr	r4, [pc, #84]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3fe6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3fea:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    3fee:	2a03      	cmp	r2, #3
    3ff0:	d015      	beq.n	401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    3ff2:	2a04      	cmp	r2, #4
    3ff4:	d015      	beq.n	4022 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22>
    3ff6:	2a02      	cmp	r2, #2
    3ff8:	d104      	bne.n	4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
    3ffa:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    3ffc:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
    4000:	f7ff fd92 	bl	3b28 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
    4004:	68a3      	ldr	r3, [r4, #8]
    4006:	b913      	cbnz	r3, 400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
    4008:	2301      	movs	r3, #1
    400a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
    400e:	e9d4 3100 	ldrd	r3, r1, [r4]
    4012:	2000      	movs	r0, #0
    4014:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
    4016:	2300      	movs	r3, #0
    4018:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
    401c:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
    401e:	2302      	movs	r3, #2
    4020:	e7ec      	b.n	3ffc <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
    4022:	2203      	movs	r2, #3
    4024:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
    4028:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
    402c:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
    402e:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    4032:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    4036:	e7e5      	b.n	4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>
    4038:	5002b000 	.word	0x5002b000
    403c:	200046a4 	.word	0x200046a4

00004040 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4040:	4b10      	ldr	r3, [pc, #64]	; (4084 <z_sys_init_run_level+0x44>)
{
    4042:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4044:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4048:	3001      	adds	r0, #1
    404a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    404e:	42a6      	cmp	r6, r4
    4050:	d800      	bhi.n	4054 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    4052:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    4054:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    4058:	b18d      	cbz	r5, 407e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    405a:	4628      	mov	r0, r5
    405c:	4798      	blx	r3
			if (rc != 0) {
    405e:	b138      	cbz	r0, 4070 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4060:	2800      	cmp	r0, #0
    4062:	bfb8      	it	lt
    4064:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    4066:	28ff      	cmp	r0, #255	; 0xff
    4068:	bfa8      	it	ge
    406a:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    406c:	68eb      	ldr	r3, [r5, #12]
    406e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4070:	68ea      	ldr	r2, [r5, #12]
    4072:	7853      	ldrb	r3, [r2, #1]
    4074:	f043 0301 	orr.w	r3, r3, #1
    4078:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    407a:	3408      	adds	r4, #8
    407c:	e7e7      	b.n	404e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    407e:	4798      	blx	r3
    4080:	e7fb      	b.n	407a <z_sys_init_run_level+0x3a>
    4082:	bf00      	nop
    4084:	000071f4 	.word	0x000071f4

00004088 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4088:	2201      	movs	r2, #1
{
    408a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    408c:	4b08      	ldr	r3, [pc, #32]	; (40b0 <bg_thread_main+0x28>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    408e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    4090:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4092:	f7ff ffd5 	bl	4040 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4096:	f002 fd7e 	bl	6b96 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    409a:	2004      	movs	r0, #4
    409c:	f7ff ffd0 	bl	4040 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    40a0:	f7fc f9c0 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    40a4:	4a03      	ldr	r2, [pc, #12]	; (40b4 <bg_thread_main+0x2c>)
    40a6:	7b13      	ldrb	r3, [r2, #12]
    40a8:	f023 0301 	bic.w	r3, r3, #1
    40ac:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    40ae:	bd08      	pop	{r3, pc}
    40b0:	2004606e 	.word	0x2004606e
    40b4:	200046d8 	.word	0x200046d8

000040b8 <z_bss_zero>:
{
    40b8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    40ba:	4803      	ldr	r0, [pc, #12]	; (40c8 <z_bss_zero+0x10>)
    40bc:	4a03      	ldr	r2, [pc, #12]	; (40cc <z_bss_zero+0x14>)
    40be:	2100      	movs	r1, #0
    40c0:	1a12      	subs	r2, r2, r0
    40c2:	f002 fd38 	bl	6b36 <z_early_memset>
}
    40c6:	bd08      	pop	{r3, pc}
    40c8:	200020c0 	.word	0x200020c0
    40cc:	20046070 	.word	0x20046070

000040d0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    40d0:	b508      	push	{r3, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    40d2:	2000      	movs	r0, #0
    40d4:	f7ff ffb4 	bl	4040 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    40d8:	4b18      	ldr	r3, [pc, #96]	; (413c <z_cstart+0x6c>)
	uint32_t msp =
    40da:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    40de:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    40e2:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40e6:	2500      	movs	r5, #0
    40e8:	23e0      	movs	r3, #224	; 0xe0
    40ea:	4c15      	ldr	r4, [pc, #84]	; (4140 <z_cstart+0x70>)
    40ec:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    40f0:	77e5      	strb	r5, [r4, #31]
    40f2:	7625      	strb	r5, [r4, #24]
    40f4:	7665      	strb	r5, [r4, #25]
    40f6:	76a5      	strb	r5, [r4, #26]
    40f8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    40fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    40fe:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4102:	6263      	str	r3, [r4, #36]	; 0x24
    4104:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4108:	f7fd fc4c 	bl	19a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    410c:	f7fd fa5c 	bl	15c8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4110:	f04f 33ff 	mov.w	r3, #4294967295
    4114:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4116:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4118:	f7fd fdba 	bl	1c90 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    411c:	f7fd fccc 	bl	1ab8 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4120:	f002 fce1 	bl	6ae6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    4124:	2001      	movs	r0, #1
    4126:	f7ff ff8b 	bl	4040 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    412a:	2002      	movs	r0, #2
    412c:	f7ff ff88 	bl	4040 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4130:	462b      	mov	r3, r5
    4132:	462a      	mov	r2, r5
    4134:	4629      	mov	r1, r5
    4136:	4803      	ldr	r0, [pc, #12]	; (4144 <z_cstart+0x74>)
    4138:	f7fd fad4 	bl	16e4 <z_arm_switch_to_main_no_multithreading>
    413c:	20046070 	.word	0x20046070
    4140:	e000ed00 	.word	0xe000ed00
    4144:	00004089 	.word	0x00004089

00004148 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4148:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    414a:	4806      	ldr	r0, [pc, #24]	; (4164 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    414c:	4a06      	ldr	r2, [pc, #24]	; (4168 <z_data_copy+0x20>)
    414e:	4907      	ldr	r1, [pc, #28]	; (416c <z_data_copy+0x24>)
    4150:	1a12      	subs	r2, r2, r0
    4152:	f002 fcf2 	bl	6b3a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    415a:	4a05      	ldr	r2, [pc, #20]	; (4170 <z_data_copy+0x28>)
    415c:	4905      	ldr	r1, [pc, #20]	; (4174 <z_data_copy+0x2c>)
    415e:	4806      	ldr	r0, [pc, #24]	; (4178 <z_data_copy+0x30>)
    4160:	f002 bceb 	b.w	6b3a <z_early_memcpy>
    4164:	20002000 	.word	0x20002000
    4168:	200020bc 	.word	0x200020bc
    416c:	000074a4 	.word	0x000074a4
    4170:	00000000 	.word	0x00000000
    4174:	000074a4 	.word	0x000074a4
    4178:	20002000 	.word	0x20002000

0000417c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    417c:	4b03      	ldr	r3, [pc, #12]	; (418c <elapsed+0x10>)
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	b90b      	cbnz	r3, 4186 <elapsed+0xa>
    4182:	f000 bfab 	b.w	50dc <sys_clock_elapsed>
}
    4186:	2000      	movs	r0, #0
    4188:	4770      	bx	lr
    418a:	bf00      	nop
    418c:	2000474c 	.word	0x2000474c

00004190 <next_timeout>:

static int32_t next_timeout(void)
{
    4190:	b510      	push	{r4, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4192:	4b09      	ldr	r3, [pc, #36]	; (41b8 <next_timeout+0x28>)
    4194:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4196:	429c      	cmp	r4, r3
    4198:	d104      	bne.n	41a4 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    419a:	f7ff ffef 	bl	417c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    419e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    41a2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    41a4:	f7ff ffea 	bl	417c <elapsed>
	if ((to == NULL) ||
    41a8:	2c00      	cmp	r4, #0
    41aa:	d0f8      	beq.n	419e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    41ac:	68e3      	ldr	r3, [r4, #12]
    41ae:	1a18      	subs	r0, r3, r0
    41b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	return ret;
    41b4:	e7f5      	b.n	41a2 <next_timeout+0x12>
    41b6:	bf00      	nop
    41b8:	20002020 	.word	0x20002020

000041bc <remove_timeout>:
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    41bc:	b148      	cbz	r0, 41d2 <remove_timeout+0x16>
	return (node == list->tail) ? NULL : node->next;
    41be:	4b09      	ldr	r3, [pc, #36]	; (41e4 <remove_timeout+0x28>)
    41c0:	685b      	ldr	r3, [r3, #4]
    41c2:	4298      	cmp	r0, r3
    41c4:	d005      	beq.n	41d2 <remove_timeout+0x16>
    41c6:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    41c8:	b11b      	cbz	r3, 41d2 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    41ca:	68da      	ldr	r2, [r3, #12]
    41cc:	68c1      	ldr	r1, [r0, #12]
    41ce:	440a      	add	r2, r1
    41d0:	60da      	str	r2, [r3, #12]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    41d2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    41d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    41d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    41da:	2300      	movs	r3, #0
	node->prev = NULL;
    41dc:	e9c0 3300 	strd	r3, r3, [r0]
}
    41e0:	4770      	bx	lr
    41e2:	bf00      	nop
    41e4:	20002020 	.word	0x20002020

000041e8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    41e8:	1c53      	adds	r3, r2, #1
{
    41ea:	b570      	push	{r4, r5, r6, lr}
    41ec:	4604      	mov	r4, r0
    41ee:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    41f0:	d032      	beq.n	4258 <z_add_timeout+0x70>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    41f2:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    41f4:	f04f 0320 	mov.w	r3, #32
    41f8:	f3ef 8611 	mrs	r6, BASEPRI
    41fc:	f383 8812 	msr	BASEPRI_MAX, r3
    4200:	f3bf 8f6f 	isb	sy
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4204:	f7ff ffba 	bl	417c <elapsed>
	return list->head == list;
    4208:	4a17      	ldr	r2, [pc, #92]	; (4268 <z_add_timeout+0x80>)
    420a:	3501      	adds	r5, #1
    420c:	6813      	ldr	r3, [r2, #0]
    420e:	4405      	add	r5, r0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4210:	4293      	cmp	r3, r2
    4212:	bf08      	it	eq
    4214:	2300      	moveq	r3, #0
    4216:	60e5      	str	r5, [r4, #12]
	return (node == list->tail) ? NULL : node->next;
    4218:	6855      	ldr	r5, [r2, #4]
		}

		for (t = first(); t != NULL; t = next(t)) {
    421a:	b923      	cbnz	r3, 4226 <z_add_timeout+0x3e>
	node->prev = tail;
    421c:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4220:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4222:	6054      	str	r4, [r2, #4]
}
    4224:	e00a      	b.n	423c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    4226:	68d8      	ldr	r0, [r3, #12]
    4228:	68e1      	ldr	r1, [r4, #12]
    422a:	4288      	cmp	r0, r1
    422c:	dd15      	ble.n	425a <z_add_timeout+0x72>
				t->dticks -= to->dticks;
    422e:	1a40      	subs	r0, r0, r1
	sys_dnode_t *const prev = successor->prev;
    4230:	6859      	ldr	r1, [r3, #4]
    4232:	60d8      	str	r0, [r3, #12]
	node->next = successor;
    4234:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4238:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    423a:	605c      	str	r4, [r3, #4]
	return list->head == list;
    423c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    423e:	4293      	cmp	r3, r2
    4240:	d006      	beq.n	4250 <z_add_timeout+0x68>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4242:	429c      	cmp	r4, r3
    4244:	d104      	bne.n	4250 <z_add_timeout+0x68>
			sys_clock_set_timeout(next_timeout(), false);
    4246:	f7ff ffa3 	bl	4190 <next_timeout>
    424a:	2100      	movs	r1, #0
    424c:	f000 ff45 	bl	50da <sys_clock_set_timeout>
	__asm__ volatile(
    4250:	f386 8811 	msr	BASEPRI, r6
    4254:	f3bf 8f6f 	isb	sy
		}
	}
}
    4258:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    425a:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    425c:	42ab      	cmp	r3, r5
    425e:	60e1      	str	r1, [r4, #12]
    4260:	d0dc      	beq.n	421c <z_add_timeout+0x34>
    4262:	681b      	ldr	r3, [r3, #0]
    4264:	e7d9      	b.n	421a <z_add_timeout+0x32>
    4266:	bf00      	nop
    4268:	20002020 	.word	0x20002020

0000426c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__asm__ volatile(
    4270:	f04f 0320 	mov.w	r3, #32
    4274:	f3ef 8c11 	mrs	ip, BASEPRI
    4278:	f383 8812 	msr	BASEPRI_MAX, r3
    427c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4280:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4314 <sys_clock_announce+0xa8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4284:	4f24      	ldr	r7, [pc, #144]	; (4318 <sys_clock_announce+0xac>)
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    4286:	f04f 0900 	mov.w	r9, #0
	announce_remaining = ticks;
    428a:	6038      	str	r0, [r7, #0]
    428c:	f8d8 0000 	ldr.w	r0, [r8]
		curr_tick += dt;
    4290:	4d22      	ldr	r5, [pc, #136]	; (431c <sys_clock_announce+0xb0>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4292:	4540      	cmp	r0, r8
    4294:	bf08      	it	eq
    4296:	2000      	moveq	r0, #0
    4298:	e9d5 2100 	ldrd	r2, r1, [r5]
    429c:	4666      	mov	r6, ip
	     (t != NULL) && (t->dticks <= announce_remaining);
    429e:	683b      	ldr	r3, [r7, #0]
    42a0:	b330      	cbz	r0, 42f0 <sys_clock_announce+0x84>
    42a2:	68c4      	ldr	r4, [r0, #12]
    42a4:	429c      	cmp	r4, r3
    42a6:	dd02      	ble.n	42ae <sys_clock_announce+0x42>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    42a8:	1ae4      	subs	r4, r4, r3
    42aa:	60c4      	str	r4, [r0, #12]
    42ac:	e020      	b.n	42f0 <sys_clock_announce+0x84>
		curr_tick += dt;
    42ae:	18a2      	adds	r2, r4, r2
    42b0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
		t->dticks = 0;
    42b4:	f8c0 900c 	str.w	r9, [r0, #12]
		curr_tick += dt;
    42b8:	e9c5 2100 	strd	r2, r1, [r5]
		remove_timeout(t);
    42bc:	f7ff ff7e 	bl	41bc <remove_timeout>
	__asm__ volatile(
    42c0:	f386 8811 	msr	BASEPRI, r6
    42c4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    42c8:	6883      	ldr	r3, [r0, #8]
    42ca:	4798      	blx	r3
	__asm__ volatile(
    42cc:	f04f 0320 	mov.w	r3, #32
    42d0:	f3ef 8611 	mrs	r6, BASEPRI
    42d4:	f383 8812 	msr	BASEPRI_MAX, r3
    42d8:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    42dc:	683b      	ldr	r3, [r7, #0]
	return list->head == list;
    42de:	f8d8 0000 	ldr.w	r0, [r8]
    42e2:	1b1b      	subs	r3, r3, r4
	return sys_dlist_is_empty(list) ? NULL : list->head;
    42e4:	4540      	cmp	r0, r8
	k.key = arch_irq_lock();
    42e6:	46b4      	mov	ip, r6
    42e8:	603b      	str	r3, [r7, #0]
    42ea:	d1d5      	bne.n	4298 <sys_clock_announce+0x2c>
		curr_tick += dt;
    42ec:	e9d5 2100 	ldrd	r2, r1, [r5]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    42f0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    42f2:	189a      	adds	r2, r3, r2
    42f4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
    42f8:	e9c5 2100 	strd	r2, r1, [r5]
	announce_remaining = 0;
    42fc:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    42fe:	f7ff ff47 	bl	4190 <next_timeout>
    4302:	4621      	mov	r1, r4
    4304:	f000 fee9 	bl	50da <sys_clock_set_timeout>
	__asm__ volatile(
    4308:	f386 8811 	msr	BASEPRI, r6
    430c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    4310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4314:	20002020 	.word	0x20002020
    4318:	2000474c 	.word	0x2000474c
    431c:	200020e0 	.word	0x200020e0

00004320 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    4320:	b538      	push	{r3, r4, r5, lr}
    4322:	4604      	mov	r4, r0
	__asm__ volatile(
    4324:	f04f 0320 	mov.w	r3, #32
    4328:	f3ef 8511 	mrs	r5, BASEPRI
    432c:	f383 8812 	msr	BASEPRI_MAX, r3
    4330:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    4334:	6803      	ldr	r3, [r0, #0]
    4336:	b123      	cbz	r3, 4342 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    4338:	f385 8811 	msr	BASEPRI, r5
    433c:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    4340:	bd38      	pop	{r3, r4, r5, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    4342:	6a03      	ldr	r3, [r0, #32]
    4344:	1e5a      	subs	r2, r3, #1
    4346:	1cd1      	adds	r1, r2, #3
    4348:	d805      	bhi.n	4356 <z_timer_expiration_handler+0x36>
		next.ticks = MAX(next.ticks - 1, 0);
    434a:	2b01      	cmp	r3, #1
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    434c:	bf08      	it	eq
    434e:	2200      	moveq	r2, #0
    4350:	490c      	ldr	r1, [pc, #48]	; (4384 <z_timer_expiration_handler+0x64>)
    4352:	f7ff ff49 	bl	41e8 <z_add_timeout>
	timer->status += 1U;
    4356:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4358:	3301      	adds	r3, #1
    435a:	6263      	str	r3, [r4, #36]	; 0x24
	if (timer->expiry_fn != NULL) {
    435c:	69a3      	ldr	r3, [r4, #24]
    435e:	2b00      	cmp	r3, #0
    4360:	d0ea      	beq.n	4338 <z_timer_expiration_handler+0x18>
    4362:	f385 8811 	msr	BASEPRI, r5
    4366:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    436a:	4620      	mov	r0, r4
    436c:	69a3      	ldr	r3, [r4, #24]
    436e:	4798      	blx	r3
	__asm__ volatile(
    4370:	f04f 0320 	mov.w	r3, #32
    4374:	f3ef 8511 	mrs	r5, BASEPRI
    4378:	f383 8812 	msr	BASEPRI_MAX, r3
    437c:	f3bf 8f6f 	isb	sy
	return k;
    4380:	e7da      	b.n	4338 <z_timer_expiration_handler+0x18>
    4382:	bf00      	nop
    4384:	00004321 	.word	0x00004321

00004388 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4388:	1c4b      	adds	r3, r1, #1
{
    438a:	b570      	push	{r4, r5, r6, lr}
    438c:	4604      	mov	r4, r0
    438e:	460d      	mov	r5, r1
    4390:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4392:	d00b      	beq.n	43ac <z_impl_k_timer_start+0x24>
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    4394:	f002 fbd9 	bl	6b4a <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    4398:	2300      	movs	r3, #0
	timer->period = period;
    439a:	6226      	str	r6, [r4, #32]
	timer->status = 0U;
    439c:	6263      	str	r3, [r4, #36]	; 0x24

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    439e:	462a      	mov	r2, r5
    43a0:	4620      	mov	r0, r4
		     duration);
}
    43a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    43a6:	4902      	ldr	r1, [pc, #8]	; (43b0 <z_impl_k_timer_start+0x28>)
    43a8:	f7ff bf1e 	b.w	41e8 <z_add_timeout>
}
    43ac:	bd70      	pop	{r4, r5, r6, pc}
    43ae:	bf00      	nop
    43b0:	00004321 	.word	0x00004321

000043b4 <nrf_cc3xx_platform_init_no_rng>:
    43b4:	b510      	push	{r4, lr}
    43b6:	4c0a      	ldr	r4, [pc, #40]	; (43e0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    43b8:	6823      	ldr	r3, [r4, #0]
    43ba:	b11b      	cbz	r3, 43c4 <nrf_cc3xx_platform_init_no_rng+0x10>
    43bc:	2301      	movs	r3, #1
    43be:	6023      	str	r3, [r4, #0]
    43c0:	2000      	movs	r0, #0
    43c2:	bd10      	pop	{r4, pc}
    43c4:	f000 f858 	bl	4478 <CC_LibInitNoRng>
    43c8:	2800      	cmp	r0, #0
    43ca:	d0f7      	beq.n	43bc <nrf_cc3xx_platform_init_no_rng+0x8>
    43cc:	3801      	subs	r0, #1
    43ce:	2807      	cmp	r0, #7
    43d0:	d803      	bhi.n	43da <nrf_cc3xx_platform_init_no_rng+0x26>
    43d2:	4b04      	ldr	r3, [pc, #16]	; (43e4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    43d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    43d8:	bd10      	pop	{r4, pc}
    43da:	4803      	ldr	r0, [pc, #12]	; (43e8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    43dc:	bd10      	pop	{r4, pc}
    43de:	bf00      	nop
    43e0:	20004750 	.word	0x20004750
    43e4:	0000720c 	.word	0x0000720c
    43e8:	ffff8ffe 	.word	0xffff8ffe

000043ec <nrf_cc3xx_platform_abort>:
    43ec:	f3bf 8f4f 	dsb	sy
    43f0:	4905      	ldr	r1, [pc, #20]	; (4408 <nrf_cc3xx_platform_abort+0x1c>)
    43f2:	4b06      	ldr	r3, [pc, #24]	; (440c <nrf_cc3xx_platform_abort+0x20>)
    43f4:	68ca      	ldr	r2, [r1, #12]
    43f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    43fa:	4313      	orrs	r3, r2
    43fc:	60cb      	str	r3, [r1, #12]
    43fe:	f3bf 8f4f 	dsb	sy
    4402:	bf00      	nop
    4404:	e7fd      	b.n	4402 <nrf_cc3xx_platform_abort+0x16>
    4406:	bf00      	nop
    4408:	e000ed00 	.word	0xe000ed00
    440c:	05fa0004 	.word	0x05fa0004

00004410 <CC_PalAbort>:
    4410:	b430      	push	{r4, r5}
    4412:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4416:	2500      	movs	r5, #0
    4418:	4b0b      	ldr	r3, [pc, #44]	; (4448 <CC_PalAbort+0x38>)
    441a:	4c0c      	ldr	r4, [pc, #48]	; (444c <CC_PalAbort+0x3c>)
    441c:	490c      	ldr	r1, [pc, #48]	; (4450 <CC_PalAbort+0x40>)
    441e:	6849      	ldr	r1, [r1, #4]
    4420:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4424:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4428:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    442c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4430:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4434:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    4438:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    443c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4440:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4444:	bc30      	pop	{r4, r5}
    4446:	4708      	bx	r1
    4448:	50845000 	.word	0x50845000
    444c:	50844000 	.word	0x50844000
    4450:	20002028 	.word	0x20002028

00004454 <nrf_cc3xx_platform_set_abort>:
    4454:	4b02      	ldr	r3, [pc, #8]	; (4460 <nrf_cc3xx_platform_set_abort+0xc>)
    4456:	e9d0 1200 	ldrd	r1, r2, [r0]
    445a:	e9c3 1200 	strd	r1, r2, [r3]
    445e:	4770      	bx	lr
    4460:	20002028 	.word	0x20002028

00004464 <mbedtls_platform_zeroize>:
    4464:	b138      	cbz	r0, 4476 <mbedtls_platform_zeroize+0x12>
    4466:	b131      	cbz	r1, 4476 <mbedtls_platform_zeroize+0x12>
    4468:	2200      	movs	r2, #0
    446a:	4401      	add	r1, r0
    446c:	4603      	mov	r3, r0
    446e:	3001      	adds	r0, #1
    4470:	4288      	cmp	r0, r1
    4472:	701a      	strb	r2, [r3, #0]
    4474:	d1fa      	bne.n	446c <mbedtls_platform_zeroize+0x8>
    4476:	4770      	bx	lr

00004478 <CC_LibInitNoRng>:
    4478:	b508      	push	{r3, lr}
    447a:	f000 f811 	bl	44a0 <CC_HalInit>
    447e:	b930      	cbnz	r0, 448e <CC_LibInitNoRng+0x16>
    4480:	f000 f810 	bl	44a4 <CC_PalInit>
    4484:	b938      	cbnz	r0, 4496 <CC_LibInitNoRng+0x1e>
    4486:	4a05      	ldr	r2, [pc, #20]	; (449c <CC_LibInitNoRng+0x24>)
    4488:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    448c:	bd08      	pop	{r3, pc}
    448e:	f000 f837 	bl	4500 <CC_PalTerminate>
    4492:	2003      	movs	r0, #3
    4494:	bd08      	pop	{r3, pc}
    4496:	2004      	movs	r0, #4
    4498:	bd08      	pop	{r3, pc}
    449a:	bf00      	nop
    449c:	50845000 	.word	0x50845000

000044a0 <CC_HalInit>:
    44a0:	2000      	movs	r0, #0
    44a2:	4770      	bx	lr

000044a4 <CC_PalInit>:
    44a4:	b510      	push	{r4, lr}
    44a6:	4811      	ldr	r0, [pc, #68]	; (44ec <CC_PalInit+0x48>)
    44a8:	f000 f848 	bl	453c <CC_PalMutexCreate>
    44ac:	b100      	cbz	r0, 44b0 <CC_PalInit+0xc>
    44ae:	bd10      	pop	{r4, pc}
    44b0:	480f      	ldr	r0, [pc, #60]	; (44f0 <CC_PalInit+0x4c>)
    44b2:	f000 f843 	bl	453c <CC_PalMutexCreate>
    44b6:	2800      	cmp	r0, #0
    44b8:	d1f9      	bne.n	44ae <CC_PalInit+0xa>
    44ba:	4c0e      	ldr	r4, [pc, #56]	; (44f4 <CC_PalInit+0x50>)
    44bc:	4620      	mov	r0, r4
    44be:	f000 f83d 	bl	453c <CC_PalMutexCreate>
    44c2:	2800      	cmp	r0, #0
    44c4:	d1f3      	bne.n	44ae <CC_PalInit+0xa>
    44c6:	4b0c      	ldr	r3, [pc, #48]	; (44f8 <CC_PalInit+0x54>)
    44c8:	480c      	ldr	r0, [pc, #48]	; (44fc <CC_PalInit+0x58>)
    44ca:	601c      	str	r4, [r3, #0]
    44cc:	f000 f836 	bl	453c <CC_PalMutexCreate>
    44d0:	4601      	mov	r1, r0
    44d2:	2800      	cmp	r0, #0
    44d4:	d1eb      	bne.n	44ae <CC_PalInit+0xa>
    44d6:	f000 f82d 	bl	4534 <CC_PalDmaInit>
    44da:	4604      	mov	r4, r0
    44dc:	b108      	cbz	r0, 44e2 <CC_PalInit+0x3e>
    44de:	4620      	mov	r0, r4
    44e0:	bd10      	pop	{r4, pc}
    44e2:	f000 f83f 	bl	4564 <CC_PalPowerSaveModeInit>
    44e6:	4620      	mov	r0, r4
    44e8:	e7fa      	b.n	44e0 <CC_PalInit+0x3c>
    44ea:	bf00      	nop
    44ec:	20002040 	.word	0x20002040
    44f0:	2000203c 	.word	0x2000203c
    44f4:	20002038 	.word	0x20002038
    44f8:	20002030 	.word	0x20002030
    44fc:	20002034 	.word	0x20002034

00004500 <CC_PalTerminate>:
    4500:	b508      	push	{r3, lr}
    4502:	4808      	ldr	r0, [pc, #32]	; (4524 <CC_PalTerminate+0x24>)
    4504:	f000 f824 	bl	4550 <CC_PalMutexDestroy>
    4508:	4807      	ldr	r0, [pc, #28]	; (4528 <CC_PalTerminate+0x28>)
    450a:	f000 f821 	bl	4550 <CC_PalMutexDestroy>
    450e:	4807      	ldr	r0, [pc, #28]	; (452c <CC_PalTerminate+0x2c>)
    4510:	f000 f81e 	bl	4550 <CC_PalMutexDestroy>
    4514:	4806      	ldr	r0, [pc, #24]	; (4530 <CC_PalTerminate+0x30>)
    4516:	f000 f81b 	bl	4550 <CC_PalMutexDestroy>
    451a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    451e:	f000 b80b 	b.w	4538 <CC_PalDmaTerminate>
    4522:	bf00      	nop
    4524:	20002040 	.word	0x20002040
    4528:	2000203c 	.word	0x2000203c
    452c:	20002038 	.word	0x20002038
    4530:	20002034 	.word	0x20002034

00004534 <CC_PalDmaInit>:
    4534:	2000      	movs	r0, #0
    4536:	4770      	bx	lr

00004538 <CC_PalDmaTerminate>:
    4538:	4770      	bx	lr
    453a:	bf00      	nop

0000453c <CC_PalMutexCreate>:
    453c:	b508      	push	{r3, lr}
    453e:	4b03      	ldr	r3, [pc, #12]	; (454c <CC_PalMutexCreate+0x10>)
    4540:	6802      	ldr	r2, [r0, #0]
    4542:	681b      	ldr	r3, [r3, #0]
    4544:	6810      	ldr	r0, [r2, #0]
    4546:	4798      	blx	r3
    4548:	2000      	movs	r0, #0
    454a:	bd08      	pop	{r3, pc}
    454c:	20002058 	.word	0x20002058

00004550 <CC_PalMutexDestroy>:
    4550:	b508      	push	{r3, lr}
    4552:	4b03      	ldr	r3, [pc, #12]	; (4560 <CC_PalMutexDestroy+0x10>)
    4554:	6802      	ldr	r2, [r0, #0]
    4556:	685b      	ldr	r3, [r3, #4]
    4558:	6810      	ldr	r0, [r2, #0]
    455a:	4798      	blx	r3
    455c:	2000      	movs	r0, #0
    455e:	bd08      	pop	{r3, pc}
    4560:	20002058 	.word	0x20002058

00004564 <CC_PalPowerSaveModeInit>:
    4564:	b570      	push	{r4, r5, r6, lr}
    4566:	4c09      	ldr	r4, [pc, #36]	; (458c <CC_PalPowerSaveModeInit+0x28>)
    4568:	4d09      	ldr	r5, [pc, #36]	; (4590 <CC_PalPowerSaveModeInit+0x2c>)
    456a:	6920      	ldr	r0, [r4, #16]
    456c:	68ab      	ldr	r3, [r5, #8]
    456e:	4798      	blx	r3
    4570:	b118      	cbz	r0, 457a <CC_PalPowerSaveModeInit+0x16>
    4572:	4b08      	ldr	r3, [pc, #32]	; (4594 <CC_PalPowerSaveModeInit+0x30>)
    4574:	4808      	ldr	r0, [pc, #32]	; (4598 <CC_PalPowerSaveModeInit+0x34>)
    4576:	685b      	ldr	r3, [r3, #4]
    4578:	4798      	blx	r3
    457a:	2100      	movs	r1, #0
    457c:	4a07      	ldr	r2, [pc, #28]	; (459c <CC_PalPowerSaveModeInit+0x38>)
    457e:	68eb      	ldr	r3, [r5, #12]
    4580:	6011      	str	r1, [r2, #0]
    4582:	6920      	ldr	r0, [r4, #16]
    4584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4588:	4718      	bx	r3
    458a:	bf00      	nop
    458c:	20002044 	.word	0x20002044
    4590:	20002058 	.word	0x20002058
    4594:	20002028 	.word	0x20002028
    4598:	0000722c 	.word	0x0000722c
    459c:	20004754 	.word	0x20004754

000045a0 <mutex_free>:
    45a0:	b510      	push	{r4, lr}
    45a2:	4604      	mov	r4, r0
    45a4:	b150      	cbz	r0, 45bc <mutex_free+0x1c>
    45a6:	6863      	ldr	r3, [r4, #4]
    45a8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    45ac:	d005      	beq.n	45ba <mutex_free+0x1a>
    45ae:	4a06      	ldr	r2, [pc, #24]	; (45c8 <mutex_free+0x28>)
    45b0:	4293      	cmp	r3, r2
    45b2:	d002      	beq.n	45ba <mutex_free+0x1a>
    45b4:	2300      	movs	r3, #0
    45b6:	6062      	str	r2, [r4, #4]
    45b8:	6023      	str	r3, [r4, #0]
    45ba:	bd10      	pop	{r4, pc}
    45bc:	4b03      	ldr	r3, [pc, #12]	; (45cc <mutex_free+0x2c>)
    45be:	4804      	ldr	r0, [pc, #16]	; (45d0 <mutex_free+0x30>)
    45c0:	685b      	ldr	r3, [r3, #4]
    45c2:	4798      	blx	r3
    45c4:	e7ef      	b.n	45a6 <mutex_free+0x6>
    45c6:	bf00      	nop
    45c8:	a95c5f2c 	.word	0xa95c5f2c
    45cc:	20002028 	.word	0x20002028
    45d0:	0000724c 	.word	0x0000724c

000045d4 <mutex_lock>:
    45d4:	b1c8      	cbz	r0, 460a <mutex_lock+0x36>
    45d6:	6843      	ldr	r3, [r0, #4]
    45d8:	4a0d      	ldr	r2, [pc, #52]	; (4610 <mutex_lock+0x3c>)
    45da:	4293      	cmp	r3, r2
    45dc:	d013      	beq.n	4606 <mutex_lock+0x32>
    45de:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    45e2:	d00e      	beq.n	4602 <mutex_lock+0x2e>
    45e4:	2301      	movs	r3, #1
    45e6:	e850 2f00 	ldrex	r2, [r0]
    45ea:	4619      	mov	r1, r3
    45ec:	e840 1c00 	strex	ip, r1, [r0]
    45f0:	f09c 0f00 	teq	ip, #0
    45f4:	d1f7      	bne.n	45e6 <mutex_lock+0x12>
    45f6:	2a01      	cmp	r2, #1
    45f8:	d0f5      	beq.n	45e6 <mutex_lock+0x12>
    45fa:	f3bf 8f5f 	dmb	sy
    45fe:	2000      	movs	r0, #0
    4600:	4770      	bx	lr
    4602:	4804      	ldr	r0, [pc, #16]	; (4614 <mutex_lock+0x40>)
    4604:	4770      	bx	lr
    4606:	4804      	ldr	r0, [pc, #16]	; (4618 <mutex_lock+0x44>)
    4608:	4770      	bx	lr
    460a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    460e:	4770      	bx	lr
    4610:	a95c5f2c 	.word	0xa95c5f2c
    4614:	ffff8fe9 	.word	0xffff8fe9
    4618:	ffff8fea 	.word	0xffff8fea

0000461c <mutex_unlock>:
    461c:	4603      	mov	r3, r0
    461e:	b180      	cbz	r0, 4642 <mutex_unlock+0x26>
    4620:	6842      	ldr	r2, [r0, #4]
    4622:	4909      	ldr	r1, [pc, #36]	; (4648 <mutex_unlock+0x2c>)
    4624:	428a      	cmp	r2, r1
    4626:	d00a      	beq.n	463e <mutex_unlock+0x22>
    4628:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    462c:	d005      	beq.n	463a <mutex_unlock+0x1e>
    462e:	f3bf 8f5f 	dmb	sy
    4632:	2200      	movs	r2, #0
    4634:	4610      	mov	r0, r2
    4636:	601a      	str	r2, [r3, #0]
    4638:	4770      	bx	lr
    463a:	4804      	ldr	r0, [pc, #16]	; (464c <mutex_unlock+0x30>)
    463c:	4770      	bx	lr
    463e:	4804      	ldr	r0, [pc, #16]	; (4650 <mutex_unlock+0x34>)
    4640:	4770      	bx	lr
    4642:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4646:	4770      	bx	lr
    4648:	a95c5f2c 	.word	0xa95c5f2c
    464c:	ffff8fe9 	.word	0xffff8fe9
    4650:	ffff8fea 	.word	0xffff8fea

00004654 <mutex_init>:
    4654:	b510      	push	{r4, lr}
    4656:	4604      	mov	r4, r0
    4658:	b120      	cbz	r0, 4664 <mutex_init+0x10>
    465a:	2300      	movs	r3, #0
    465c:	4a03      	ldr	r2, [pc, #12]	; (466c <mutex_init+0x18>)
    465e:	6023      	str	r3, [r4, #0]
    4660:	6062      	str	r2, [r4, #4]
    4662:	bd10      	pop	{r4, pc}
    4664:	4802      	ldr	r0, [pc, #8]	; (4670 <mutex_init+0x1c>)
    4666:	f7ff fed3 	bl	4410 <CC_PalAbort>
    466a:	e7f6      	b.n	465a <mutex_init+0x6>
    466c:	3a00003a 	.word	0x3a00003a
    4670:	00007274 	.word	0x00007274

00004674 <flash_device_base>:

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
    4674:	b908      	cbnz	r0, 467a <flash_device_base+0x6>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
    }
    *ret = FLASH_DEVICE_BASE;
    4676:	6008      	str	r0, [r1, #0]
    return 0;
    4678:	4770      	bx	lr
        return -EINVAL;
    467a:	f06f 0015 	mvn.w	r0, #21
}
    467e:	4770      	bx	lr

00004680 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    4680:	b121      	cbz	r1, 468c <flash_area_id_from_multi_image_slot+0xc>
    4682:	2901      	cmp	r1, #1
    4684:	d007      	beq.n	4696 <flash_area_id_from_multi_image_slot+0x16>
    4686:	f06f 0015 	mvn.w	r0, #21
    468a:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    468c:	b148      	cbz	r0, 46a2 <flash_area_id_from_multi_image_slot+0x22>
#if !defined(CONFIG_SINGLE_APPLICATION_SLOT)
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    468e:	2801      	cmp	r0, #1
    4690:	bf18      	it	ne
    4692:	20ff      	movne	r0, #255	; 0xff
    4694:	4770      	bx	lr
    4696:	b130      	cbz	r0, 46a6 <flash_area_id_from_multi_image_slot+0x26>
    4698:	2801      	cmp	r0, #1
    469a:	bf14      	ite	ne
    469c:	20ff      	movne	r0, #255	; 0xff
    469e:	2008      	moveq	r0, #8
    46a0:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    46a2:	2004      	movs	r0, #4
    46a4:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    46a6:	2002      	movs	r0, #2
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    46a8:	4770      	bx	lr

000046aa <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    46aa:	2000      	movs	r0, #0
    46ac:	4770      	bx	lr

000046ae <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    46ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    46b2:	460e      	mov	r6, r1
    46b4:	4617      	mov	r7, r2
    46b6:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    46b8:	4604      	mov	r4, r0
    46ba:	b928      	cbnz	r0, 46c8 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    46bc:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    46c0:	4640      	mov	r0, r8
    46c2:	b003      	add	sp, #12
    46c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    46c8:	2900      	cmp	r1, #0
    46ca:	d0f7      	beq.n	46bc <bootutil_tlv_iter_begin+0xe>
    46cc:	2a00      	cmp	r2, #0
    46ce:	d0f5      	beq.n	46bc <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    46d0:	68cb      	ldr	r3, [r1, #12]
    46d2:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    46d4:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    46d6:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    46d8:	2304      	movs	r3, #4
    46da:	4629      	mov	r1, r5
    46dc:	eb0d 0203 	add.w	r2, sp, r3
    46e0:	f000 fa67 	bl	4bb2 <flash_area_read>
    46e4:	4680      	mov	r8, r0
    46e6:	2800      	cmp	r0, #0
    46e8:	d1e8      	bne.n	46bc <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    46ea:	f646 1208 	movw	r2, #26888	; 0x6908
    46ee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    46f2:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    46f4:	4291      	cmp	r1, r2
    46f6:	d125      	bne.n	4744 <bootutil_tlv_iter_begin+0x96>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    46f8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    46fc:	4299      	cmp	r1, r3
    46fe:	d1dd      	bne.n	46bc <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    4700:	2304      	movs	r3, #4
    4702:	4638      	mov	r0, r7
    4704:	eb0d 0203 	add.w	r2, sp, r3
    4708:	4429      	add	r1, r5
    470a:	f000 fa52 	bl	4bb2 <flash_area_read>
    470e:	2800      	cmp	r0, #0
    4710:	d1d4      	bne.n	46bc <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    4712:	f646 1307 	movw	r3, #26887	; 0x6907
    4716:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    471a:	429a      	cmp	r2, r3
    471c:	d1ce      	bne.n	46bc <bootutil_tlv_iter_begin+0xe>
    it->fap = fap;
    471e:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot = prot;
    4722:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->type = type;
    4726:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot = prot;
    472a:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    472c:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    472e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    4732:	442b      	add	r3, r5
    4734:	60e3      	str	r3, [r4, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    4736:	8973      	ldrh	r3, [r6, #10]
    4738:	4413      	add	r3, r2
    473a:	442b      	add	r3, r5
    it->tlv_off = off_ + sizeof(info);
    473c:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    473e:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    4740:	6125      	str	r5, [r4, #16]
    return 0;
    4742:	e7bd      	b.n	46c0 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    4744:	2b00      	cmp	r3, #0
    4746:	d0e4      	beq.n	4712 <bootutil_tlv_iter_begin+0x64>
    4748:	e7b8      	b.n	46bc <bootutil_tlv_iter_begin+0xe>

0000474a <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    474a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    474e:	460e      	mov	r6, r1
    4750:	4617      	mov	r7, r2
    4752:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4754:	4604      	mov	r4, r0
    4756:	b920      	cbnz	r0, 4762 <bootutil_tlv_iter_next+0x18>
        return -1;
    4758:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    475c:	b002      	add	sp, #8
    475e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    4762:	6803      	ldr	r3, [r0, #0]
    4764:	2b00      	cmp	r3, #0
    4766:	d0f7      	beq.n	4758 <bootutil_tlv_iter_next+0xe>
    4768:	6843      	ldr	r3, [r0, #4]
    476a:	2b00      	cmp	r3, #0
    476c:	d0f4      	beq.n	4758 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    476e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    4772:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4776:	429a      	cmp	r2, r3
    4778:	d216      	bcs.n	47a8 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    477a:	6823      	ldr	r3, [r4, #0]
    477c:	895b      	ldrh	r3, [r3, #10]
    477e:	b123      	cbz	r3, 478a <bootutil_tlv_iter_next+0x40>
    4780:	68e3      	ldr	r3, [r4, #12]
    4782:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    4784:	bf04      	itt	eq
    4786:	3304      	addeq	r3, #4
    4788:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    478a:	2304      	movs	r3, #4
    478c:	6921      	ldr	r1, [r4, #16]
    478e:	6860      	ldr	r0, [r4, #4]
    4790:	eb0d 0203 	add.w	r2, sp, r3
    4794:	f000 fa0d 	bl	4bb2 <flash_area_read>
        if (rc) {
    4798:	2800      	cmp	r0, #0
    479a:	d1dd      	bne.n	4758 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    479c:	7aa3      	ldrb	r3, [r4, #10]
    479e:	b12b      	cbz	r3, 47ac <bootutil_tlv_iter_next+0x62>
    47a0:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
    47a4:	429a      	cmp	r2, r3
    47a6:	d301      	bcc.n	47ac <bootutil_tlv_iter_next+0x62>
            return 1;
    47a8:	2001      	movs	r0, #1
    47aa:	e7d7      	b.n	475c <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    47ac:	8923      	ldrh	r3, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    47ae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    47b2:	4543      	cmp	r3, r8
    47b4:	f101 0204 	add.w	r2, r1, #4
    47b8:	d003      	beq.n	47c2 <bootutil_tlv_iter_next+0x78>
    47ba:	f8bd c004 	ldrh.w	ip, [sp, #4]
    47be:	459c      	cmp	ip, r3
    47c0:	d10b      	bne.n	47da <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    47c2:	b115      	cbz	r5, 47ca <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    47c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    47c8:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    47ca:	6923      	ldr	r3, [r4, #16]
    47cc:	3304      	adds	r3, #4
    47ce:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    47d0:	8039      	strh	r1, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    47d2:	6923      	ldr	r3, [r4, #16]
    47d4:	4413      	add	r3, r2
    47d6:	6123      	str	r3, [r4, #16]
            return 0;
    47d8:	e7c0      	b.n	475c <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    47da:	6923      	ldr	r3, [r4, #16]
    47dc:	4413      	add	r3, r2
    47de:	6123      	str	r3, [r4, #16]
    47e0:	e7c7      	b.n	4772 <bootutil_tlv_iter_next+0x28>

000047e2 <boot_fih_memequal>:
 */
#ifdef MCUBOOT_FIH_PROFILE_OFF
inline
fih_ret boot_fih_memequal(const void *s1, const void *s2, size_t n)
{
    return memcmp(s1, s2, n);
    47e2:	f000 ba8d 	b.w	4d00 <memcmp>

000047e6 <boot_trailer_sz>:
}

uint32_t
boot_status_sz(uint32_t min_write_sz)
{
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    47e6:	f44f 7340 	mov.w	r3, #768	; 0x300
    47ea:	4358      	muls	r0, r3

uint32_t
boot_trailer_sz(uint32_t min_write_sz)
{
    return boot_status_sz(min_write_sz) + boot_trailer_info_sz();
}
    47ec:	3030      	adds	r0, #48	; 0x30
    47ee:	4770      	bx	lr

000047f0 <bootutil_max_image_size>:
                   * this value to fail.
                   */
    }
    return flash_sector_get_off(&sector);
#elif defined(MCUBOOT_OVERWRITE_ONLY)
    return boot_swap_info_off(fap);
    47f0:	f000 bc99 	b.w	5126 <boot_swap_info_off>

000047f4 <boot_initialize_area>:
{
    47f4:	4603      	mov	r3, r0
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    47f6:	f44f 7280 	mov.w	r2, #256	; 0x100
{
    47fa:	b513      	push	{r0, r1, r4, lr}
    47fc:	4608      	mov	r0, r1
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    47fe:	f893 10b8 	ldrb.w	r1, [r3, #184]	; 0xb8
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    4802:	9201      	str	r2, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    4804:	b199      	cbz	r1, 482e <boot_initialize_area+0x3a>
    4806:	2901      	cmp	r1, #1
    4808:	d003      	beq.n	4812 <boot_initialize_area+0x1e>
    480a:	28ff      	cmp	r0, #255	; 0xff
    480c:	d011      	beq.n	4832 <boot_initialize_area+0x3e>
        return BOOT_EFLASH;
    480e:	2001      	movs	r0, #1
    4810:	e01d      	b.n	484e <boot_initialize_area+0x5a>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    4812:	2801      	cmp	r0, #1
    4814:	d00d      	beq.n	4832 <boot_initialize_area+0x3e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    4816:	2208      	movs	r2, #8
    4818:	4282      	cmp	r2, r0
    481a:	d1f8      	bne.n	480e <boot_initialize_area+0x1a>
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    481c:	2458      	movs	r4, #88	; 0x58
    481e:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    4822:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors;
    4826:	6d12      	ldr	r2, [r2, #80]	; 0x50
        out_num_sectors = &BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors;
    4828:	f103 0454 	add.w	r4, r3, #84	; 0x54
    482c:	e009      	b.n	4842 <boot_initialize_area+0x4e>
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    482e:	2804      	cmp	r0, #4
    4830:	d10f      	bne.n	4852 <boot_initialize_area+0x5e>
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    4832:	2458      	movs	r4, #88	; 0x58
    4834:	fb04 3201 	mla	r2, r4, r1, r3
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    4838:	fb04 3301 	mla	r3, r4, r1, r3
        out_sectors = BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors;
    483c:	6a52      	ldr	r2, [r2, #36]	; 0x24
        out_num_sectors = &BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors;
    483e:	f103 0428 	add.w	r4, r3, #40	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    4842:	a901      	add	r1, sp, #4
    4844:	f7fc fe8a 	bl	155c <flash_area_get_sectors>
    if (rc != 0) {
    4848:	b908      	cbnz	r0, 484e <boot_initialize_area+0x5a>
    *out_num_sectors = num_sectors;
    484a:	9b01      	ldr	r3, [sp, #4]
    484c:	6023      	str	r3, [r4, #0]
}
    484e:	b002      	add	sp, #8
    4850:	bd10      	pop	{r4, pc}
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    4852:	2202      	movs	r2, #2
    4854:	e7e0      	b.n	4818 <boot_initialize_area+0x24>

00004856 <boot_read_sectors>:
{
    4856:	b538      	push	{r3, r4, r5, lr}
    image_index = BOOT_CURR_IMG(state);
    4858:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
{
    485c:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    485e:	b1e9      	cbz	r1, 489c <boot_read_sectors+0x46>
    4860:	2901      	cmp	r1, #1
    4862:	d006      	beq.n	4872 <boot_read_sectors+0x1c>
    4864:	21ff      	movs	r1, #255	; 0xff
    4866:	f7ff ffc5 	bl	47f4 <boot_initialize_area>
    if (rc != 0) {
    486a:	b1f0      	cbz	r0, 48aa <boot_read_sectors+0x54>
        return BOOT_EFLASH;
    486c:	2501      	movs	r5, #1
}
    486e:	4628      	mov	r0, r5
    4870:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    4872:	f7ff ffbf 	bl	47f4 <boot_initialize_area>
    if (rc != 0) {
    4876:	2800      	cmp	r0, #0
    4878:	d1f8      	bne.n	486c <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    487a:	2108      	movs	r1, #8
    487c:	4620      	mov	r0, r4
    487e:	f7ff ffb9 	bl	47f4 <boot_initialize_area>
    if (rc != 0) {
    4882:	4605      	mov	r5, r0
    4884:	b998      	cbnz	r0, 48ae <boot_read_sectors+0x58>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    4886:	2258      	movs	r2, #88	; 0x58
    4888:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    488c:	fb02 4303 	mla	r3, r2, r3, r4
    4890:	6a18      	ldr	r0, [r3, #32]
    4892:	f000 f9cc 	bl	4c2e <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    4896:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    return 0;
    489a:	e7e8      	b.n	486e <boot_read_sectors+0x18>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    489c:	2104      	movs	r1, #4
    489e:	f7ff ffa9 	bl	47f4 <boot_initialize_area>
    if (rc != 0) {
    48a2:	2800      	cmp	r0, #0
    48a4:	d1e2      	bne.n	486c <boot_read_sectors+0x16>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    48a6:	2102      	movs	r1, #2
    48a8:	e7e8      	b.n	487c <boot_read_sectors+0x26>
    48aa:	21ff      	movs	r1, #255	; 0xff
    48ac:	e7e6      	b.n	487c <boot_read_sectors+0x26>
        return BOOT_EFLASH_SEC;
    48ae:	2509      	movs	r5, #9
    48b0:	e7dd      	b.n	486e <boot_read_sectors+0x18>

000048b2 <boot_read_image_headers>:
{
    48b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    48b6:	4604      	mov	r4, r0
    48b8:	460d      	mov	r5, r1
    48ba:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    48bc:	f04f 0900 	mov.w	r9, #0
    48c0:	f04f 082c 	mov.w	r8, #44	; 0x2c
    48c4:	2758      	movs	r7, #88	; 0x58
        rc = BOOT_HOOK_CALL(boot_read_image_header_hook, BOOT_HOOK_REGULAR,
    48c6:	fb08 fa09 	mul.w	sl, r8, r9
    48ca:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    48ce:	4649      	mov	r1, r9
    48d0:	fb17 a200 	smlabb	r2, r7, r0, sl
    48d4:	4422      	add	r2, r4
    48d6:	f7fe fa57 	bl	2d88 <boot_read_image_header_hook>
        if (rc == BOOT_HOOK_REGULAR)
    48da:	2801      	cmp	r0, #1
    48dc:	d109      	bne.n	48f2 <boot_read_image_headers+0x40>
    48de:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    48e2:	4633      	mov	r3, r6
    48e4:	fb17 a202 	smlabb	r2, r7, r2, sl
    48e8:	4649      	mov	r1, r9
    48ea:	4620      	mov	r0, r4
    48ec:	4422      	add	r2, r4
    48ee:	f000 f825 	bl	493c <boot_read_image_header>
        if (rc != 0) {
    48f2:	b138      	cbz	r0, 4904 <boot_read_image_headers+0x52>
            if (i > 0 && !require_all) {
    48f4:	f1b9 0f00 	cmp.w	r9, #0
    48f8:	d002      	beq.n	4900 <boot_read_image_headers+0x4e>
                return 0;
    48fa:	2d00      	cmp	r5, #0
    48fc:	bf08      	it	eq
    48fe:	2000      	moveq	r0, #0
}
    4900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    4904:	f1b9 0f00 	cmp.w	r9, #0
    4908:	d1fa      	bne.n	4900 <boot_read_image_headers+0x4e>
    490a:	f04f 0901 	mov.w	r9, #1
    490e:	e7da      	b.n	48c6 <boot_read_image_headers+0x14>

00004910 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    4910:	2301      	movs	r3, #1
    4912:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    4914:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    4918:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    491a:	2300      	movs	r3, #0
    bs->source = 0;
    491c:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    4920:	4770      	bx	lr

00004922 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    4922:	7943      	ldrb	r3, [r0, #5]
    4924:	2b01      	cmp	r3, #1
    4926:	d107      	bne.n	4938 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    4928:	6803      	ldr	r3, [r0, #0]
    492a:	2b01      	cmp	r3, #1
    492c:	d104      	bne.n	4938 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    492e:	7900      	ldrb	r0, [r0, #4]
    4930:	1e43      	subs	r3, r0, #1
    4932:	4258      	negs	r0, r3
    4934:	4158      	adcs	r0, r3
    4936:	4770      	bx	lr
    4938:	2000      	movs	r0, #0
}
    493a:	4770      	bx	lr

0000493c <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    493c:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    493e:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
{
    4942:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    4944:	f7ff fe9c 	bl	4680 <flash_area_id_from_multi_image_slot>

    rc = flash_area_open(area_id, &fap);
    4948:	a901      	add	r1, sp, #4
    494a:	b2c0      	uxtb	r0, r0
    494c:	f7fc fdde 	bl	150c <flash_area_open>
    if (rc == 0) {
    4950:	4601      	mov	r1, r0
    4952:	b968      	cbnz	r0, 4970 <boot_read_image_header+0x34>
        rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    4954:	4622      	mov	r2, r4
    4956:	2320      	movs	r3, #32
    4958:	9801      	ldr	r0, [sp, #4]
    495a:	f000 f92a 	bl	4bb2 <flash_area_read>
    495e:	4604      	mov	r4, r0
        flash_area_close(fap);
    4960:	9801      	ldr	r0, [sp, #4]
    4962:	f000 f925 	bl	4bb0 <flash_area_close>
    }

    if (rc != 0) {
    4966:	1e20      	subs	r0, r4, #0
    4968:	bf18      	it	ne
    496a:	2001      	movne	r0, #1
        rc = BOOT_EFLASH;
    }

    return rc;
}
    496c:	b002      	add	sp, #8
    496e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    4970:	2001      	movs	r0, #1
    return rc;
    4972:	e7fb      	b.n	496c <boot_read_image_header+0x30>

00004974 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
    4974:	2258      	movs	r2, #88	; 0x58
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    4976:	b5f0      	push	{r4, r5, r6, r7, lr}
    4978:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
    497c:	fb02 0303 	mla	r3, r2, r3, r0
    4980:	f8d3 c028 	ldr.w	ip, [r3, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    4984:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
    4988:	d836      	bhi.n	49f8 <boot_slots_compatible+0x84>
    498a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    498c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    4990:	d832      	bhi.n	49f8 <boot_slots_compatible+0x84>
     * number of a slot's sectors are able to fit into another, which only
     * excludes cases where sector sizes are not a multiple of each other.
     */
    i = sz0 = primary_slot_sz = 0;
    j = sz1 = secondary_slot_sz = 0;
    smaller = 0;
    4992:	2100      	movs	r1, #0
    j = sz1 = secondary_slot_sz = 0;
    4994:	4608      	mov	r0, r1
    i = sz0 = primary_slot_sz = 0;
    4996:	460a      	mov	r2, r1
    j = sz1 = secondary_slot_sz = 0;
    4998:	460d      	mov	r5, r1
    i = sz0 = primary_slot_sz = 0;
    499a:	460c      	mov	r4, r1
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    499c:	4562      	cmp	r2, ip
    499e:	d307      	bcc.n	49b0 <boot_slots_compatible+0x3c>
    49a0:	42b0      	cmp	r0, r6
    49a2:	d305      	bcc.n	49b0 <boot_slots_compatible+0x3c>
            smaller = sz0 = sz1 = 0;
        }
#endif
    }

    if ((i != num_sectors_primary) ||
    49a4:	4562      	cmp	r2, ip
    49a6:	d127      	bne.n	49f8 <boot_slots_compatible+0x84>
    49a8:	1b83      	subs	r3, r0, r6
    49aa:	4258      	negs	r0, r3
    49ac:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
    49ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (sz0 == sz1) {
    49b0:	42ac      	cmp	r4, r5
    49b2:	d10c      	bne.n	49ce <boot_slots_compatible+0x5a>
	return fs->fs_size;
    49b4:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    49b6:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    49ba:	687f      	ldr	r7, [r7, #4]
            i++;
    49bc:	3201      	adds	r2, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    49be:	443c      	add	r4, r7
    49c0:	6d1f      	ldr	r7, [r3, #80]	; 0x50
    49c2:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    49c6:	687f      	ldr	r7, [r7, #4]
            j++;
    49c8:	3001      	adds	r0, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    49ca:	443d      	add	r5, r7
            j++;
    49cc:	e7e6      	b.n	499c <boot_slots_compatible+0x28>
        } else if (sz0 < sz1) {
    49ce:	d209      	bcs.n	49e4 <boot_slots_compatible+0x70>
    49d0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
            if (smaller == 2) {
    49d2:	2902      	cmp	r1, #2
    49d4:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    49d8:	687f      	ldr	r7, [r7, #4]
    49da:	443c      	add	r4, r7
            if (smaller == 2) {
    49dc:	d00c      	beq.n	49f8 <boot_slots_compatible+0x84>
            smaller = 1;
    49de:	2101      	movs	r1, #1
            i++;
    49e0:	3201      	adds	r2, #1
    49e2:	e7db      	b.n	499c <boot_slots_compatible+0x28>
    49e4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
            if (smaller == 1) {
    49e6:	2901      	cmp	r1, #1
    49e8:	eb07 07c0 	add.w	r7, r7, r0, lsl #3
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    49ec:	687f      	ldr	r7, [r7, #4]
    49ee:	443d      	add	r5, r7
            if (smaller == 1) {
    49f0:	d002      	beq.n	49f8 <boot_slots_compatible+0x84>
            smaller = 2;
    49f2:	2102      	movs	r1, #2
            j++;
    49f4:	3001      	adds	r0, #1
    49f6:	e7d1      	b.n	499c <boot_slots_compatible+0x28>
        return 0;
    49f8:	2000      	movs	r0, #0
    49fa:	e7d8      	b.n	49ae <boot_slots_compatible+0x3a>

000049fc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    49fc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    49fe:	f013 0307 	ands.w	r3, r3, #7
    4a02:	d105      	bne.n	4a10 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4a04:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4a06:	2b00      	cmp	r3, #0
    4a08:	bf0c      	ite	eq
    4a0a:	2000      	moveq	r0, #0
    4a0c:	2003      	movne	r0, #3
    4a0e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4a10:	2b02      	cmp	r3, #2
    4a12:	d105      	bne.n	4a20 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4a14:	8b40      	ldrh	r0, [r0, #26]
    4a16:	fab0 f080 	clz	r0, r0
    4a1a:	0940      	lsrs	r0, r0, #5
    4a1c:	0080      	lsls	r0, r0, #2
    4a1e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4a20:	2b01      	cmp	r3, #1
    4a22:	d105      	bne.n	4a30 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4a24:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4a26:	2b00      	cmp	r3, #0
    4a28:	bf0c      	ite	eq
    4a2a:	2000      	moveq	r0, #0
    4a2c:	2005      	movne	r0, #5
    4a2e:	4770      	bx	lr
	int evt = EVT_NOP;
    4a30:	2000      	movs	r0, #0
}
    4a32:	4770      	bx	lr

00004a34 <validate_args>:
{
    4a34:	b510      	push	{r4, lr}
    4a36:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4a38:	b100      	cbz	r0, 4a3c <validate_args+0x8>
    4a3a:	b911      	cbnz	r1, 4a42 <validate_args+0xe>
		return -EINVAL;
    4a3c:	f06f 0015 	mvn.w	r0, #21
}
    4a40:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    4a42:	1d08      	adds	r0, r1, #4
    4a44:	f000 f895 	bl	4b72 <sys_notify_validate>
	if ((rv == 0)
    4a48:	2800      	cmp	r0, #0
    4a4a:	d1f9      	bne.n	4a40 <validate_args+0xc>
	    && ((cli->notify.flags
    4a4c:	68a3      	ldr	r3, [r4, #8]
    4a4e:	2b03      	cmp	r3, #3
    4a50:	d9f6      	bls.n	4a40 <validate_args+0xc>
    4a52:	e7f3      	b.n	4a3c <validate_args+0x8>

00004a54 <notify_one>:
{
    4a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a58:	460d      	mov	r5, r1
    4a5a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4a5c:	4619      	mov	r1, r3
    4a5e:	1d28      	adds	r0, r5, #4
{
    4a60:	4690      	mov	r8, r2
    4a62:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4a64:	f000 f896 	bl	4b94 <sys_notify_finalize>
	if (cb) {
    4a68:	4604      	mov	r4, r0
    4a6a:	b138      	cbz	r0, 4a7c <notify_one+0x28>
		cb(mgr, cli, state, res);
    4a6c:	4633      	mov	r3, r6
    4a6e:	4642      	mov	r2, r8
    4a70:	4629      	mov	r1, r5
    4a72:	4638      	mov	r0, r7
    4a74:	46a4      	mov	ip, r4
}
    4a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4a7a:	4760      	bx	ip
}
    4a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004a80 <transition_complete>:
{
    4a80:	b410      	push	{r4}
    4a82:	f04f 0420 	mov.w	r4, #32
    4a86:	f3ef 8211 	mrs	r2, BASEPRI
    4a8a:	f384 8812 	msr	BASEPRI_MAX, r4
    4a8e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4a92:	6141      	str	r1, [r0, #20]
}
    4a94:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4a96:	2101      	movs	r1, #1
    4a98:	f7fc bbae 	b.w	11f8 <process_event>

00004a9c <onoff_manager_init>:
{
    4a9c:	b538      	push	{r3, r4, r5, lr}
    4a9e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4aa0:	4605      	mov	r5, r0
    4aa2:	b158      	cbz	r0, 4abc <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4aa4:	b151      	cbz	r1, 4abc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4aa6:	680b      	ldr	r3, [r1, #0]
    4aa8:	b143      	cbz	r3, 4abc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4aaa:	684b      	ldr	r3, [r1, #4]
    4aac:	b133      	cbz	r3, 4abc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4aae:	221c      	movs	r2, #28
    4ab0:	2100      	movs	r1, #0
    4ab2:	f000 f957 	bl	4d64 <memset>
	return 0;
    4ab6:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4ab8:	612c      	str	r4, [r5, #16]
}
    4aba:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4abc:	f06f 0015 	mvn.w	r0, #21
    4ac0:	e7fb      	b.n	4aba <onoff_manager_init+0x1e>

00004ac2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4ac2:	b570      	push	{r4, r5, r6, lr}
    4ac4:	4605      	mov	r5, r0
    4ac6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4ac8:	f7ff ffb4 	bl	4a34 <validate_args>

	if (rv < 0) {
    4acc:	1e04      	subs	r4, r0, #0
    4ace:	db15      	blt.n	4afc <onoff_request+0x3a>
    4ad0:	f04f 0320 	mov.w	r3, #32
    4ad4:	f3ef 8211 	mrs	r2, BASEPRI
    4ad8:	f383 8812 	msr	BASEPRI_MAX, r3
    4adc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4ae0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4ae4:	8b6b      	ldrh	r3, [r5, #26]
    4ae6:	8b2c      	ldrh	r4, [r5, #24]
    4ae8:	428b      	cmp	r3, r1
    4aea:	f004 0407 	and.w	r4, r4, #7
    4aee:	d107      	bne.n	4b00 <onoff_request+0x3e>
	__asm__ volatile(
    4af0:	f382 8811 	msr	BASEPRI, r2
    4af4:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    4af8:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4afc:	4620      	mov	r0, r4
    4afe:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4b00:	2c02      	cmp	r4, #2
    4b02:	d10c      	bne.n	4b1e <onoff_request+0x5c>
		mgr->refs += 1U;
    4b04:	3301      	adds	r3, #1
    4b06:	836b      	strh	r3, [r5, #26]
    4b08:	f382 8811 	msr	BASEPRI, r2
    4b0c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    4b10:	2300      	movs	r3, #0
    4b12:	4622      	mov	r2, r4
    4b14:	4631      	mov	r1, r6
    4b16:	4628      	mov	r0, r5
    4b18:	f7ff ff9c 	bl	4a54 <notify_one>
    4b1c:	e7ee      	b.n	4afc <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    4b1e:	2c06      	cmp	r4, #6
    4b20:	d814      	bhi.n	4b4c <onoff_request+0x8a>
    4b22:	e8df f004 	tbb	[pc, r4]
    4b26:	1304      	.short	0x1304
    4b28:	1a041313 	.word	0x1a041313
    4b2c:	04          	.byte	0x04
    4b2d:	00          	.byte	0x00
	parent->next = child;
    4b2e:	2300      	movs	r3, #0
    4b30:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4b32:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4b34:	b93b      	cbnz	r3, 4b46 <onoff_request+0x84>
	list->head = node;
    4b36:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    4b3a:	b9ac      	cbnz	r4, 4b68 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4b3c:	2102      	movs	r1, #2
    4b3e:	4628      	mov	r0, r5
    4b40:	f7fc fb5a 	bl	11f8 <process_event>
    4b44:	e7da      	b.n	4afc <onoff_request+0x3a>
	parent->next = child;
    4b46:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4b48:	606e      	str	r6, [r5, #4]
}
    4b4a:	e7f6      	b.n	4b3a <onoff_request+0x78>
    4b4c:	f382 8811 	msr	BASEPRI, r2
    4b50:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    4b54:	f06f 0404 	mvn.w	r4, #4
    4b58:	e7d0      	b.n	4afc <onoff_request+0x3a>
    4b5a:	f382 8811 	msr	BASEPRI, r2
    4b5e:	f3bf 8f6f 	isb	sy
    4b62:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4b66:	e7c9      	b.n	4afc <onoff_request+0x3a>
    4b68:	f382 8811 	msr	BASEPRI, r2
    4b6c:	f3bf 8f6f 	isb	sy
		if (notify) {
    4b70:	e7c4      	b.n	4afc <onoff_request+0x3a>

00004b72 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4b72:	4603      	mov	r3, r0
    4b74:	b158      	cbz	r0, 4b8e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4b76:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4b78:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4b7c:	2a01      	cmp	r2, #1
    4b7e:	d003      	beq.n	4b88 <sys_notify_validate+0x16>
    4b80:	2a03      	cmp	r2, #3
    4b82:	d104      	bne.n	4b8e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4b84:	6802      	ldr	r2, [r0, #0]
    4b86:	b112      	cbz	r2, 4b8e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4b88:	2000      	movs	r0, #0
    4b8a:	6098      	str	r0, [r3, #8]
    4b8c:	4770      	bx	lr
    4b8e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4b92:	4770      	bx	lr

00004b94 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4b94:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4b96:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    4b98:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    4b9c:	2a03      	cmp	r2, #3
    4b9e:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    4ba2:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    4ba4:	bf14      	ite	ne
    4ba6:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4ba8:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4baa:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4bac:	4770      	bx	lr

00004bae <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4bae:	4770      	bx	lr

00004bb0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    4bb0:	4770      	bx	lr

00004bb2 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    4bb2:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    4bb4:	b430      	push	{r4, r5}
    4bb6:	4604      	mov	r4, r0
    4bb8:	4618      	mov	r0, r3
    4bba:	db0b      	blt.n	4bd4 <flash_area_read+0x22>
    4bbc:	68a5      	ldr	r5, [r4, #8]
    4bbe:	4408      	add	r0, r1
    4bc0:	42a8      	cmp	r0, r5
    4bc2:	d807      	bhi.n	4bd4 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    4bc4:	68e0      	ldr	r0, [r4, #12]
    4bc6:	6864      	ldr	r4, [r4, #4]
    4bc8:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    4bca:	6884      	ldr	r4, [r0, #8]
    4bcc:	6824      	ldr	r4, [r4, #0]
    4bce:	46a4      	mov	ip, r4
}
    4bd0:	bc30      	pop	{r4, r5}
    4bd2:	4760      	bx	ip
    4bd4:	f06f 0015 	mvn.w	r0, #21
    4bd8:	bc30      	pop	{r4, r5}
    4bda:	4770      	bx	lr

00004bdc <flash_area_write>:
    4bdc:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    4bde:	b430      	push	{r4, r5}
    4be0:	4604      	mov	r4, r0
    4be2:	4618      	mov	r0, r3
    4be4:	db0b      	blt.n	4bfe <flash_area_write+0x22>
    4be6:	68a5      	ldr	r5, [r4, #8]
    4be8:	4408      	add	r0, r1
    4bea:	42a8      	cmp	r0, r5
    4bec:	d807      	bhi.n	4bfe <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    4bee:	68e0      	ldr	r0, [r4, #12]
    4bf0:	6864      	ldr	r4, [r4, #4]
    4bf2:	4421      	add	r1, r4
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    4bf4:	6884      	ldr	r4, [r0, #8]
    4bf6:	6864      	ldr	r4, [r4, #4]
    4bf8:	46a4      	mov	ip, r4
}
    4bfa:	bc30      	pop	{r4, r5}
    4bfc:	4760      	bx	ip
    4bfe:	f06f 0015 	mvn.w	r0, #21
    4c02:	bc30      	pop	{r4, r5}
    4c04:	4770      	bx	lr

00004c06 <flash_area_erase>:
    4c06:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    4c08:	4603      	mov	r3, r0
    4c0a:	b410      	push	{r4}
    4c0c:	4610      	mov	r0, r2
    4c0e:	db0a      	blt.n	4c26 <flash_area_erase+0x20>
    4c10:	689c      	ldr	r4, [r3, #8]
    4c12:	4408      	add	r0, r1
    4c14:	42a0      	cmp	r0, r4
    4c16:	d806      	bhi.n	4c26 <flash_area_erase+0x20>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    4c18:	68d8      	ldr	r0, [r3, #12]
    4c1a:	685b      	ldr	r3, [r3, #4]
    4c1c:	4419      	add	r1, r3
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    4c1e:	6883      	ldr	r3, [r0, #8]
}
    4c20:	bc10      	pop	{r4}
    4c22:	689b      	ldr	r3, [r3, #8]
    4c24:	4718      	bx	r3
    4c26:	f06f 0015 	mvn.w	r0, #21
    4c2a:	bc10      	pop	{r4}
    4c2c:	4770      	bx	lr

00004c2e <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    4c2e:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    4c30:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    4c32:	6883      	ldr	r3, [r0, #8]
    4c34:	68db      	ldr	r3, [r3, #12]
    4c36:	4798      	blx	r3
}
    4c38:	6800      	ldr	r0, [r0, #0]
    4c3a:	bd08      	pop	{r3, pc}

00004c3c <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    4c3c:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    4c3e:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    4c40:	6883      	ldr	r3, [r0, #8]
    4c42:	68db      	ldr	r3, [r3, #12]
    4c44:	4798      	blx	r3

	return param->erase_value;
}
    4c46:	7900      	ldrb	r0, [r0, #4]
    4c48:	bd08      	pop	{r3, pc}

00004c4a <get_sectors_cb>:
{
    4c4a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    4c4c:	684c      	ldr	r4, [r1, #4]
    4c4e:	6803      	ldr	r3, [r0, #0]
    4c50:	42a3      	cmp	r3, r4
    4c52:	d201      	bcs.n	4c58 <get_sectors_cb+0xe>
		*bail_value = true;
    4c54:	2001      	movs	r0, #1
}
    4c56:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
    4c58:	688a      	ldr	r2, [r1, #8]
    4c5a:	4422      	add	r2, r4
    4c5c:	4293      	cmp	r3, r2
    4c5e:	d301      	bcc.n	4c64 <get_sectors_cb+0x1a>
		*bail_value = false;
    4c60:	2000      	movs	r0, #0
    4c62:	e7f8      	b.n	4c56 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
    4c64:	694e      	ldr	r6, [r1, #20]
    4c66:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
    4c6a:	42b5      	cmp	r5, r6
    4c6c:	d303      	bcc.n	4c76 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
    4c6e:	f06f 030b 	mvn.w	r3, #11
    4c72:	618b      	str	r3, [r1, #24]
		return true;
    4c74:	e7f4      	b.n	4c60 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    4c76:	1b1b      	subs	r3, r3, r4
    4c78:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    4c7c:	6843      	ldr	r3, [r0, #4]
    4c7e:	6908      	ldr	r0, [r1, #16]
    4c80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    4c84:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
    4c86:	690b      	ldr	r3, [r1, #16]
    4c88:	3301      	adds	r3, #1
    4c8a:	610b      	str	r3, [r1, #16]
	return true;
    4c8c:	e7e2      	b.n	4c54 <get_sectors_cb+0xa>

00004c8e <abort_function>:
	while(1);
    4c8e:	e7fe      	b.n	4c8e <abort_function>

00004c90 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    4c90:	4770      	bx	lr

00004c92 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4c92:	f001 bf40 	b.w	6b16 <z_fatal_error>

00004c96 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4c96:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4c98:	6800      	ldr	r0, [r0, #0]
    4c9a:	f001 bf3c 	b.w	6b16 <z_fatal_error>

00004c9e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4c9e:	2100      	movs	r1, #0
    4ca0:	2001      	movs	r0, #1
    4ca2:	f7ff bff6 	b.w	4c92 <z_arm_fatal_error>

00004ca6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4ca6:	b508      	push	{r3, lr}
	handler();
    4ca8:	f7fc fcec 	bl	1684 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4cb0:	f7fc bd4a 	b.w	1748 <z_arm_exc_exit>

00004cb4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    4cb4:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    4cb8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4cbc:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    4cbe:	bf08      	it	eq
    4cc0:	f06f 0015 	mvneq.w	r0, #21
    4cc4:	4770      	bx	lr

00004cc6 <mpu_configure_region>:
{
    4cc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    4cc8:	890a      	ldrh	r2, [r1, #8]
    4cca:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    4ccc:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    4cce:	684d      	ldr	r5, [r1, #4]
    4cd0:	f002 021f 	and.w	r2, r2, #31
    4cd4:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    4cd8:	9300      	str	r3, [sp, #0]
    4cda:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4cde:	f023 031f 	bic.w	r3, r3, #31
    4ce2:	1e6a      	subs	r2, r5, #1
    4ce4:	4413      	add	r3, r2
    4ce6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    4cea:	2807      	cmp	r0, #7
    4cec:	9303      	str	r3, [sp, #12]
    4cee:	d804      	bhi.n	4cfa <mpu_configure_region+0x34>
	region_init(index, region_conf);
    4cf0:	4669      	mov	r1, sp
    4cf2:	f7fc feed 	bl	1ad0 <region_init>
}
    4cf6:	b004      	add	sp, #16
    4cf8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    4cfa:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    4cfe:	e7fa      	b.n	4cf6 <mpu_configure_region+0x30>

00004d00 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    4d00:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    4d02:	b15a      	cbz	r2, 4d1c <memcmp+0x1c>
    4d04:	3901      	subs	r1, #1
    4d06:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    4d08:	f810 2b01 	ldrb.w	r2, [r0], #1
    4d0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4d10:	42a0      	cmp	r0, r4
    4d12:	d001      	beq.n	4d18 <memcmp+0x18>
    4d14:	429a      	cmp	r2, r3
    4d16:	d0f7      	beq.n	4d08 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    4d18:	1ad0      	subs	r0, r2, r3
}
    4d1a:	bd10      	pop	{r4, pc}
		return 0;
    4d1c:	4610      	mov	r0, r2
    4d1e:	e7fc      	b.n	4d1a <memcmp+0x1a>

00004d20 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    4d20:	1a43      	subs	r3, r0, r1
    4d22:	4293      	cmp	r3, r2
{
    4d24:	b510      	push	{r4, lr}
    4d26:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    4d2a:	d308      	bcc.n	4d3e <memmove+0x1e>
	char *dest = d;
    4d2c:	4602      	mov	r2, r0
    4d2e:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    4d30:	429a      	cmp	r2, r3
    4d32:	d00b      	beq.n	4d4c <memmove+0x2c>
			*dest = *src;
    4d34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    4d38:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    4d3c:	e7f8      	b.n	4d30 <memmove+0x10>
    4d3e:	440a      	add	r2, r1
			dest[n] = src[n];
    4d40:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    4d44:	428a      	cmp	r2, r1
			dest[n] = src[n];
    4d46:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    4d4a:	d1f9      	bne.n	4d40 <memmove+0x20>
		}
	}

	return d;
}
    4d4c:	bd10      	pop	{r4, pc}

00004d4e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4d4e:	b510      	push	{r4, lr}
    4d50:	1e43      	subs	r3, r0, #1
    4d52:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4d54:	4291      	cmp	r1, r2
    4d56:	d100      	bne.n	4d5a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4d58:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
    4d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4d62:	e7f7      	b.n	4d54 <memcpy+0x6>

00004d64 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    4d64:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    4d66:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4d68:	4402      	add	r2, r0
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d100      	bne.n	4d70 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4d6e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4d70:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4d74:	e7f9      	b.n	4d6a <memset+0x6>

00004d76 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4d76:	220c      	movs	r2, #12
    4d78:	6903      	ldr	r3, [r0, #16]
    4d7a:	b2c9      	uxtb	r1, r1
    4d7c:	fb01 3302 	mla	r3, r1, r2, r3
    4d80:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    4d82:	f000 0007 	and.w	r0, r0, #7
    4d86:	4770      	bx	lr

00004d88 <set_on_state>:
	__asm__ volatile(
    4d88:	f04f 0320 	mov.w	r3, #32
    4d8c:	f3ef 8211 	mrs	r2, BASEPRI
    4d90:	f383 8812 	msr	BASEPRI_MAX, r3
    4d94:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4d98:	6803      	ldr	r3, [r0, #0]
    4d9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4d9e:	f043 0302 	orr.w	r3, r3, #2
    4da2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4da4:	f382 8811 	msr	BASEPRI, r2
    4da8:	f3bf 8f6f 	isb	sy
}
    4dac:	4770      	bx	lr

00004dae <stop>:
{
    4dae:	b570      	push	{r4, r5, r6, lr}
    4db0:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4db2:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4db4:	f04f 0420 	mov.w	r4, #32
    4db8:	f3ef 8511 	mrs	r5, BASEPRI
    4dbc:	f384 8812 	msr	BASEPRI_MAX, r4
    4dc0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4dc4:	260c      	movs	r6, #12
    4dc6:	fb06 3401 	mla	r4, r6, r1, r3
    4dca:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4dcc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4dd0:	d008      	beq.n	4de4 <stop+0x36>
    4dd2:	42a2      	cmp	r2, r4
    4dd4:	d006      	beq.n	4de4 <stop+0x36>
	__asm__ volatile(
    4dd6:	f385 8811 	msr	BASEPRI, r5
    4dda:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4dde:	f04f 30ff 	mov.w	r0, #4294967295
}
    4de2:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4de4:	2201      	movs	r2, #1
    4de6:	fb06 3301 	mla	r3, r6, r1, r3
    4dea:	679a      	str	r2, [r3, #120]	; 0x78
    4dec:	f385 8811 	msr	BASEPRI, r5
    4df0:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4df4:	6843      	ldr	r3, [r0, #4]
    4df6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4dfa:	685b      	ldr	r3, [r3, #4]
    4dfc:	4798      	blx	r3
	return 0;
    4dfe:	2000      	movs	r0, #0
    4e00:	e7ef      	b.n	4de2 <stop+0x34>

00004e02 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4e02:	2280      	movs	r2, #128	; 0x80
    4e04:	f7ff bfd3 	b.w	4dae <stop>

00004e08 <async_start>:
{
    4e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e0a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4e0c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4e0e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4e10:	f04f 0520 	mov.w	r5, #32
    4e14:	f3ef 8611 	mrs	r6, BASEPRI
    4e18:	f385 8812 	msr	BASEPRI_MAX, r5
    4e1c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4e20:	250c      	movs	r5, #12
    4e22:	fb05 4401 	mla	r4, r5, r1, r4
    4e26:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4e28:	f005 0c07 	and.w	ip, r5, #7
    4e2c:	f1bc 0f01 	cmp.w	ip, #1
    4e30:	d10c      	bne.n	4e4c <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4e32:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    4e34:	f386 8811 	msr	BASEPRI, r6
    4e38:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4e3c:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    4e40:	6843      	ldr	r3, [r0, #4]
    4e42:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4e46:	4798      	blx	r3
	return 0;
    4e48:	2000      	movs	r0, #0
}
    4e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4e4c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4e50:	42af      	cmp	r7, r5
    4e52:	f386 8811 	msr	BASEPRI, r6
    4e56:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    4e5a:	bf0c      	ite	eq
    4e5c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    4e60:	f04f 30ff 	movne.w	r0, #4294967295
    4e64:	e7f1      	b.n	4e4a <async_start+0x42>

00004e66 <api_start>:
{
    4e66:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4e68:	2480      	movs	r4, #128	; 0x80
    4e6a:	9400      	str	r4, [sp, #0]
    4e6c:	f7ff ffcc 	bl	4e08 <async_start>
}
    4e70:	b002      	add	sp, #8
    4e72:	bd10      	pop	{r4, pc}

00004e74 <api_blocking_start>:
}
    4e74:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4e78:	4770      	bx	lr

00004e7a <onoff_started_callback>:
{
    4e7a:	b410      	push	{r4}
	notify(mgr, 0);
    4e7c:	241c      	movs	r4, #28
	return &data->mgr[type];
    4e7e:	6900      	ldr	r0, [r0, #16]
    4e80:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4e82:	fb03 0004 	mla	r0, r3, r4, r0
    4e86:	2100      	movs	r1, #0
}
    4e88:	bc10      	pop	{r4}
	notify(mgr, 0);
    4e8a:	4710      	bx	r2

00004e8c <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4e8c:	2003      	movs	r0, #3
    4e8e:	f001 bdb3 	b.w	69f8 <nrfx_clock_start>

00004e92 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    4e92:	2002      	movs	r0, #2
    4e94:	f001 bdb0 	b.w	69f8 <nrfx_clock_start>

00004e98 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4e98:	2000      	movs	r0, #0
    4e9a:	f001 bdad 	b.w	69f8 <nrfx_clock_start>

00004e9e <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4e9e:	2003      	movs	r0, #3
    4ea0:	f001 be09 	b.w	6ab6 <nrfx_clock_stop>

00004ea4 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    4ea4:	2002      	movs	r0, #2
    4ea6:	f001 be06 	b.w	6ab6 <nrfx_clock_stop>

00004eaa <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4eaa:	2000      	movs	r0, #0
    4eac:	f001 be03 	b.w	6ab6 <nrfx_clock_stop>

00004eb0 <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
    4eb0:	b908      	cbnz	r0, 4eb6 <qspi_handler+0x6>
	dev_data->ready = true;
    4eb2:	2301      	movs	r3, #1
    4eb4:	700b      	strb	r3, [r1, #0]
}
    4eb6:	4770      	bx	lr

00004eb8 <qspi_unlock.isra.0>:
	if (!dev_data->xip_enabled) {
    4eb8:	7843      	ldrb	r3, [r0, #1]
    4eba:	b923      	cbnz	r3, 4ec6 <qspi_unlock.isra.0+0xe>
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
    4ebc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ec0:	2202      	movs	r2, #2
    4ec2:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
}
    4ec6:	4770      	bx	lr

00004ec8 <qspi_lock.isra.0>:
	if (!dev_data->xip_enabled) {
    4ec8:	7843      	ldrb	r3, [r0, #1]
    4eca:	b923      	cbnz	r3, 4ed6 <qspi_lock.isra.0+0xe>
    4ecc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ed0:	2201      	movs	r2, #1
    4ed2:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
}
    4ed6:	4770      	bx	lr

00004ed8 <qspi_send_cmd>:
{
    4ed8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4eda:	460c      	mov	r4, r1
	if (cmd->tx_buf) {
    4edc:	6849      	ldr	r1, [r1, #4]
{
    4ede:	4605      	mov	r5, r0
	if (cmd->tx_buf) {
    4ee0:	b359      	cbz	r1, 4f3a <qspi_send_cmd+0x62>
		tx_buf = cmd->tx_buf->buf;
    4ee2:	e9d1 1300 	ldrd	r1, r3, [r1]
	if (cmd->rx_buf) {
    4ee6:	68a0      	ldr	r0, [r4, #8]
    4ee8:	b348      	cbz	r0, 4f3e <qspi_send_cmd+0x66>
		rx_len = cmd->rx_buf->len;
    4eea:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
    4eee:	b338      	cbz	r0, 4f40 <qspi_send_cmd+0x68>
    4ef0:	b333      	cbz	r3, 4f40 <qspi_send_cmd+0x68>
		if (rx_len != tx_len) {
    4ef2:	4298      	cmp	r0, r3
    4ef4:	d127      	bne.n	4f46 <qspi_send_cmd+0x6e>
		xfer_len += tx_len;
    4ef6:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
    4ef8:	2b09      	cmp	r3, #9
    4efa:	d824      	bhi.n	4f46 <qspi_send_cmd+0x6e>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    4efc:	f88d 3001 	strb.w	r3, [sp, #1]
    4f00:	f240 1301 	movw	r3, #257	; 0x101
    4f04:	f8ad 3002 	strh.w	r3, [sp, #2]
    4f08:	2300      	movs	r3, #0
    4f0a:	7820      	ldrb	r0, [r4, #0]
    4f0c:	f88d 3004 	strb.w	r3, [sp, #4]
    4f10:	f88d 0000 	strb.w	r0, [sp]
	qspi_lock(dev);
    4f14:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
    4f16:	f88d 2005 	strb.w	r2, [sp, #5]
	qspi_lock(dev);
    4f1a:	f7ff ffd5 	bl	4ec8 <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
    4f1e:	4632      	mov	r2, r6
    4f20:	4668      	mov	r0, sp
    4f22:	f7fe ff6b 	bl	3dfc <nrfx_qspi_cinstr_xfer>
    4f26:	4601      	mov	r1, r0
	qspi_unlock(dev);
    4f28:	6928      	ldr	r0, [r5, #16]
    4f2a:	f7ff ffc5 	bl	4eb8 <qspi_unlock.isra.0>
	return qspi_get_zephyr_ret_code(res);
    4f2e:	4608      	mov	r0, r1
}
    4f30:	b002      	add	sp, #8
    4f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return qspi_get_zephyr_ret_code(res);
    4f36:	f7fd b833 	b.w	1fa0 <qspi_get_zephyr_ret_code>
	size_t tx_len = 0;
    4f3a:	460b      	mov	r3, r1
    4f3c:	e7d3      	b.n	4ee6 <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
    4f3e:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
    4f40:	3301      	adds	r3, #1
    4f42:	4403      	add	r3, r0
    4f44:	e7d8      	b.n	4ef8 <qspi_send_cmd+0x20>
}
    4f46:	f06f 0015 	mvn.w	r0, #21
    4f4a:	b002      	add	sp, #8
    4f4c:	bd70      	pop	{r4, r5, r6, pc}

00004f4e <qspi_nor_write_protection_set>:
{
    4f4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
    4f50:	2200      	movs	r2, #0
    4f52:	4291      	cmp	r1, r2
    4f54:	bf0c      	ite	eq
    4f56:	2306      	moveq	r3, #6
    4f58:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    4f5a:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
    4f5c:	e9cd 2201 	strd	r2, r2, [sp, #4]
    4f60:	9203      	str	r2, [sp, #12]
    4f62:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
    4f66:	f7ff ffb7 	bl	4ed8 <qspi_send_cmd>
		ret = -EIO;
    4f6a:	2800      	cmp	r0, #0
}
    4f6c:	bf18      	it	ne
    4f6e:	f06f 0004 	mvnne.w	r0, #4
    4f72:	b005      	add	sp, #20
    4f74:	f85d fb04 	ldr.w	pc, [sp], #4

00004f78 <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
    4f78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
    4f7a:	23ff      	movs	r3, #255	; 0xff
    4f7c:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
    4f80:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
    4f84:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
    4f86:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
    4f88:	2301      	movs	r3, #1
    4f8a:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4f8e:	2305      	movs	r3, #5
	int ret = qspi_send_cmd(dev, &cmd, false);
    4f90:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
    4f92:	f88d 300c 	strb.w	r3, [sp, #12]
    4f96:	ab01      	add	r3, sp, #4
    4f98:	9204      	str	r2, [sp, #16]
    4f9a:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
    4f9c:	f7ff ff9c 	bl	4ed8 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
    4fa0:	2800      	cmp	r0, #0
    4fa2:	bfa8      	it	ge
    4fa4:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
    4fa8:	b007      	add	sp, #28
    4faa:	f85d fb04 	ldr.w	pc, [sp], #4

00004fae <is_regular_addr_valid>:
{
    4fae:	b538      	push	{r3, r4, r5, lr}
    4fb0:	4605      	mov	r5, r0
    4fb2:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    4fb4:	f001 fd81 	bl	6aba <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    4fb8:	2d00      	cmp	r5, #0
    4fba:	db07      	blt.n	4fcc <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    4fbc:	42a8      	cmp	r0, r5
    4fbe:	d905      	bls.n	4fcc <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    4fc0:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    4fc2:	4284      	cmp	r4, r0
    4fc4:	bf8c      	ite	hi
    4fc6:	2000      	movhi	r0, #0
    4fc8:	2001      	movls	r0, #1
}
    4fca:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    4fcc:	2000      	movs	r0, #0
    4fce:	e7fc      	b.n	4fca <is_regular_addr_valid+0x1c>

00004fd0 <flash_nrf_erase>:
{
    4fd0:	b570      	push	{r4, r5, r6, lr}
    4fd2:	460c      	mov	r4, r1
    4fd4:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    4fd6:	f001 fd73 	bl	6ac0 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    4fda:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    4fdc:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
    4fde:	4620      	mov	r0, r4
    4fe0:	f7ff ffe5 	bl	4fae <is_regular_addr_valid>
    4fe4:	b1b8      	cbz	r0, 5016 <flash_nrf_erase+0x46>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    4fe6:	fbb4 f3f6 	udiv	r3, r4, r6
    4fea:	fb06 4313 	mls	r3, r6, r3, r4
    4fee:	b993      	cbnz	r3, 5016 <flash_nrf_erase+0x46>
    4ff0:	fbb5 f3f6 	udiv	r3, r5, r6
    4ff4:	fb06 5313 	mls	r3, r6, r3, r5
    4ff8:	b96b      	cbnz	r3, 5016 <flash_nrf_erase+0x46>
		if (!n_pages) {
    4ffa:	42ae      	cmp	r6, r5
    4ffc:	d901      	bls.n	5002 <flash_nrf_erase+0x32>
			return 0;
    4ffe:	2000      	movs	r0, #0
}
    5000:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    5002:	f001 fd5d 	bl	6ac0 <nrfx_nvmc_flash_page_size_get>
    5006:	4606      	mov	r6, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    5008:	4620      	mov	r0, r4
    500a:	f7fe fccb 	bl	39a4 <nrfx_nvmc_page_erase>
	} while (e_ctx->len > 0);
    500e:	1bad      	subs	r5, r5, r6
    5010:	4434      	add	r4, r6
    5012:	d1f9      	bne.n	5008 <flash_nrf_erase+0x38>
    5014:	e7f3      	b.n	4ffe <flash_nrf_erase+0x2e>
			return -EINVAL;
    5016:	f06f 0015 	mvn.w	r0, #21
    501a:	e7f1      	b.n	5000 <flash_nrf_erase+0x30>

0000501c <flash_nrf_read>:
{
    501c:	b570      	push	{r4, r5, r6, lr}
    501e:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    5020:	4619      	mov	r1, r3
    5022:	4628      	mov	r0, r5
{
    5024:	4616      	mov	r6, r2
    5026:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    5028:	f7ff ffc1 	bl	4fae <is_regular_addr_valid>
    502c:	b138      	cbz	r0, 503e <flash_nrf_read+0x22>
	if (!len) {
    502e:	b124      	cbz	r4, 503a <flash_nrf_read+0x1e>
	memcpy(data, (void *)addr, len);
    5030:	4622      	mov	r2, r4
    5032:	4629      	mov	r1, r5
    5034:	4630      	mov	r0, r6
    5036:	f7ff fe8a 	bl	4d4e <memcpy>
		return 0;
    503a:	2000      	movs	r0, #0
}
    503c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    503e:	f06f 0015 	mvn.w	r0, #21
    5042:	e7fb      	b.n	503c <flash_nrf_read+0x20>

00005044 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    5044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    5048:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    504a:	6883      	ldr	r3, [r0, #8]
{
    504c:	b086      	sub	sp, #24
    504e:	4688      	mov	r8, r1
    5050:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    5052:	691b      	ldr	r3, [r3, #16]
    5054:	aa02      	add	r2, sp, #8
    5056:	a901      	add	r1, sp, #4
    5058:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    505a:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    505c:	4625      	mov	r5, r4
    505e:	9b02      	ldr	r3, [sp, #8]
    5060:	42ab      	cmp	r3, r5
    5062:	d802      	bhi.n	506a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    5064:	b006      	add	sp, #24
    5066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    506a:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    506c:	9f01      	ldr	r7, [sp, #4]
    506e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    5072:	687b      	ldr	r3, [r7, #4]
    5074:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    5076:	683a      	ldr	r2, [r7, #0]
    5078:	eb0a 0306 	add.w	r3, sl, r6
    507c:	42b2      	cmp	r2, r6
    507e:	d802      	bhi.n	5086 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    5080:	469a      	mov	sl, r3
    5082:	3501      	adds	r5, #1
    5084:	e7eb      	b.n	505e <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    5086:	4649      	mov	r1, r9
			page_info.start_offset = off;
    5088:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    508a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    508c:	a803      	add	r0, sp, #12
    508e:	47c0      	blx	r8
    5090:	2800      	cmp	r0, #0
    5092:	d0e7      	beq.n	5064 <flash_page_foreach+0x20>
			off += page_info.size;
    5094:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    5096:	3601      	adds	r6, #1
			off += page_info.size;
    5098:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    509a:	e7ec      	b.n	5076 <flash_page_foreach+0x32>

0000509c <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    509c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    509e:	6843      	ldr	r3, [r0, #4]
    50a0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    50a2:	7a05      	ldrb	r5, [r0, #8]
    50a4:	6844      	ldr	r4, [r0, #4]
    50a6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    50aa:	42a3      	cmp	r3, r4
    50ac:	d302      	bcc.n	50b4 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    50ae:	f06f 0001 	mvn.w	r0, #1
}
    50b2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    50b4:	795c      	ldrb	r4, [r3, #5]
    50b6:	428c      	cmp	r4, r1
    50b8:	d001      	beq.n	50be <pinctrl_lookup_state+0x22>
		(*state)++;
    50ba:	3308      	adds	r3, #8
    50bc:	e7f0      	b.n	50a0 <pinctrl_lookup_state+0x4>
			return 0;
    50be:	2000      	movs	r0, #0
    50c0:	e7f7      	b.n	50b2 <pinctrl_lookup_state+0x16>

000050c2 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    50c2:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    50c4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    50c8:	009b      	lsls	r3, r3, #2
    50ca:	b29b      	uxth	r3, r3
    50cc:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    50d0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    50d4:	601a      	str	r2, [r3, #0]
    50d6:	681b      	ldr	r3, [r3, #0]
}
    50d8:	4770      	bx	lr

000050da <sys_clock_set_timeout>:
}
    50da:	4770      	bx	lr

000050dc <sys_clock_elapsed>:
}
    50dc:	2000      	movs	r0, #0
    50de:	4770      	bx	lr

000050e0 <sys_clock_cycle_get_32>:
{
    50e0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    50e2:	f7fd fbfb 	bl	28dc <z_nrf_rtc_timer_read>
}
    50e6:	bd08      	pop	{r3, pc}

000050e8 <boot_perform_update_hook>:
}
    50e8:	2001      	movs	r0, #1
    50ea:	4770      	bx	lr

000050ec <boot_read_swap_state_primary_slot_hook>:
	if (image_index == 1) {
    50ec:	2801      	cmp	r0, #1
		state->magic = BOOT_MAGIC_UNSET;
    50ee:	bf01      	itttt	eq
    50f0:	2303      	moveq	r3, #3
		state->swap_type = BOOT_SWAP_TYPE_NONE;
    50f2:	7048      	strbeq	r0, [r1, #1]
		state->image_num = image_index;
    50f4:	7108      	strbeq	r0, [r1, #4]
		state->magic = BOOT_MAGIC_UNSET;
    50f6:	700b      	strbeq	r3, [r1, #0]
		return 0;
    50f8:	bf05      	ittet	eq
    50fa:	2000      	moveq	r0, #0
		state->copy_done = BOOT_FLAG_UNSET;
    50fc:	708b      	strbeq	r3, [r1, #2]
	return BOOT_HOOK_REGULAR;
    50fe:	2001      	movne	r0, #1
		state->image_ok = BOOT_FLAG_UNSET;
    5100:	70cb      	strbeq	r3, [r1, #3]
}
    5102:	4770      	bx	lr

00005104 <boot_copy_region_post_hook>:

int boot_copy_region_post_hook(int img_index, const struct flash_area *area,
		size_t size)
{
	if (img_index == NET_CORE_SECONDARY_SLOT) {
    5104:	2801      	cmp	r0, #1
    5106:	d101      	bne.n	510c <boot_copy_region_post_hook+0x8>
		return network_core_update(true);
    5108:	f7fd be5e 	b.w	2dc8 <network_core_update>
	}

	return 0;
}
    510c:	2000      	movs	r0, #0
    510e:	4770      	bx	lr

00005110 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5110:	f7ff b950 	b.w	43b4 <nrf_cc3xx_platform_init_no_rng>

00005114 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    5114:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5116:	f7fc fa51 	bl	15bc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    511a:	f7ff fdb9 	bl	4c90 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    511e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    5122:	f7ff b947 	b.w	43b4 <nrf_cc3xx_platform_init_no_rng>

00005126 <boot_swap_info_off>:
    5126:	6880      	ldr	r0, [r0, #8]
    5128:	3818      	subs	r0, #24
    512a:	f020 0007 	bic.w	r0, r0, #7
}
    512e:	3810      	subs	r0, #16
    5130:	4770      	bx	lr

00005132 <boot_magic_compatible_check>:
    switch (tbl_val) {
    5132:	2804      	cmp	r0, #4
    5134:	d009      	beq.n	514a <boot_magic_compatible_check+0x18>
    5136:	2805      	cmp	r0, #5
    5138:	d103      	bne.n	5142 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    513a:	1e48      	subs	r0, r1, #1
    513c:	bf18      	it	ne
    513e:	2001      	movne	r0, #1
    5140:	4770      	bx	lr
        return tbl_val == val;
    5142:	1a43      	subs	r3, r0, r1
    5144:	4258      	negs	r0, r3
    5146:	4158      	adcs	r0, r3
    5148:	4770      	bx	lr
    switch (tbl_val) {
    514a:	2001      	movs	r0, #1
}
    514c:	4770      	bx	lr

0000514e <bootutil_buffer_is_erased>:
{
    514e:	b538      	push	{r3, r4, r5, lr}
    5150:	4615      	mov	r5, r2
    if (buffer == NULL || len == 0) {
    5152:	460c      	mov	r4, r1
    5154:	b161      	cbz	r1, 5170 <bootutil_buffer_is_erased+0x22>
    5156:	b15a      	cbz	r2, 5170 <bootutil_buffer_is_erased+0x22>
    erased_val = flash_area_erased_val(area);
    5158:	f7ff fd70 	bl	4c3c <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    515c:	4621      	mov	r1, r4
    515e:	4425      	add	r5, r4
        if (u8b[i] != erased_val) {
    5160:	f811 3b01 	ldrb.w	r3, [r1], #1
    5164:	4283      	cmp	r3, r0
    5166:	d103      	bne.n	5170 <bootutil_buffer_is_erased+0x22>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    5168:	42a9      	cmp	r1, r5
    516a:	d1f9      	bne.n	5160 <bootutil_buffer_is_erased+0x12>
    return true;
    516c:	2001      	movs	r0, #1
}
    516e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    5170:	2000      	movs	r0, #0
    5172:	e7fc      	b.n	516e <bootutil_buffer_is_erased+0x20>

00005174 <boot_read_flag>:
{
    5174:	b538      	push	{r3, r4, r5, lr}
    5176:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    5178:	2301      	movs	r3, #1
{
    517a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    517c:	4622      	mov	r2, r4
{
    517e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    5180:	f7ff fd17 	bl	4bb2 <flash_area_read>
    if (rc < 0) {
    5184:	2800      	cmp	r0, #0
    5186:	db0f      	blt.n	51a8 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    5188:	2201      	movs	r2, #1
    518a:	4621      	mov	r1, r4
    518c:	4628      	mov	r0, r5
    518e:	f7ff ffde 	bl	514e <bootutil_buffer_is_erased>
    5192:	b938      	cbnz	r0, 51a4 <boot_read_flag+0x30>
    if (flag != BOOT_FLAG_SET) {
    5194:	7823      	ldrb	r3, [r4, #0]
    return BOOT_FLAG_SET;
    5196:	2b01      	cmp	r3, #1
        *flag = boot_flag_decode(*flag);
    5198:	bf14      	ite	ne
    519a:	2302      	movne	r3, #2
    519c:	2301      	moveq	r3, #1
    519e:	2000      	movs	r0, #0
    51a0:	7023      	strb	r3, [r4, #0]
}
    51a2:	bd38      	pop	{r3, r4, r5, pc}
    51a4:	2303      	movs	r3, #3
    51a6:	e7fa      	b.n	519e <boot_read_flag+0x2a>
        return BOOT_EFLASH;
    51a8:	2001      	movs	r0, #1
    51aa:	e7fa      	b.n	51a2 <boot_read_flag+0x2e>

000051ac <boot_read_image_ok>:
    51ac:	6882      	ldr	r2, [r0, #8]
    51ae:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    51b0:	f022 0207 	bic.w	r2, r2, #7
    51b4:	f7ff bfde 	b.w	5174 <boot_read_flag>

000051b8 <boot_read_swap_state_by_id>:
{
    51b8:	b513      	push	{r0, r1, r4, lr}
    51ba:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    51bc:	b2c0      	uxtb	r0, r0
    51be:	a901      	add	r1, sp, #4
    51c0:	f7fc f9a4 	bl	150c <flash_area_open>
    if (rc != 0) {
    51c4:	b950      	cbnz	r0, 51dc <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    51c6:	4621      	mov	r1, r4
    51c8:	9801      	ldr	r0, [sp, #4]
    51ca:	f7fd fe45 	bl	2e58 <boot_read_swap_state>
    51ce:	4604      	mov	r4, r0
    flash_area_close(fap);
    51d0:	9801      	ldr	r0, [sp, #4]
    51d2:	f7ff fced 	bl	4bb0 <flash_area_close>
}
    51d6:	4620      	mov	r0, r4
    51d8:	b002      	add	sp, #8
    51da:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    51dc:	2401      	movs	r4, #1
    51de:	e7fa      	b.n	51d6 <boot_read_swap_state_by_id+0x1e>

000051e0 <_mbedtls_init>:
#if defined(CONFIG_MBEDTLS_DEBUG_LEVEL)
	mbedtls_debug_set_threshold(CONFIG_MBEDTLS_DEBUG_LEVEL);
#endif

	return 0;
}
    51e0:	2000      	movs	r0, #0
    51e2:	4770      	bx	lr

000051e4 <mbedtls_asn1_get_len>:
 * ASN.1 DER decoding routines
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    51e4:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    51e6:	6803      	ldr	r3, [r0, #0]
    51e8:	1acd      	subs	r5, r1, r3
    51ea:	2d00      	cmp	r5, #0
    51ec:	dc02      	bgt.n	51f4 <mbedtls_asn1_get_len+0x10>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    51ee:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    if( *len > (size_t) ( end - *p ) )
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    return( 0 );
}
    51f2:	bd70      	pop	{r4, r5, r6, pc}
    if( ( **p & 0x80 ) == 0 )
    51f4:	f993 6000 	ldrsb.w	r6, [r3]
    51f8:	781c      	ldrb	r4, [r3, #0]
    51fa:	2e00      	cmp	r6, #0
    51fc:	db0a      	blt.n	5214 <mbedtls_asn1_get_len+0x30>
        *len = *(*p)++;
    51fe:	1c5c      	adds	r4, r3, #1
    5200:	6004      	str	r4, [r0, #0]
    5202:	781b      	ldrb	r3, [r3, #0]
    5204:	6013      	str	r3, [r2, #0]
    if( *len > (size_t) ( end - *p ) )
    5206:	6803      	ldr	r3, [r0, #0]
    5208:	1ac9      	subs	r1, r1, r3
    520a:	6813      	ldr	r3, [r2, #0]
    520c:	428b      	cmp	r3, r1
    520e:	d8ee      	bhi.n	51ee <mbedtls_asn1_get_len+0xa>
    return( 0 );
    5210:	2000      	movs	r0, #0
    5212:	e7ee      	b.n	51f2 <mbedtls_asn1_get_len+0xe>
        switch( **p & 0x7F )
    5214:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    5218:	3c01      	subs	r4, #1
    521a:	2c03      	cmp	r4, #3
    521c:	d82b      	bhi.n	5276 <mbedtls_asn1_get_len+0x92>
    521e:	e8df f004 	tbb	[pc, r4]
    5222:	0a02      	.short	0x0a02
    5224:	2114      	.short	0x2114
            if( ( end - *p ) < 2 )
    5226:	2d01      	cmp	r5, #1
    5228:	d0e1      	beq.n	51ee <mbedtls_asn1_get_len+0xa>
            *len = (*p)[1];
    522a:	785b      	ldrb	r3, [r3, #1]
    522c:	6013      	str	r3, [r2, #0]
            (*p) += 2;
    522e:	6803      	ldr	r3, [r0, #0]
    5230:	3302      	adds	r3, #2
            (*p) += 5;
    5232:	6003      	str	r3, [r0, #0]
            break;
    5234:	e7e7      	b.n	5206 <mbedtls_asn1_get_len+0x22>
            if( ( end - *p ) < 3 )
    5236:	2d02      	cmp	r5, #2
    5238:	ddd9      	ble.n	51ee <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    523a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    523e:	ba5b      	rev16	r3, r3
    5240:	b29b      	uxth	r3, r3
    5242:	6013      	str	r3, [r2, #0]
            (*p) += 3;
    5244:	6803      	ldr	r3, [r0, #0]
    5246:	3303      	adds	r3, #3
    5248:	e7f3      	b.n	5232 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 4 )
    524a:	2d03      	cmp	r5, #3
    524c:	ddcf      	ble.n	51ee <mbedtls_asn1_get_len+0xa>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    524e:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    5250:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5252:	0224      	lsls	r4, r4, #8
    5254:	78db      	ldrb	r3, [r3, #3]
            *len = ( (size_t)(*p)[1] << 16 ) |
    5256:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    525a:	4323      	orrs	r3, r4
            *len = ( (size_t)(*p)[1] << 16 ) |
    525c:	6013      	str	r3, [r2, #0]
            (*p) += 4;
    525e:	6803      	ldr	r3, [r0, #0]
    5260:	3304      	adds	r3, #4
    5262:	e7e6      	b.n	5232 <mbedtls_asn1_get_len+0x4e>
            if( ( end - *p ) < 5 )
    5264:	2d04      	cmp	r5, #4
    5266:	ddc2      	ble.n	51ee <mbedtls_asn1_get_len+0xa>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    5268:	f8d3 3001 	ldr.w	r3, [r3, #1]
    526c:	ba1b      	rev	r3, r3
    526e:	6013      	str	r3, [r2, #0]
            (*p) += 5;
    5270:	6803      	ldr	r3, [r0, #0]
    5272:	3305      	adds	r3, #5
    5274:	e7dd      	b.n	5232 <mbedtls_asn1_get_len+0x4e>
        switch( **p & 0x7F )
    5276:	f06f 0063 	mvn.w	r0, #99	; 0x63
    527a:	e7ba      	b.n	51f2 <mbedtls_asn1_get_len+0xe>

0000527c <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    527c:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    527e:	6804      	ldr	r4, [r0, #0]
    5280:	1b0e      	subs	r6, r1, r4
    5282:	2e00      	cmp	r6, #0
    5284:	dd07      	ble.n	5296 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    5286:	7826      	ldrb	r6, [r4, #0]
    5288:	429e      	cmp	r6, r3
    528a:	d108      	bne.n	529e <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    528c:	3401      	adds	r4, #1
    528e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    5290:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    5292:	f7ff bfa7 	b.w	51e4 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    5296:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    529a:	bc70      	pop	{r4, r5, r6}
    529c:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    529e:	f06f 0061 	mvn.w	r0, #97	; 0x61
    52a2:	e7fa      	b.n	529a <mbedtls_asn1_get_tag+0x1e>

000052a4 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    52a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    52a6:	2302      	movs	r3, #2
{
    52a8:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    52aa:	aa01      	add	r2, sp, #4
{
    52ac:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    52ae:	f7ff ffe5 	bl	527c <mbedtls_asn1_get_tag>
    52b2:	b940      	cbnz	r0, 52c6 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    52b4:	9e01      	ldr	r6, [sp, #4]
    52b6:	4628      	mov	r0, r5
    52b8:	4632      	mov	r2, r6
    52ba:	6821      	ldr	r1, [r4, #0]
    52bc:	f000 f8ef 	bl	549e <mbedtls_mpi_read_binary>

    *p += len;
    52c0:	6823      	ldr	r3, [r4, #0]
    52c2:	4433      	add	r3, r6
    52c4:	6023      	str	r3, [r4, #0]

    return( ret );
}
    52c6:	b002      	add	sp, #8
    52c8:	bd70      	pop	{r4, r5, r6, pc}

000052ca <mpi_select>:
 *                      this must satisfy 0 <= idx < T_size.
 *
 * \return \c 0 on success, or a negative error code.
 */
static int mpi_select( mbedtls_mpi *R, const mbedtls_mpi *T, size_t T_size, size_t idx )
{
    52ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52ce:	4606      	mov	r6, r0
    52d0:	460f      	mov	r7, r1
    52d2:	4615      	mov	r5, r2
    52d4:	4698      	mov	r8, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    for( size_t i = 0; i < T_size; i++ )
    52d6:	2400      	movs	r4, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( R, &T[i],
    52d8:	f04f 090c 	mov.w	r9, #12
    52dc:	4641      	mov	r1, r8
    52de:	4620      	mov	r0, r4
    52e0:	f001 f917 	bl	6512 <mbedtls_ct_size_bool_eq>
    52e4:	fb09 7104 	mla	r1, r9, r4, r7
    52e8:	b2c2      	uxtb	r2, r0
    52ea:	4630      	mov	r0, r6
    52ec:	f001 f929 	bl	6542 <mbedtls_mpi_safe_cond_assign>
    52f0:	b910      	cbnz	r0, 52f8 <mpi_select+0x2e>
    for( size_t i = 0; i < T_size; i++ )
    52f2:	3401      	adds	r4, #1
    52f4:	42a5      	cmp	r5, r4
    52f6:	d1f1      	bne.n	52dc <mpi_select+0x12>
                        (unsigned char) mbedtls_ct_size_bool_eq( i, idx ) ) );
    }

cleanup:
    return( ret );
}
    52f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000052fc <mpi_montmul.isra.0>:
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B,
    52fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    mbedtls_mpi_core_montmul( A->p, A->p, B->p, B->n, N->p, N->n, mm, T->p );
    52fe:	9c06      	ldr	r4, [sp, #24]
    5300:	e9cd 3402 	strd	r3, r4, [sp, #8]
    5304:	6853      	ldr	r3, [r2, #4]
    5306:	9301      	str	r3, [sp, #4]
    5308:	6893      	ldr	r3, [r2, #8]
    530a:	9300      	str	r3, [sp, #0]
    530c:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    5310:	4601      	mov	r1, r0
    5312:	f001 f8a4 	bl	645e <mbedtls_mpi_core_montmul>
}
    5316:	b004      	add	sp, #16
    5318:	bd10      	pop	{r4, pc}

0000531a <mbedtls_mpi_init>:
    X->n = 0;
    531a:	2300      	movs	r3, #0
    531c:	2201      	movs	r2, #1
    X->p = NULL;
    531e:	6083      	str	r3, [r0, #8]
    X->n = 0;
    5320:	e9c0 2300 	strd	r2, r3, [r0]
}
    5324:	4770      	bx	lr

00005326 <mbedtls_mpi_free>:
{
    5326:	b510      	push	{r4, lr}
    if( X == NULL )
    5328:	4604      	mov	r4, r0
    532a:	b168      	cbz	r0, 5348 <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    532c:	6880      	ldr	r0, [r0, #8]
    532e:	b130      	cbz	r0, 533e <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    5330:	6861      	ldr	r1, [r4, #4]
    5332:	0089      	lsls	r1, r1, #2
    5334:	f7ff f896 	bl	4464 <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    5338:	68a0      	ldr	r0, [r4, #8]
    533a:	f7fd ffdd 	bl	32f8 <mbedtls_free>
    X->n = 0;
    533e:	2300      	movs	r3, #0
    5340:	2201      	movs	r2, #1
    5342:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    5346:	60a3      	str	r3, [r4, #8]
}
    5348:	bd10      	pop	{r4, pc}

0000534a <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    534a:	f242 7310 	movw	r3, #10000	; 0x2710
    534e:	4299      	cmp	r1, r3
{
    5350:	b570      	push	{r4, r5, r6, lr}
    5352:	4604      	mov	r4, r0
    5354:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    5356:	d902      	bls.n	535e <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    5358:	f06f 000f 	mvn.w	r0, #15
}
    535c:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    535e:	6843      	ldr	r3, [r0, #4]
    5360:	428b      	cmp	r3, r1
    5362:	d301      	bcc.n	5368 <mbedtls_mpi_grow+0x1e>
    return( 0 );
    5364:	2000      	movs	r0, #0
    5366:	e7f9      	b.n	535c <mbedtls_mpi_grow+0x12>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    5368:	2104      	movs	r1, #4
    536a:	4628      	mov	r0, r5
    536c:	f7fd ffbe 	bl	32ec <mbedtls_calloc>
    5370:	4606      	mov	r6, r0
    5372:	2800      	cmp	r0, #0
    5374:	d0f0      	beq.n	5358 <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    5376:	68a1      	ldr	r1, [r4, #8]
    5378:	b159      	cbz	r1, 5392 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
    537a:	6862      	ldr	r2, [r4, #4]
    537c:	0092      	lsls	r2, r2, #2
    537e:	f7ff fce6 	bl	4d4e <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    5382:	6861      	ldr	r1, [r4, #4]
    5384:	68a0      	ldr	r0, [r4, #8]
    5386:	0089      	lsls	r1, r1, #2
    5388:	f7ff f86c 	bl	4464 <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    538c:	68a0      	ldr	r0, [r4, #8]
    538e:	f7fd ffb3 	bl	32f8 <mbedtls_free>
        X->p = p;
    5392:	e9c4 5601 	strd	r5, r6, [r4, #4]
    5396:	e7e5      	b.n	5364 <mbedtls_mpi_grow+0x1a>

00005398 <mbedtls_mpi_resize_clear>:
{
    5398:	b538      	push	{r3, r4, r5, lr}
    539a:	4604      	mov	r4, r0
    if( limbs == 0 )
    539c:	460d      	mov	r5, r1
    539e:	b919      	cbnz	r1, 53a8 <mbedtls_mpi_resize_clear+0x10>
        mbedtls_mpi_free( X );
    53a0:	f7ff ffc1 	bl	5326 <mbedtls_mpi_free>
}
    53a4:	2000      	movs	r0, #0
    53a6:	bd38      	pop	{r3, r4, r5, pc}
    else if( X->n == limbs )
    53a8:	6842      	ldr	r2, [r0, #4]
    53aa:	428a      	cmp	r2, r1
    53ac:	d107      	bne.n	53be <mbedtls_mpi_resize_clear+0x26>
        memset( X->p, 0, limbs * ciL );
    53ae:	2100      	movs	r1, #0
    53b0:	6880      	ldr	r0, [r0, #8]
    53b2:	0092      	lsls	r2, r2, #2
    53b4:	f7ff fcd6 	bl	4d64 <memset>
        X->s = 1;
    53b8:	2301      	movs	r3, #1
    53ba:	6023      	str	r3, [r4, #0]
        return( 0 );
    53bc:	e7f2      	b.n	53a4 <mbedtls_mpi_resize_clear+0xc>
        mbedtls_mpi_free( X );
    53be:	f7ff ffb2 	bl	5326 <mbedtls_mpi_free>
        return( mbedtls_mpi_grow( X, limbs ) );
    53c2:	4629      	mov	r1, r5
    53c4:	4620      	mov	r0, r4
}
    53c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return( mbedtls_mpi_grow( X, limbs ) );
    53ca:	f7ff bfbe 	b.w	534a <mbedtls_mpi_grow>

000053ce <mbedtls_mpi_copy>:
    if( X == Y )
    53ce:	4288      	cmp	r0, r1
{
    53d0:	b570      	push	{r4, r5, r6, lr}
    53d2:	4605      	mov	r5, r0
    53d4:	460e      	mov	r6, r1
    if( X == Y )
    53d6:	d009      	beq.n	53ec <mbedtls_mpi_copy+0x1e>
    if( Y->n == 0 )
    53d8:	6849      	ldr	r1, [r1, #4]
        if( X->n != 0 )
    53da:	6842      	ldr	r2, [r0, #4]
    if( Y->n == 0 )
    53dc:	b941      	cbnz	r1, 53f0 <mbedtls_mpi_copy+0x22>
        if( X->n != 0 )
    53de:	b12a      	cbz	r2, 53ec <mbedtls_mpi_copy+0x1e>
            X->s = 1;
    53e0:	2301      	movs	r3, #1
            memset( X->p, 0, X->n * ciL );
    53e2:	0092      	lsls	r2, r2, #2
            X->s = 1;
    53e4:	6003      	str	r3, [r0, #0]
            memset( X->p, 0, X->n * ciL );
    53e6:	6880      	ldr	r0, [r0, #8]
    53e8:	f7ff fcbc 	bl	4d64 <memset>
        return( 0 );
    53ec:	2000      	movs	r0, #0
}
    53ee:	bd70      	pop	{r4, r5, r6, pc}
    for( i = Y->n - 1; i > 0; i-- )
    53f0:	1e4c      	subs	r4, r1, #1
    53f2:	b984      	cbnz	r4, 5416 <mbedtls_mpi_copy+0x48>
    X->s = Y->s;
    53f4:	6833      	ldr	r3, [r6, #0]
    i++;
    53f6:	3401      	adds	r4, #1
    if( X->n < i )
    53f8:	4294      	cmp	r4, r2
    X->s = Y->s;
    53fa:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    53fc:	d912      	bls.n	5424 <mbedtls_mpi_copy+0x56>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    53fe:	4621      	mov	r1, r4
    5400:	4628      	mov	r0, r5
    5402:	f7ff ffa2 	bl	534a <mbedtls_mpi_grow>
    5406:	2800      	cmp	r0, #0
    5408:	d1f1      	bne.n	53ee <mbedtls_mpi_copy+0x20>
    memcpy( X->p, Y->p, i * ciL );
    540a:	68b1      	ldr	r1, [r6, #8]
    540c:	68a8      	ldr	r0, [r5, #8]
    540e:	00a2      	lsls	r2, r4, #2
    5410:	f7ff fc9d 	bl	4d4e <memcpy>
    5414:	e7ea      	b.n	53ec <mbedtls_mpi_copy+0x1e>
        if( Y->p[i] != 0 )
    5416:	68b3      	ldr	r3, [r6, #8]
    5418:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    541c:	2b00      	cmp	r3, #0
    541e:	d1e9      	bne.n	53f4 <mbedtls_mpi_copy+0x26>
    for( i = Y->n - 1; i > 0; i-- )
    5420:	3c01      	subs	r4, #1
    5422:	e7e6      	b.n	53f2 <mbedtls_mpi_copy+0x24>
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    5424:	68a8      	ldr	r0, [r5, #8]
    5426:	1b12      	subs	r2, r2, r4
    5428:	2100      	movs	r1, #0
    542a:	0092      	lsls	r2, r2, #2
    542c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5430:	f7ff fc98 	bl	4d64 <memset>
    5434:	e7e9      	b.n	540a <mbedtls_mpi_copy+0x3c>

00005436 <mbedtls_mpi_lset>:
{
    5436:	b570      	push	{r4, r5, r6, lr}
    5438:	460c      	mov	r4, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    543a:	2101      	movs	r1, #1
{
    543c:	4605      	mov	r5, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    543e:	f7ff ff84 	bl	534a <mbedtls_mpi_grow>
    5442:	4606      	mov	r6, r0
    5444:	b978      	cbnz	r0, 5466 <mbedtls_mpi_lset+0x30>
    memset( X->p, 0, X->n * ciL );
    5446:	686a      	ldr	r2, [r5, #4]
    5448:	4601      	mov	r1, r0
    544a:	0092      	lsls	r2, r2, #2
    544c:	68a8      	ldr	r0, [r5, #8]
    544e:	f7ff fc89 	bl	4d64 <memset>
    if( z >= 0 )
    5452:	2c00      	cmp	r4, #0
    X->s    = ( z < 0 ) ? -1 : 1;
    5454:	bfb4      	ite	lt
    5456:	f04f 32ff 	movlt.w	r2, #4294967295
    545a:	2201      	movge	r2, #1
    X->p[0] = mpi_sint_abs( z );
    545c:	68a9      	ldr	r1, [r5, #8]
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    545e:	bfb8      	it	lt
    5460:	4264      	neglt	r4, r4
    X->s    = ( z < 0 ) ? -1 : 1;
    5462:	600c      	str	r4, [r1, #0]
    5464:	602a      	str	r2, [r5, #0]
}
    5466:	4630      	mov	r0, r6
    5468:	bd70      	pop	{r4, r5, r6, pc}

0000546a <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    546a:	6843      	ldr	r3, [r0, #4]
    546c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    5470:	bf3f      	itttt	cc
    5472:	6883      	ldrcc	r3, [r0, #8]
    5474:	094a      	lsrcc	r2, r1, #5
    5476:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    547a:	f001 011f 	andcc.w	r1, r1, #31
    547e:	bf3a      	itte	cc
    5480:	40c8      	lsrcc	r0, r1
    5482:	f000 0001 	andcc.w	r0, r0, #1
        return( 0 );
    5486:	2000      	movcs	r0, #0
}
    5488:	4770      	bx	lr

0000548a <mbedtls_mpi_bitlen>:
    return( mbedtls_mpi_core_bitlen( X->p, X->n ) );
    548a:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    548e:	f000 be0b 	b.w	60a8 <mbedtls_mpi_core_bitlen>

00005492 <mbedtls_mpi_size>:
{
    5492:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    5494:	f7ff fff9 	bl	548a <mbedtls_mpi_bitlen>
    5498:	3007      	adds	r0, #7
}
    549a:	08c0      	lsrs	r0, r0, #3
    549c:	bd08      	pop	{r3, pc}

0000549e <mbedtls_mpi_read_binary>:
{
    549e:	b570      	push	{r4, r5, r6, lr}
    54a0:	460e      	mov	r6, r1
    const size_t limbs = CHARS_TO_LIMBS( buflen );
    54a2:	f012 0103 	ands.w	r1, r2, #3
    54a6:	bf18      	it	ne
    54a8:	2101      	movne	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    54aa:	eb01 0192 	add.w	r1, r1, r2, lsr #2
{
    54ae:	4605      	mov	r5, r0
    54b0:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_resize_clear( X, limbs ) );
    54b2:	f7ff ff71 	bl	5398 <mbedtls_mpi_resize_clear>
    54b6:	b938      	cbnz	r0, 54c8 <mbedtls_mpi_read_binary+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    54b8:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    54bc:	4623      	mov	r3, r4
    54be:	4632      	mov	r2, r6
}
    54c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_core_read_be( X->p, X->n, buf, buflen ) );
    54c4:	f000 be3a 	b.w	613c <mbedtls_mpi_core_read_be>
}
    54c8:	bd70      	pop	{r4, r5, r6, pc}

000054ca <mbedtls_mpi_write_binary>:
{
    54ca:	4613      	mov	r3, r2
    return( mbedtls_mpi_core_write_be( X->p, X->n, buf, buflen ) );
    54cc:	460a      	mov	r2, r1
    54ce:	e9d0 1001 	ldrd	r1, r0, [r0, #4]
    54d2:	f000 be58 	b.w	6186 <mbedtls_mpi_core_write_be>

000054d6 <mbedtls_mpi_shift_l>:
{
    54d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54d8:	4605      	mov	r5, r0
    54da:	460e      	mov	r6, r1
    v0 = count / (biL    );
    54dc:	094c      	lsrs	r4, r1, #5
    t1 = count & (biL - 1);
    54de:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    54e2:	f7ff ffd2 	bl	548a <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    54e6:	686b      	ldr	r3, [r5, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    54e8:	4430      	add	r0, r6
    if( X->n * biL < i )
    54ea:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    54ee:	d805      	bhi.n	54fc <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    54f0:	2e1f      	cmp	r6, #31
    54f2:	d80f      	bhi.n	5514 <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    54f4:	2f00      	cmp	r7, #0
    54f6:	d141      	bne.n	557c <mbedtls_mpi_shift_l+0xa6>
    ret = 0;
    54f8:	2000      	movs	r0, #0
    54fa:	e00a      	b.n	5512 <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    54fc:	f010 011f 	ands.w	r1, r0, #31
    5500:	bf18      	it	ne
    5502:	2101      	movne	r1, #1
    5504:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    5508:	4628      	mov	r0, r5
    550a:	f7ff ff1e 	bl	534a <mbedtls_mpi_grow>
    550e:	2800      	cmp	r0, #0
    5510:	d0ee      	beq.n	54f0 <mbedtls_mpi_shift_l+0x1a>
}
    5512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    5514:	f06f 0003 	mvn.w	r0, #3
    5518:	686b      	ldr	r3, [r5, #4]
    551a:	4360      	muls	r0, r4
    551c:	4619      	mov	r1, r3
    551e:	009a      	lsls	r2, r3, #2
    5520:	42a1      	cmp	r1, r4
    5522:	f1a2 0204 	sub.w	r2, r2, #4
    5526:	d80c      	bhi.n	5542 <mbedtls_mpi_shift_l+0x6c>
    5528:	1ae2      	subs	r2, r4, r3
    552a:	429c      	cmp	r4, r3
    552c:	bf88      	it	hi
    552e:	2200      	movhi	r2, #0
    5530:	4413      	add	r3, r2
            X->p[i - 1] = 0;
    5532:	2200      	movs	r2, #0
    5534:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    5536:	3b04      	subs	r3, #4
    5538:	1d19      	adds	r1, r3, #4
    553a:	d0db      	beq.n	54f4 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    553c:	68a9      	ldr	r1, [r5, #8]
    553e:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    5540:	e7f9      	b.n	5536 <mbedtls_mpi_shift_l+0x60>
            X->p[i - 1] = X->p[i - v0 - 1];
    5542:	68ae      	ldr	r6, [r5, #8]
        for( i = X->n; i > v0; i-- )
    5544:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    5546:	eb06 0c02 	add.w	ip, r6, r2
    554a:	f85c c000 	ldr.w	ip, [ip, r0]
    554e:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    5552:	e7e5      	b.n	5520 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    5554:	68ab      	ldr	r3, [r5, #8]
    5556:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
            X->p[i] <<= t1;
    555a:	fa01 f007 	lsl.w	r0, r1, r7
    555e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            X->p[i] |= r0;
    5562:	68a8      	ldr	r0, [r5, #8]
    5564:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    5568:	4313      	orrs	r3, r2
    556a:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
            r0 = r1;
    556e:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    5572:	3401      	adds	r4, #1
    5574:	686b      	ldr	r3, [r5, #4]
    5576:	42a3      	cmp	r3, r4
    5578:	d8ec      	bhi.n	5554 <mbedtls_mpi_shift_l+0x7e>
    557a:	e7bd      	b.n	54f8 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    557c:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    557e:	f1c7 0620 	rsb	r6, r7, #32
    5582:	e7f7      	b.n	5574 <mbedtls_mpi_shift_l+0x9e>

00005584 <mbedtls_mpi_shift_r>:
{
    5584:	b508      	push	{r3, lr}
    5586:	460a      	mov	r2, r1
    if( X->n != 0 )
    5588:	6841      	ldr	r1, [r0, #4]
    558a:	b111      	cbz	r1, 5592 <mbedtls_mpi_shift_r+0xe>
        mbedtls_mpi_core_shift_r( X->p, X->n, count );
    558c:	6880      	ldr	r0, [r0, #8]
    558e:	f000 fe2c 	bl	61ea <mbedtls_mpi_core_shift_r>
}
    5592:	2000      	movs	r0, #0
    5594:	bd08      	pop	{r3, pc}

00005596 <mbedtls_mpi_cmp_abs>:
{
    5596:	b510      	push	{r4, lr}
    for( i = X->n; i > 0; i-- )
    5598:	6842      	ldr	r2, [r0, #4]
    559a:	b93a      	cbnz	r2, 55ac <mbedtls_mpi_cmp_abs+0x16>
    for( j = Y->n; j > 0; j-- )
    559c:	684b      	ldr	r3, [r1, #4]
    559e:	b973      	cbnz	r3, 55be <mbedtls_mpi_cmp_abs+0x28>
    if( i == 0 && j == 0 )
    55a0:	b9b2      	cbnz	r2, 55d0 <mbedtls_mpi_cmp_abs+0x3a>
    55a2:	1e18      	subs	r0, r3, #0
    55a4:	bf18      	it	ne
    55a6:	2001      	movne	r0, #1
    55a8:	4240      	negs	r0, r0
}
    55aa:	bd10      	pop	{r4, pc}
        if( X->p[i - 1] != 0 )
    55ac:	6883      	ldr	r3, [r0, #8]
    55ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    55b2:	f853 3c04 	ldr.w	r3, [r3, #-4]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d1f0      	bne.n	559c <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    55ba:	3a01      	subs	r2, #1
    55bc:	e7ed      	b.n	559a <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    55be:	688c      	ldr	r4, [r1, #8]
    55c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    55c4:	f854 4c04 	ldr.w	r4, [r4, #-4]
    55c8:	2c00      	cmp	r4, #0
    55ca:	d1e9      	bne.n	55a0 <mbedtls_mpi_cmp_abs+0xa>
    for( j = Y->n; j > 0; j-- )
    55cc:	3b01      	subs	r3, #1
    55ce:	e7e6      	b.n	559e <mbedtls_mpi_cmp_abs+0x8>
    if( i > j ) return(  1 );
    55d0:	429a      	cmp	r2, r3
    55d2:	d810      	bhi.n	55f6 <mbedtls_mpi_cmp_abs+0x60>
    if( j > i ) return( -1 );
    55d4:	d311      	bcc.n	55fa <mbedtls_mpi_cmp_abs+0x64>
    55d6:	3a01      	subs	r2, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    55d8:	6883      	ldr	r3, [r0, #8]
    55da:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    55de:	688b      	ldr	r3, [r1, #8]
    55e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    55e4:	429c      	cmp	r4, r3
    55e6:	d806      	bhi.n	55f6 <mbedtls_mpi_cmp_abs+0x60>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    55e8:	f102 32ff 	add.w	r2, r2, #4294967295
    55ec:	d305      	bcc.n	55fa <mbedtls_mpi_cmp_abs+0x64>
    for( ; i > 0; i-- )
    55ee:	1c53      	adds	r3, r2, #1
    55f0:	d1f2      	bne.n	55d8 <mbedtls_mpi_cmp_abs+0x42>
        return( 0 );
    55f2:	2000      	movs	r0, #0
    55f4:	e7d9      	b.n	55aa <mbedtls_mpi_cmp_abs+0x14>
    if( i > j ) return(  1 );
    55f6:	2001      	movs	r0, #1
    55f8:	e7d7      	b.n	55aa <mbedtls_mpi_cmp_abs+0x14>
    if( j > i ) return( -1 );
    55fa:	f04f 30ff 	mov.w	r0, #4294967295
    55fe:	e7d4      	b.n	55aa <mbedtls_mpi_cmp_abs+0x14>

00005600 <mbedtls_mpi_cmp_mpi>:
{
    5600:	4602      	mov	r2, r0
    5602:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    5604:	6843      	ldr	r3, [r0, #4]
    5606:	b923      	cbnz	r3, 5612 <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    5608:	6848      	ldr	r0, [r1, #4]
    560a:	b958      	cbnz	r0, 5624 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    560c:	2b00      	cmp	r3, #0
    560e:	d136      	bne.n	567e <mbedtls_mpi_cmp_mpi+0x7e>
    5610:	e02f      	b.n	5672 <mbedtls_mpi_cmp_mpi+0x72>
        if( X->p[i - 1] != 0 )
    5612:	6890      	ldr	r0, [r2, #8]
    5614:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5618:	f850 0c04 	ldr.w	r0, [r0, #-4]
    561c:	2800      	cmp	r0, #0
    561e:	d1f3      	bne.n	5608 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    5620:	3b01      	subs	r3, #1
    5622:	e7f0      	b.n	5606 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    5624:	688c      	ldr	r4, [r1, #8]
    5626:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    562a:	f855 5c04 	ldr.w	r5, [r5, #-4]
    562e:	bb15      	cbnz	r5, 5676 <mbedtls_mpi_cmp_mpi+0x76>
    for( j = Y->n; j > 0; j-- )
    5630:	3801      	subs	r0, #1
    5632:	e7ea      	b.n	560a <mbedtls_mpi_cmp_mpi+0xa>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    5634:	680d      	ldr	r5, [r1, #0]
    if( j > i ) return( -Y->s );
    5636:	d202      	bcs.n	563e <mbedtls_mpi_cmp_mpi+0x3e>
    5638:	6808      	ldr	r0, [r1, #0]
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    563a:	4240      	negs	r0, r0
    563c:	e020      	b.n	5680 <mbedtls_mpi_cmp_mpi+0x80>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    563e:	6810      	ldr	r0, [r2, #0]
    5640:	2800      	cmp	r0, #0
    5642:	dd03      	ble.n	564c <mbedtls_mpi_cmp_mpi+0x4c>
    5644:	2d00      	cmp	r5, #0
    5646:	da07      	bge.n	5658 <mbedtls_mpi_cmp_mpi+0x58>
    5648:	2001      	movs	r0, #1
    564a:	e019      	b.n	5680 <mbedtls_mpi_cmp_mpi+0x80>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    564c:	2d00      	cmp	r5, #0
    564e:	dd03      	ble.n	5658 <mbedtls_mpi_cmp_mpi+0x58>
    5650:	b110      	cbz	r0, 5658 <mbedtls_mpi_cmp_mpi+0x58>
    5652:	f04f 30ff 	mov.w	r0, #4294967295
    5656:	e013      	b.n	5680 <mbedtls_mpi_cmp_mpi+0x80>
    5658:	3b01      	subs	r3, #1
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    565a:	6891      	ldr	r1, [r2, #8]
    565c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    5660:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    5664:	428d      	cmp	r5, r1
    5666:	d80b      	bhi.n	5680 <mbedtls_mpi_cmp_mpi+0x80>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    5668:	f103 33ff 	add.w	r3, r3, #4294967295
    566c:	d3e5      	bcc.n	563a <mbedtls_mpi_cmp_mpi+0x3a>
    for( ; i > 0; i-- )
    566e:	1c59      	adds	r1, r3, #1
    5670:	d1f3      	bne.n	565a <mbedtls_mpi_cmp_mpi+0x5a>
        return( 0 );
    5672:	2000      	movs	r0, #0
    5674:	e004      	b.n	5680 <mbedtls_mpi_cmp_mpi+0x80>
    if( i == 0 && j == 0 )
    5676:	2b00      	cmp	r3, #0
    5678:	d0de      	beq.n	5638 <mbedtls_mpi_cmp_mpi+0x38>
    if( i > j ) return(  X->s );
    567a:	4283      	cmp	r3, r0
    567c:	d9da      	bls.n	5634 <mbedtls_mpi_cmp_mpi+0x34>
    567e:	6810      	ldr	r0, [r2, #0]
}
    5680:	bd30      	pop	{r4, r5, pc}

00005682 <mbedtls_mpi_cmp_int>:
{
    5682:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( z >= 0 )
    5684:	2900      	cmp	r1, #0
    Y.s = ( z < 0 ) ? -1 : 1;
    5686:	bfb6      	itet	lt
    5688:	f04f 33ff 	movlt.w	r3, #4294967295
    568c:	2301      	movge	r3, #1
    return( (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z );
    568e:	4249      	neglt	r1, r1
    Y.s = ( z < 0 ) ? -1 : 1;
    5690:	e9cd 1300 	strd	r1, r3, [sp]
    Y.n = 1;
    5694:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    5696:	a901      	add	r1, sp, #4
    Y.n = 1;
    5698:	9302      	str	r3, [sp, #8]
    Y.p = p;
    569a:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    569e:	f7ff ffaf 	bl	5600 <mbedtls_mpi_cmp_mpi>
}
    56a2:	b005      	add	sp, #20
    56a4:	f85d fb04 	ldr.w	pc, [sp], #4

000056a8 <mbedtls_mpi_add_abs>:
    if( X == B )
    56a8:	4290      	cmp	r0, r2
{
    56aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56ae:	4605      	mov	r5, r0
    56b0:	460f      	mov	r7, r1
    56b2:	4614      	mov	r4, r2
    if( X == B )
    56b4:	d002      	beq.n	56bc <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    56b6:	4288      	cmp	r0, r1
    56b8:	d106      	bne.n	56c8 <mbedtls_mpi_add_abs+0x20>
{
    56ba:	4627      	mov	r7, r4
    X->s = 1;
    56bc:	2301      	movs	r3, #1
    56be:	602b      	str	r3, [r5, #0]
    for( j = B->n; j > 0; j-- )
    56c0:	687c      	ldr	r4, [r7, #4]
    56c2:	b93c      	cbnz	r4, 56d4 <mbedtls_mpi_add_abs+0x2c>
        return( 0 );
    56c4:	2000      	movs	r0, #0
    56c6:	e003      	b.n	56d0 <mbedtls_mpi_add_abs+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    56c8:	f7ff fe81 	bl	53ce <mbedtls_mpi_copy>
    56cc:	2800      	cmp	r0, #0
    56ce:	d0f4      	beq.n	56ba <mbedtls_mpi_add_abs+0x12>
}
    56d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    56d4:	68bb      	ldr	r3, [r7, #8]
    56d6:	ea4f 0884 	mov.w	r8, r4, lsl #2
    56da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    56de:	f853 3c04 	ldr.w	r3, [r3, #-4]
    56e2:	b90b      	cbnz	r3, 56e8 <mbedtls_mpi_add_abs+0x40>
    for( j = B->n; j > 0; j-- )
    56e4:	3c01      	subs	r4, #1
    56e6:	e7ec      	b.n	56c2 <mbedtls_mpi_add_abs+0x1a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    56e8:	4621      	mov	r1, r4
    56ea:	4628      	mov	r0, r5
    56ec:	f7ff fe2d 	bl	534a <mbedtls_mpi_grow>
    56f0:	2800      	cmp	r0, #0
    56f2:	d1ed      	bne.n	56d0 <mbedtls_mpi_add_abs+0x28>
    mbedtls_mpi_uint *p = X->p;
    56f4:	68ae      	ldr	r6, [r5, #8]
    mbedtls_mpi_uint c = mbedtls_mpi_core_add( p, p, B->p, j );
    56f6:	4623      	mov	r3, r4
    56f8:	68ba      	ldr	r2, [r7, #8]
    56fa:	4631      	mov	r1, r6
    56fc:	4630      	mov	r0, r6
    56fe:	f000 fdae 	bl	625e <mbedtls_mpi_core_add>
    5702:	4607      	mov	r7, r0
    p += j;
    5704:	eb06 0308 	add.w	r3, r6, r8
    while( c != 0 )
    5708:	2f00      	cmp	r7, #0
    570a:	d0db      	beq.n	56c4 <mbedtls_mpi_add_abs+0x1c>
        if( j >= X->n )
    570c:	686a      	ldr	r2, [r5, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    570e:	1c66      	adds	r6, r4, #1
        if( j >= X->n )
    5710:	42a2      	cmp	r2, r4
    5712:	d808      	bhi.n	5726 <mbedtls_mpi_add_abs+0x7e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j + 1 ) );
    5714:	4631      	mov	r1, r6
    5716:	4628      	mov	r0, r5
    5718:	f7ff fe17 	bl	534a <mbedtls_mpi_grow>
    571c:	2800      	cmp	r0, #0
    571e:	d1d7      	bne.n	56d0 <mbedtls_mpi_add_abs+0x28>
            p = X->p + j;
    5720:	68ab      	ldr	r3, [r5, #8]
    5722:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        *p += c; c = ( *p < c ); j++; p++;
    5726:	681a      	ldr	r2, [r3, #0]
    5728:	4634      	mov	r4, r6
    572a:	19d2      	adds	r2, r2, r7
    572c:	bf2c      	ite	cs
    572e:	2701      	movcs	r7, #1
    5730:	2700      	movcc	r7, #0
    5732:	f843 2b04 	str.w	r2, [r3], #4
    5736:	e7e7      	b.n	5708 <mbedtls_mpi_add_abs+0x60>

00005738 <mbedtls_mpi_sub_abs>:
{
    5738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    573c:	4605      	mov	r5, r0
    573e:	460e      	mov	r6, r1
    5740:	4690      	mov	r8, r2
    for( n = B->n; n > 0; n-- )
    5742:	6854      	ldr	r4, [r2, #4]
    5744:	b93c      	cbnz	r4, 5756 <mbedtls_mpi_sub_abs+0x1e>
    if( n > A->n )
    5746:	6871      	ldr	r1, [r6, #4]
    5748:	42a1      	cmp	r1, r4
    574a:	d20e      	bcs.n	576a <mbedtls_mpi_sub_abs+0x32>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    574c:	f06f 0709 	mvn.w	r7, #9
}
    5750:	4638      	mov	r0, r7
    5752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[n - 1] != 0 )
    5756:	f8d8 3008 	ldr.w	r3, [r8, #8]
    575a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    575e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    5762:	2b00      	cmp	r3, #0
    5764:	d1ef      	bne.n	5746 <mbedtls_mpi_sub_abs+0xe>
    for( n = B->n; n > 0; n-- )
    5766:	3c01      	subs	r4, #1
    5768:	e7ec      	b.n	5744 <mbedtls_mpi_sub_abs+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, A->n ) );
    576a:	4628      	mov	r0, r5
    576c:	f7ff fded 	bl	534a <mbedtls_mpi_grow>
    5770:	4607      	mov	r7, r0
    5772:	2800      	cmp	r0, #0
    5774:	d1ec      	bne.n	5750 <mbedtls_mpi_sub_abs+0x18>
    if( A->n > n )
    5776:	6872      	ldr	r2, [r6, #4]
    5778:	4294      	cmp	r4, r2
    577a:	d209      	bcs.n	5790 <mbedtls_mpi_sub_abs+0x58>
        memcpy( X->p + n, A->p + n, ( A->n - n ) * ciL );
    577c:	68b1      	ldr	r1, [r6, #8]
    577e:	68a8      	ldr	r0, [r5, #8]
    5780:	1b12      	subs	r2, r2, r4
    5782:	0092      	lsls	r2, r2, #2
    5784:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5788:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    578c:	f7ff fadf 	bl	4d4e <memcpy>
    if( X->n > A->n )
    5790:	686a      	ldr	r2, [r5, #4]
    5792:	6870      	ldr	r0, [r6, #4]
    5794:	4282      	cmp	r2, r0
    5796:	d907      	bls.n	57a8 <mbedtls_mpi_sub_abs+0x70>
        memset( X->p + A->n, 0, ( X->n - A->n ) * ciL );
    5798:	68ab      	ldr	r3, [r5, #8]
    579a:	1a12      	subs	r2, r2, r0
    579c:	2100      	movs	r1, #0
    579e:	0092      	lsls	r2, r2, #2
    57a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    57a4:	f7ff fade 	bl	4d64 <memset>
    carry = mbedtls_mpi_core_sub( X->p, A->p, B->p, n );
    57a8:	f8d8 2008 	ldr.w	r2, [r8, #8]
    57ac:	4623      	mov	r3, r4
    57ae:	68b1      	ldr	r1, [r6, #8]
    57b0:	68a8      	ldr	r0, [r5, #8]
    57b2:	f000 fd6a 	bl	628a <mbedtls_mpi_core_sub>
    if( carry != 0 )
    57b6:	4602      	mov	r2, r0
    57b8:	b910      	cbnz	r0, 57c0 <mbedtls_mpi_sub_abs+0x88>
    X->s = 1;
    57ba:	2301      	movs	r3, #1
    57bc:	602b      	str	r3, [r5, #0]
    57be:	e7c7      	b.n	5750 <mbedtls_mpi_sub_abs+0x18>
        carry = mbedtls_mpi_core_sub_int( X->p + n, X->p + n, carry, X->n - n );
    57c0:	68a9      	ldr	r1, [r5, #8]
    57c2:	686b      	ldr	r3, [r5, #4]
    57c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    57c8:	4608      	mov	r0, r1
    57ca:	1b1b      	subs	r3, r3, r4
    57cc:	f000 fe90 	bl	64f0 <mbedtls_mpi_core_sub_int>
        if( carry != 0 )
    57d0:	2800      	cmp	r0, #0
    57d2:	d0f2      	beq.n	57ba <mbedtls_mpi_sub_abs+0x82>
    57d4:	e7ba      	b.n	574c <mbedtls_mpi_sub_abs+0x14>

000057d6 <add_sub_mpi>:
{
    57d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( A->s * B->s * flip_B < 0 )
    57da:	6816      	ldr	r6, [r2, #0]
    s = A->s;
    57dc:	680c      	ldr	r4, [r1, #0]
{
    57de:	4681      	mov	r9, r0
    if( A->s * B->s * flip_B < 0 )
    57e0:	fb06 fc04 	mul.w	ip, r6, r4
    57e4:	4666      	mov	r6, ip
    57e6:	4373      	muls	r3, r6
{
    57e8:	460d      	mov	r5, r1
    57ea:	4617      	mov	r7, r2
    if( A->s * B->s * flip_B < 0 )
    57ec:	d51b      	bpl.n	5826 <add_sub_mpi+0x50>
        int cmp = mbedtls_mpi_cmp_abs( A, B );
    57ee:	4611      	mov	r1, r2
    57f0:	4628      	mov	r0, r5
    57f2:	f7ff fed0 	bl	5596 <mbedtls_mpi_cmp_abs>
        if( cmp >= 0 )
    57f6:	f1b0 0800 	subs.w	r8, r0, #0
    57fa:	db0d      	blt.n	5818 <add_sub_mpi+0x42>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    57fc:	463a      	mov	r2, r7
    57fe:	4629      	mov	r1, r5
    5800:	4648      	mov	r0, r9
    5802:	f7ff ff99 	bl	5738 <mbedtls_mpi_sub_abs>
    5806:	b990      	cbnz	r0, 582e <add_sub_mpi+0x58>
            X->s = cmp == 0 ? 1 : s;
    5808:	f1b8 0f00 	cmp.w	r8, #0
    580c:	bf08      	it	eq
    580e:	2401      	moveq	r4, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    5810:	2000      	movs	r0, #0
        X->s = s;
    5812:	f8c9 4000 	str.w	r4, [r9]
    return( ret );
    5816:	e00a      	b.n	582e <add_sub_mpi+0x58>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    5818:	462a      	mov	r2, r5
    581a:	4648      	mov	r0, r9
    581c:	f7ff ff8c 	bl	5738 <mbedtls_mpi_sub_abs>
    5820:	b928      	cbnz	r0, 582e <add_sub_mpi+0x58>
            X->s = -s;
    5822:	4264      	negs	r4, r4
    5824:	e7f4      	b.n	5810 <add_sub_mpi+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    5826:	f7ff ff3f 	bl	56a8 <mbedtls_mpi_add_abs>
    582a:	2800      	cmp	r0, #0
    582c:	d0f0      	beq.n	5810 <add_sub_mpi+0x3a>
}
    582e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005832 <mbedtls_mpi_add_mpi>:
    return( add_sub_mpi( X, A, B, 1 ) );
    5832:	2301      	movs	r3, #1
    5834:	f7ff bfcf 	b.w	57d6 <add_sub_mpi>

00005838 <mbedtls_mpi_sub_mpi>:
    return( add_sub_mpi( X, A, B, -1 ) );
    5838:	f04f 33ff 	mov.w	r3, #4294967295
    583c:	f7ff bfcb 	b.w	57d6 <add_sub_mpi>

00005840 <mbedtls_mpi_mul_int>:
{
    5840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5844:	4605      	mov	r5, r0
    5846:	4688      	mov	r8, r1
    5848:	4616      	mov	r6, r2
    size_t n = A->n;
    584a:	684f      	ldr	r7, [r1, #4]
    while( n > 0 && A->p[n - 1] == 0 )
    584c:	b13f      	cbz	r7, 585e <mbedtls_mpi_mul_int+0x1e>
    584e:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5852:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    5856:	f853 3c04 	ldr.w	r3, [r3, #-4]
    585a:	b13b      	cbz	r3, 586c <mbedtls_mpi_mul_int+0x2c>
    if( b == 0 || n == 0 )
    585c:	b946      	cbnz	r6, 5870 <mbedtls_mpi_mul_int+0x30>
        return( mbedtls_mpi_lset( X, 0 ) );
    585e:	2100      	movs	r1, #0
    5860:	4628      	mov	r0, r5
}
    5862:	b002      	add	sp, #8
    5864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return( mbedtls_mpi_lset( X, 0 ) );
    5868:	f7ff bde5 	b.w	5436 <mbedtls_mpi_lset>
        --n;
    586c:	3f01      	subs	r7, #1
    586e:	e7ed      	b.n	584c <mbedtls_mpi_mul_int+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n + 1 ) );
    5870:	4628      	mov	r0, r5
    5872:	1c79      	adds	r1, r7, #1
    5874:	f7ff fd69 	bl	534a <mbedtls_mpi_grow>
    5878:	4604      	mov	r4, r0
    587a:	b970      	cbnz	r0, 589a <mbedtls_mpi_mul_int+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    587c:	4641      	mov	r1, r8
    587e:	4628      	mov	r0, r5
    5880:	f7ff fda5 	bl	53ce <mbedtls_mpi_copy>
    5884:	4604      	mov	r4, r0
    5886:	b940      	cbnz	r0, 589a <mbedtls_mpi_mul_int+0x5a>
    mbedtls_mpi_core_mla( X->p, X->n, A->p, n, b - 1 );
    5888:	3e01      	subs	r6, #1
    588a:	9600      	str	r6, [sp, #0]
    588c:	463b      	mov	r3, r7
    588e:	e9d5 1001 	ldrd	r1, r0, [r5, #4]
    5892:	f8d8 2008 	ldr.w	r2, [r8, #8]
    5896:	f000 fd15 	bl	62c4 <mbedtls_mpi_core_mla>
}
    589a:	4620      	mov	r0, r4
    589c:	b002      	add	sp, #8
    589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000058a2 <mbedtls_mpi_div_mpi>:
{
    58a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58a6:	4683      	mov	fp, r0
    58a8:	b09d      	sub	sp, #116	; 0x74
    58aa:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    58ac:	4618      	mov	r0, r3
    58ae:	2100      	movs	r1, #0
{
    58b0:	4616      	mov	r6, r2
    58b2:	9303      	str	r3, [sp, #12]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    58b4:	f7ff fee5 	bl	5682 <mbedtls_mpi_cmp_int>
    58b8:	2800      	cmp	r0, #0
    58ba:	f000 8187 	beq.w	5bcc <mbedtls_mpi_div_mpi+0x32a>
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    58be:	2303      	movs	r3, #3
    X->n = 0;
    58c0:	2400      	movs	r4, #0
    58c2:	2501      	movs	r5, #1
    T2.n = sizeof( TP2 ) / sizeof( *TP2 );
    58c4:	9317      	str	r3, [sp, #92]	; 0x5c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    58c6:	4630      	mov	r0, r6
    T2.p = TP2;
    58c8:	ab19      	add	r3, sp, #100	; 0x64
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    58ca:	9903      	ldr	r1, [sp, #12]
    X->n = 0;
    58cc:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    X->s = 1;
    58d0:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
    X->p = NULL;
    58d4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    X->n = 0;
    58d8:	e9cd 5410 	strd	r5, r4, [sp, #64]	; 0x40
    X->s = 1;
    58dc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    X->p = NULL;
    58e0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
    T2.s = 1;
    58e4:	9516      	str	r5, [sp, #88]	; 0x58
    T2.p = TP2;
    58e6:	9318      	str	r3, [sp, #96]	; 0x60
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    58e8:	f7ff fe55 	bl	5596 <mbedtls_mpi_cmp_abs>
    58ec:	42a0      	cmp	r0, r4
    58ee:	da28      	bge.n	5942 <mbedtls_mpi_div_mpi+0xa0>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    58f0:	f1bb 0f00 	cmp.w	fp, #0
    58f4:	d105      	bne.n	5902 <mbedtls_mpi_div_mpi+0x60>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    58f6:	b9e7      	cbnz	r7, 5932 <mbedtls_mpi_div_mpi+0x90>
        return( 0 );
    58f8:	2400      	movs	r4, #0
}
    58fa:	4620      	mov	r0, r4
    58fc:	b01d      	add	sp, #116	; 0x74
    58fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    5902:	4621      	mov	r1, r4
    5904:	4658      	mov	r0, fp
    5906:	f7ff fd96 	bl	5436 <mbedtls_mpi_lset>
    590a:	4604      	mov	r4, r0
    590c:	2800      	cmp	r0, #0
    590e:	d0f2      	beq.n	58f6 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    5910:	a80a      	add	r0, sp, #40	; 0x28
    5912:	f7ff fd08 	bl	5326 <mbedtls_mpi_free>
    5916:	a80d      	add	r0, sp, #52	; 0x34
    5918:	f7ff fd05 	bl	5326 <mbedtls_mpi_free>
    591c:	a810      	add	r0, sp, #64	; 0x40
    591e:	f7ff fd02 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 );
    5922:	a813      	add	r0, sp, #76	; 0x4c
    5924:	f7ff fcff 	bl	5326 <mbedtls_mpi_free>
    mbedtls_platform_zeroize( TP2, sizeof( TP2 ) );
    5928:	210c      	movs	r1, #12
    592a:	a819      	add	r0, sp, #100	; 0x64
    592c:	f7fe fd9a 	bl	4464 <mbedtls_platform_zeroize>
    return( ret );
    5930:	e7e3      	b.n	58fa <mbedtls_mpi_div_mpi+0x58>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    5932:	4631      	mov	r1, r6
    5934:	4638      	mov	r0, r7
    5936:	f7ff fd4a 	bl	53ce <mbedtls_mpi_copy>
    593a:	4604      	mov	r4, r0
    593c:	2800      	cmp	r0, #0
    593e:	d1e7      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    5940:	e7da      	b.n	58f8 <mbedtls_mpi_div_mpi+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    5942:	4631      	mov	r1, r6
    5944:	a80a      	add	r0, sp, #40	; 0x28
    5946:	f7ff fd42 	bl	53ce <mbedtls_mpi_copy>
    594a:	4604      	mov	r4, r0
    594c:	2800      	cmp	r0, #0
    594e:	d1df      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    5950:	9903      	ldr	r1, [sp, #12]
    5952:	a80d      	add	r0, sp, #52	; 0x34
    5954:	f7ff fd3b 	bl	53ce <mbedtls_mpi_copy>
    5958:	4604      	mov	r4, r0
    595a:	2800      	cmp	r0, #0
    595c:	d1d8      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    595e:	6871      	ldr	r1, [r6, #4]
    5960:	a810      	add	r0, sp, #64	; 0x40
    5962:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    5964:	950d      	str	r5, [sp, #52]	; 0x34
    5966:	950a      	str	r5, [sp, #40]	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    5968:	f7ff fcef 	bl	534a <mbedtls_mpi_grow>
    596c:	4604      	mov	r4, r0
    596e:	2800      	cmp	r0, #0
    5970:	d1ce      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    5972:	4601      	mov	r1, r0
    5974:	a810      	add	r0, sp, #64	; 0x40
    5976:	f7ff fd5e 	bl	5436 <mbedtls_mpi_lset>
    597a:	4604      	mov	r4, r0
    597c:	2800      	cmp	r0, #0
    597e:	d1c7      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, A->n + 2 ) );
    5980:	6871      	ldr	r1, [r6, #4]
    5982:	a813      	add	r0, sp, #76	; 0x4c
    5984:	3102      	adds	r1, #2
    5986:	f7ff fce0 	bl	534a <mbedtls_mpi_grow>
    598a:	4604      	mov	r4, r0
    598c:	2800      	cmp	r0, #0
    598e:	d1bf      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    5990:	a80d      	add	r0, sp, #52	; 0x34
    5992:	f7ff fd7a 	bl	548a <mbedtls_mpi_bitlen>
    5996:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    599a:	281f      	cmp	r0, #31
    599c:	d070      	beq.n	5a80 <mbedtls_mpi_div_mpi+0x1de>
        k = biL - 1 - k;
    599e:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    59a2:	4619      	mov	r1, r3
    59a4:	a80a      	add	r0, sp, #40	; 0x28
        k = biL - 1 - k;
    59a6:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    59a8:	f7ff fd95 	bl	54d6 <mbedtls_mpi_shift_l>
    59ac:	4604      	mov	r4, r0
    59ae:	2800      	cmp	r0, #0
    59b0:	d1ae      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    59b2:	9901      	ldr	r1, [sp, #4]
    59b4:	a80d      	add	r0, sp, #52	; 0x34
    59b6:	f7ff fd8e 	bl	54d6 <mbedtls_mpi_shift_l>
    59ba:	4604      	mov	r4, r0
    59bc:	2800      	cmp	r0, #0
    59be:	d1a7      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    n = X.n - 1;
    59c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    t = Y.n - 1;
    59c2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    59c6:	a80d      	add	r0, sp, #52	; 0x34
    59c8:	eba5 0a08 	sub.w	sl, r5, r8
    59cc:	ea4f 194a 	mov.w	r9, sl, lsl #5
    59d0:	4649      	mov	r1, r9
    59d2:	f7ff fd80 	bl	54d6 <mbedtls_mpi_shift_l>
    59d6:	4604      	mov	r4, r0
    59d8:	2800      	cmp	r0, #0
    59da:	d199      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
        Z.p[n - t]++;
    59dc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    59e0:	a90d      	add	r1, sp, #52	; 0x34
    59e2:	a80a      	add	r0, sp, #40	; 0x28
    59e4:	f7ff fe0c 	bl	5600 <mbedtls_mpi_cmp_mpi>
    59e8:	2800      	cmp	r0, #0
    59ea:	da4b      	bge.n	5a84 <mbedtls_mpi_div_mpi+0x1e2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    59ec:	4649      	mov	r1, r9
    59ee:	a80d      	add	r0, sp, #52	; 0x34
    59f0:	f7ff fdc8 	bl	5584 <mbedtls_mpi_shift_r>
    59f4:	4604      	mov	r4, r0
    59f6:	2800      	cmp	r0, #0
    59f8:	d18a      	bne.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    t = Y.n - 1;
    59fa:	f108 33ff 	add.w	r3, r8, #4294967295
    59fe:	9305      	str	r3, [sp, #20]
        if( X.p[i] >= Y.p[t] )
    5a00:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    5a02:	f105 3aff 	add.w	sl, r5, #4294967295
        if( X.p[i] >= Y.p[t] )
    5a06:	9306      	str	r3, [sp, #24]
    5a08:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    5a0c:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
    5a10:	3b02      	subs	r3, #2
    5a12:	3d01      	subs	r5, #1
    5a14:	009b      	lsls	r3, r3, #2
    5a16:	eba5 0508 	sub.w	r5, r5, r8
    5a1a:	9308      	str	r3, [sp, #32]
    5a1c:	00ab      	lsls	r3, r5, #2
    5a1e:	9302      	str	r3, [sp, #8]
    for( i = n; i > t ; i-- )
    5a20:	9b05      	ldr	r3, [sp, #20]
    5a22:	459a      	cmp	sl, r3
    5a24:	d83d      	bhi.n	5aa2 <mbedtls_mpi_div_mpi+0x200>
    if( Q != NULL )
    5a26:	f1bb 0f00 	cmp.w	fp, #0
    5a2a:	d00c      	beq.n	5a46 <mbedtls_mpi_div_mpi+0x1a4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    5a2c:	4658      	mov	r0, fp
    5a2e:	a910      	add	r1, sp, #64	; 0x40
    5a30:	f7ff fccd 	bl	53ce <mbedtls_mpi_copy>
    5a34:	2800      	cmp	r0, #0
    5a36:	f040 80c5 	bne.w	5bc4 <mbedtls_mpi_div_mpi+0x322>
        Q->s = A->s * B->s;
    5a3a:	9a03      	ldr	r2, [sp, #12]
    5a3c:	6833      	ldr	r3, [r6, #0]
    5a3e:	6812      	ldr	r2, [r2, #0]
    5a40:	4353      	muls	r3, r2
    5a42:	f8cb 3000 	str.w	r3, [fp]
    if( R != NULL )
    5a46:	2f00      	cmp	r7, #0
    5a48:	f43f af62 	beq.w	5910 <mbedtls_mpi_div_mpi+0x6e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    5a4c:	9901      	ldr	r1, [sp, #4]
    5a4e:	a80a      	add	r0, sp, #40	; 0x28
    5a50:	f7ff fd98 	bl	5584 <mbedtls_mpi_shift_r>
    5a54:	2800      	cmp	r0, #0
    5a56:	f040 80b5 	bne.w	5bc4 <mbedtls_mpi_div_mpi+0x322>
        X.s = A->s;
    5a5a:	6833      	ldr	r3, [r6, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    5a5c:	a90a      	add	r1, sp, #40	; 0x28
    5a5e:	4638      	mov	r0, r7
        X.s = A->s;
    5a60:	930a      	str	r3, [sp, #40]	; 0x28
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    5a62:	f7ff fcb4 	bl	53ce <mbedtls_mpi_copy>
    5a66:	4601      	mov	r1, r0
    5a68:	2800      	cmp	r0, #0
    5a6a:	f040 80ad 	bne.w	5bc8 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    5a6e:	4638      	mov	r0, r7
    5a70:	f7ff fe07 	bl	5682 <mbedtls_mpi_cmp_int>
    5a74:	2800      	cmp	r0, #0
    5a76:	f47f af4b 	bne.w	5910 <mbedtls_mpi_div_mpi+0x6e>
            R->s = 1;
    5a7a:	2301      	movs	r3, #1
    5a7c:	603b      	str	r3, [r7, #0]
    5a7e:	e747      	b.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    else k = 0;
    5a80:	9401      	str	r4, [sp, #4]
    5a82:	e79d      	b.n	59c0 <mbedtls_mpi_div_mpi+0x11e>
        Z.p[n - t]++;
    5a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    5a86:	a90a      	add	r1, sp, #40	; 0x28
        Z.p[n - t]++;
    5a88:	f852 300a 	ldr.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    5a8c:	4608      	mov	r0, r1
        Z.p[n - t]++;
    5a8e:	3301      	adds	r3, #1
    5a90:	f842 300a 	str.w	r3, [r2, sl]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    5a94:	aa0d      	add	r2, sp, #52	; 0x34
    5a96:	f7ff fecf 	bl	5838 <mbedtls_mpi_sub_mpi>
    5a9a:	4604      	mov	r4, r0
    5a9c:	2800      	cmp	r0, #0
    5a9e:	d09f      	beq.n	59e0 <mbedtls_mpi_div_mpi+0x13e>
    5aa0:	e736      	b.n	5910 <mbedtls_mpi_div_mpi+0x6e>
        if( X.p[i] >= Y.p[t] )
    5aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5aa4:	9a06      	ldr	r2, [sp, #24]
    5aa6:	9304      	str	r3, [sp, #16]
    5aa8:	4413      	add	r3, r2
    5aaa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    5aae:	9307      	str	r3, [sp, #28]
    5ab0:	9b04      	ldr	r3, [sp, #16]
    5ab2:	ea4f 088a 	mov.w	r8, sl, lsl #2
    5ab6:	589a      	ldr	r2, [r3, r2]
    5ab8:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    5abc:	f1a8 0304 	sub.w	r3, r8, #4
            Z.p[i - t - 1] = ~0;
    5ac0:	9d12      	ldr	r5, [sp, #72]	; 0x48
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    5ac2:	9309      	str	r3, [sp, #36]	; 0x24
            Z.p[i - t - 1] = ~0;
    5ac4:	9b02      	ldr	r3, [sp, #8]
        if( X.p[i] >= Y.p[t] )
    5ac6:	4291      	cmp	r1, r2
            Z.p[i - t - 1] = ~0;
    5ac8:	441d      	add	r5, r3
        if( X.p[i] >= Y.p[t] )
    5aca:	d276      	bcs.n	5bba <mbedtls_mpi_div_mpi+0x318>
    quotient = dividend / d;
    5acc:	f1a8 0004 	sub.w	r0, r8, #4
    5ad0:	2300      	movs	r3, #0
    5ad2:	f859 0000 	ldr.w	r0, [r9, r0]
    5ad6:	f7fa fb3d 	bl	154 <__aeabi_uldivmod>
    if( quotient > ( (mbedtls_t_udbl) 1 << biL ) - 1 )
    5ada:	2900      	cmp	r1, #0
    5adc:	bf14      	ite	ne
    5ade:	f04f 33ff 	movne.w	r3, #4294967295
    5ae2:	4603      	moveq	r3, r0
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    5ae4:	f1ba 0f01 	cmp.w	sl, #1
            Z.p[i - t - 1] = ~0;
    5ae8:	602b      	str	r3, [r5, #0]
        T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    5aea:	bf0e      	itee	eq
    5aec:	2300      	moveq	r3, #0
    5aee:	eb09 0308 	addne.w	r3, r9, r8
    5af2:	f853 3c08 	ldrne.w	r3, [r3, #-8]
    5af6:	9319      	str	r3, [sp, #100]	; 0x64
        T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    5af8:	f1a8 0304 	sub.w	r3, r8, #4
    5afc:	f859 3003 	ldr.w	r3, [r9, r3]
    5b00:	931a      	str	r3, [sp, #104]	; 0x68
        T2.p[2] = X.p[i];
    5b02:	f859 3008 	ldr.w	r3, [r9, r8]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    5b06:	f8dd 8010 	ldr.w	r8, [sp, #16]
        T2.p[2] = X.p[i];
    5b0a:	931b      	str	r3, [sp, #108]	; 0x6c
        Z.p[i - t - 1]++;
    5b0c:	682b      	ldr	r3, [r5, #0]
    5b0e:	3301      	adds	r3, #1
    5b10:	602b      	str	r3, [r5, #0]
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    5b12:	9b08      	ldr	r3, [sp, #32]
    5b14:	4498      	add	r8, r3
            Z.p[i - t - 1]--;
    5b16:	682b      	ldr	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    5b18:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    5b1a:	3b01      	subs	r3, #1
    5b1c:	602b      	str	r3, [r5, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    5b1e:	a813      	add	r0, sp, #76	; 0x4c
    5b20:	f7ff fc89 	bl	5436 <mbedtls_mpi_lset>
    5b24:	2800      	cmp	r0, #0
    5b26:	d14d      	bne.n	5bc4 <mbedtls_mpi_div_mpi+0x322>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    5b28:	9b05      	ldr	r3, [sp, #20]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d048      	beq.n	5bc0 <mbedtls_mpi_div_mpi+0x31e>
    5b2e:	f8d8 2000 	ldr.w	r2, [r8]
    5b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    5b34:	a913      	add	r1, sp, #76	; 0x4c
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    5b36:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
    5b38:	9a07      	ldr	r2, [sp, #28]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    5b3a:	4608      	mov	r0, r1
            T1.p[1] = Y.p[t];
    5b3c:	6812      	ldr	r2, [r2, #0]
    5b3e:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    5b40:	682a      	ldr	r2, [r5, #0]
    5b42:	f7ff fe7d 	bl	5840 <mbedtls_mpi_mul_int>
    5b46:	2800      	cmp	r0, #0
    5b48:	d13c      	bne.n	5bc4 <mbedtls_mpi_div_mpi+0x322>
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    5b4a:	a916      	add	r1, sp, #88	; 0x58
    5b4c:	a813      	add	r0, sp, #76	; 0x4c
    5b4e:	f7ff fd57 	bl	5600 <mbedtls_mpi_cmp_mpi>
    5b52:	2800      	cmp	r0, #0
    5b54:	dcdf      	bgt.n	5b16 <mbedtls_mpi_div_mpi+0x274>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    5b56:	682a      	ldr	r2, [r5, #0]
    5b58:	a90d      	add	r1, sp, #52	; 0x34
    5b5a:	a813      	add	r0, sp, #76	; 0x4c
    5b5c:	f7ff fe70 	bl	5840 <mbedtls_mpi_mul_int>
    5b60:	bb80      	cbnz	r0, 5bc4 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    5b62:	9b02      	ldr	r3, [sp, #8]
    5b64:	a813      	add	r0, sp, #76	; 0x4c
    5b66:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    5b6a:	4641      	mov	r1, r8
    5b6c:	f7ff fcb3 	bl	54d6 <mbedtls_mpi_shift_l>
    5b70:	bb40      	cbnz	r0, 5bc4 <mbedtls_mpi_div_mpi+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    5b72:	a90a      	add	r1, sp, #40	; 0x28
    5b74:	4608      	mov	r0, r1
    5b76:	aa13      	add	r2, sp, #76	; 0x4c
    5b78:	f7ff fe5e 	bl	5838 <mbedtls_mpi_sub_mpi>
    5b7c:	4601      	mov	r1, r0
    5b7e:	bb18      	cbnz	r0, 5bc8 <mbedtls_mpi_div_mpi+0x326>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    5b80:	a80a      	add	r0, sp, #40	; 0x28
    5b82:	f7ff fd7e 	bl	5682 <mbedtls_mpi_cmp_int>
    5b86:	2800      	cmp	r0, #0
    5b88:	da12      	bge.n	5bb0 <mbedtls_mpi_div_mpi+0x30e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    5b8a:	a90d      	add	r1, sp, #52	; 0x34
    5b8c:	a813      	add	r0, sp, #76	; 0x4c
    5b8e:	f7ff fc1e 	bl	53ce <mbedtls_mpi_copy>
    5b92:	b9b8      	cbnz	r0, 5bc4 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    5b94:	4641      	mov	r1, r8
    5b96:	a813      	add	r0, sp, #76	; 0x4c
    5b98:	f7ff fc9d 	bl	54d6 <mbedtls_mpi_shift_l>
    5b9c:	b990      	cbnz	r0, 5bc4 <mbedtls_mpi_div_mpi+0x322>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    5b9e:	a90a      	add	r1, sp, #40	; 0x28
    5ba0:	4608      	mov	r0, r1
    5ba2:	aa13      	add	r2, sp, #76	; 0x4c
    5ba4:	f7ff fe45 	bl	5832 <mbedtls_mpi_add_mpi>
    5ba8:	b960      	cbnz	r0, 5bc4 <mbedtls_mpi_div_mpi+0x322>
            Z.p[i - t - 1]--;
    5baa:	682b      	ldr	r3, [r5, #0]
    5bac:	3b01      	subs	r3, #1
    5bae:	602b      	str	r3, [r5, #0]
    for( i = n; i > t ; i-- )
    5bb0:	9b02      	ldr	r3, [sp, #8]
    5bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
    5bb6:	3b04      	subs	r3, #4
    5bb8:	e731      	b.n	5a1e <mbedtls_mpi_div_mpi+0x17c>
    5bba:	f04f 33ff 	mov.w	r3, #4294967295
    5bbe:	e791      	b.n	5ae4 <mbedtls_mpi_div_mpi+0x242>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    5bc0:	9a05      	ldr	r2, [sp, #20]
    5bc2:	e7b6      	b.n	5b32 <mbedtls_mpi_div_mpi+0x290>
    5bc4:	4604      	mov	r4, r0
    5bc6:	e6a3      	b.n	5910 <mbedtls_mpi_div_mpi+0x6e>
    5bc8:	460c      	mov	r4, r1
    5bca:	e6a1      	b.n	5910 <mbedtls_mpi_div_mpi+0x6e>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    5bcc:	f06f 040b 	mvn.w	r4, #11
    5bd0:	e693      	b.n	58fa <mbedtls_mpi_div_mpi+0x58>

00005bd2 <mbedtls_mpi_mod_mpi>:
{
    5bd2:	b570      	push	{r4, r5, r6, lr}
    5bd4:	4604      	mov	r4, r0
    5bd6:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    5bd8:	4610      	mov	r0, r2
    5bda:	2100      	movs	r1, #0
{
    5bdc:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    5bde:	f7ff fd50 	bl	5682 <mbedtls_mpi_cmp_int>
    5be2:	2800      	cmp	r0, #0
    5be4:	db24      	blt.n	5c30 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    5be6:	462a      	mov	r2, r5
    5be8:	4633      	mov	r3, r6
    5bea:	4621      	mov	r1, r4
    5bec:	2000      	movs	r0, #0
    5bee:	f7ff fe58 	bl	58a2 <mbedtls_mpi_div_mpi>
    5bf2:	4605      	mov	r5, r0
    5bf4:	b138      	cbz	r0, 5c06 <mbedtls_mpi_mod_mpi+0x34>
}
    5bf6:	4628      	mov	r0, r5
    5bf8:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    5bfa:	4632      	mov	r2, r6
    5bfc:	4621      	mov	r1, r4
    5bfe:	4620      	mov	r0, r4
    5c00:	f7ff fe17 	bl	5832 <mbedtls_mpi_add_mpi>
    5c04:	b990      	cbnz	r0, 5c2c <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    5c06:	2100      	movs	r1, #0
    5c08:	4620      	mov	r0, r4
    5c0a:	f7ff fd3a 	bl	5682 <mbedtls_mpi_cmp_int>
    5c0e:	2800      	cmp	r0, #0
    5c10:	dbf3      	blt.n	5bfa <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    5c12:	4631      	mov	r1, r6
    5c14:	4620      	mov	r0, r4
    5c16:	f7ff fcf3 	bl	5600 <mbedtls_mpi_cmp_mpi>
    5c1a:	2800      	cmp	r0, #0
    5c1c:	dbeb      	blt.n	5bf6 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    5c1e:	4632      	mov	r2, r6
    5c20:	4621      	mov	r1, r4
    5c22:	4620      	mov	r0, r4
    5c24:	f7ff fe08 	bl	5838 <mbedtls_mpi_sub_mpi>
    5c28:	2800      	cmp	r0, #0
    5c2a:	d0f2      	beq.n	5c12 <mbedtls_mpi_mod_mpi+0x40>
    5c2c:	4605      	mov	r5, r0
    5c2e:	e7e2      	b.n	5bf6 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    5c30:	f06f 0509 	mvn.w	r5, #9
    5c34:	e7df      	b.n	5bf6 <mbedtls_mpi_mod_mpi+0x24>

00005c36 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *prec_RR )
{
    5c36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c3a:	f5ad 7d5b 	sub.w	sp, sp, #876	; 0x36c
    5c3e:	9009      	str	r0, [sp, #36]	; 0x24
    5c40:	460e      	mov	r6, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    5c42:	4618      	mov	r0, r3
    5c44:	2100      	movs	r1, #0
{
    5c46:	461d      	mov	r5, r3
    5c48:	9205      	str	r2, [sp, #20]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    5c4a:	f7ff fd1a 	bl	5682 <mbedtls_mpi_cmp_int>
    5c4e:	2800      	cmp	r0, #0
    5c50:	dc06      	bgt.n	5c60 <mbedtls_mpi_exp_mod+0x2a>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    5c52:	f06f 0403 	mvn.w	r4, #3

    if( prec_RR == NULL || prec_RR->p == NULL )
        mbedtls_mpi_free( &RR );

    return( ret );
}
    5c56:	4620      	mov	r0, r4
    5c58:	f50d 7d5b 	add.w	sp, sp, #876	; 0x36c
    5c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    5c60:	68ab      	ldr	r3, [r5, #8]
    5c62:	681b      	ldr	r3, [r3, #0]
    5c64:	f013 0301 	ands.w	r3, r3, #1
    5c68:	9308      	str	r3, [sp, #32]
    5c6a:	d0f2      	beq.n	5c52 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    5c6c:	2100      	movs	r1, #0
    5c6e:	9805      	ldr	r0, [sp, #20]
    5c70:	f7ff fd07 	bl	5682 <mbedtls_mpi_cmp_int>
    5c74:	2800      	cmp	r0, #0
    5c76:	dbec      	blt.n	5c52 <mbedtls_mpi_exp_mod+0x1c>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    5c78:	9805      	ldr	r0, [sp, #20]
    5c7a:	f7ff fc06 	bl	548a <mbedtls_mpi_bitlen>
    5c7e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    5c82:	d8e6      	bhi.n	5c52 <mbedtls_mpi_exp_mod+0x1c>
        mbedtls_mpi_bitlen( N ) > MBEDTLS_MPI_MAX_BITS )
    5c84:	4628      	mov	r0, r5
    5c86:	f7ff fc00 	bl	548a <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( E ) > MBEDTLS_MPI_MAX_BITS ||
    5c8a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    5c8e:	d8e0      	bhi.n	5c52 <mbedtls_mpi_exp_mod+0x1c>
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    5c90:	68a8      	ldr	r0, [r5, #8]
    5c92:	f000 fbd3 	bl	643c <mbedtls_mpi_core_montmul_init>
    X->n = 0;
    5c96:	2100      	movs	r1, #0
    5c98:	2301      	movs	r3, #1
    memset( W, 0, sizeof( W ) );
    5c9a:	f44f 7240 	mov.w	r2, #768	; 0x300
    *mm = mbedtls_mpi_core_montmul_init( N->p );
    5c9e:	9003      	str	r0, [sp, #12]
    memset( W, 0, sizeof( W ) );
    5ca0:	a81a      	add	r0, sp, #104	; 0x68
    X->n = 0;
    5ca2:	e9cd 310b 	strd	r3, r1, [sp, #44]	; 0x2c
    X->s = 1;
    5ca6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    X->p = NULL;
    5caa:	e9cd 110f 	strd	r1, r1, [sp, #60]	; 0x3c
    X->n = 0;
    5cae:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
    5cb2:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
    X->p = NULL;
    5cb6:	9116      	str	r1, [sp, #88]	; 0x58
    5cb8:	9113      	str	r1, [sp, #76]	; 0x4c
    memset( W, 0, sizeof( W ) );
    5cba:	f7ff f853 	bl	4d64 <memset>
    i = mbedtls_mpi_bitlen( E );
    5cbe:	9805      	ldr	r0, [sp, #20]
    5cc0:	f7ff fbe3 	bl	548a <mbedtls_mpi_bitlen>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    5cc4:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    5cc8:	f080 80da 	bcs.w	5e80 <mbedtls_mpi_exp_mod+0x24a>
    5ccc:	28ef      	cmp	r0, #239	; 0xef
    5cce:	f200 80d9 	bhi.w	5e84 <mbedtls_mpi_exp_mod+0x24e>
    5cd2:	284f      	cmp	r0, #79	; 0x4f
    5cd4:	f200 80d8 	bhi.w	5e88 <mbedtls_mpi_exp_mod+0x252>
    5cd8:	2818      	cmp	r0, #24
    5cda:	9b08      	ldr	r3, [sp, #32]
    5cdc:	bf28      	it	cs
    5cde:	2303      	movcs	r3, #3
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    5ce0:	f04f 0801 	mov.w	r8, #1
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    5ce4:	9304      	str	r3, [sp, #16]
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    5ce6:	9b04      	ldr	r3, [sp, #16]
    mbedtls_mpi_copy( &W[x_index], X );
    5ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
    const size_t w_table_used_size = (size_t) 1 << window_bitsize;
    5cea:	fa08 f703 	lsl.w	r7, r8, r3
    X->n = 0;
    5cee:	2300      	movs	r3, #0
    mbedtls_mpi_copy( &W[x_index], X );
    5cf0:	a81a      	add	r0, sp, #104	; 0x68
    X->p = NULL;
    5cf2:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
    X->s = 1;
    5cf6:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
    mbedtls_mpi_copy( &W[x_index], X );
    5cfa:	f7ff fb68 	bl	53ce <mbedtls_mpi_copy>
    j = N->n + 1;
    5cfe:	686b      	ldr	r3, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    5d00:	a81a      	add	r0, sp, #104	; 0x68
    j = N->n + 1;
    5d02:	eb03 0908 	add.w	r9, r3, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[x_index], j ) );
    5d06:	4649      	mov	r1, r9
    5d08:	f7ff fb1f 	bl	534a <mbedtls_mpi_grow>
    5d0c:	4604      	mov	r4, r0
    5d0e:	2800      	cmp	r0, #0
    5d10:	f040 8180 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    5d14:	4649      	mov	r1, r9
    5d16:	a81d      	add	r0, sp, #116	; 0x74
    5d18:	f7ff fb17 	bl	534a <mbedtls_mpi_grow>
    5d1c:	4604      	mov	r4, r0
    5d1e:	2800      	cmp	r0, #0
    5d20:	f040 8178 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    5d24:	fa09 f108 	lsl.w	r1, r9, r8
    5d28:	a80e      	add	r0, sp, #56	; 0x38
    5d2a:	f7ff fb0e 	bl	534a <mbedtls_mpi_grow>
    5d2e:	4604      	mov	r4, r0
    5d30:	2800      	cmp	r0, #0
    5d32:	f040 816f 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
    neg = ( A->s == -1 );
    5d36:	6833      	ldr	r3, [r6, #0]
    5d38:	9307      	str	r3, [sp, #28]
    if( neg )
    5d3a:	3301      	adds	r3, #1
    5d3c:	d10a      	bne.n	5d54 <mbedtls_mpi_exp_mod+0x11e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    5d3e:	4631      	mov	r1, r6
    5d40:	a814      	add	r0, sp, #80	; 0x50
    5d42:	f7ff fb44 	bl	53ce <mbedtls_mpi_copy>
    5d46:	4604      	mov	r4, r0
    5d48:	2800      	cmp	r0, #0
    5d4a:	f040 8163 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
        Apos.s = 1;
    5d4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        A = &Apos;
    5d52:	ae14      	add	r6, sp, #80	; 0x50
    if( prec_RR == NULL || prec_RR->p == NULL )
    5d54:	9be4      	ldr	r3, [sp, #912]	; 0x390
    5d56:	b11b      	cbz	r3, 5d60 <mbedtls_mpi_exp_mod+0x12a>
    5d58:	689b      	ldr	r3, [r3, #8]
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	f040 8096 	bne.w	5e8c <mbedtls_mpi_exp_mod+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    5d60:	2101      	movs	r1, #1
    5d62:	a80b      	add	r0, sp, #44	; 0x2c
    5d64:	f7ff fb67 	bl	5436 <mbedtls_mpi_lset>
    5d68:	4604      	mov	r4, r0
    5d6a:	2800      	cmp	r0, #0
    5d6c:	f040 8152 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    5d70:	6869      	ldr	r1, [r5, #4]
    5d72:	a80b      	add	r0, sp, #44	; 0x2c
    5d74:	0189      	lsls	r1, r1, #6
    5d76:	f7ff fbae 	bl	54d6 <mbedtls_mpi_shift_l>
    5d7a:	4604      	mov	r4, r0
    5d7c:	2800      	cmp	r0, #0
    5d7e:	f040 8149 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    5d82:	a90b      	add	r1, sp, #44	; 0x2c
    5d84:	462a      	mov	r2, r5
    5d86:	4608      	mov	r0, r1
    5d88:	f7ff ff23 	bl	5bd2 <mbedtls_mpi_mod_mpi>
    5d8c:	4604      	mov	r4, r0
    5d8e:	2800      	cmp	r0, #0
    5d90:	f040 8140 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
        if( prec_RR != NULL )
    5d94:	9be4      	ldr	r3, [sp, #912]	; 0x390
    5d96:	b123      	cbz	r3, 5da2 <mbedtls_mpi_exp_mod+0x16c>
            memcpy( prec_RR, &RR, sizeof( mbedtls_mpi ) );
    5d98:	220c      	movs	r2, #12
    5d9a:	4618      	mov	r0, r3
    5d9c:	a90b      	add	r1, sp, #44	; 0x2c
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    5d9e:	f7fe ffd6 	bl	4d4e <memcpy>
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    5da2:	4629      	mov	r1, r5
    5da4:	4630      	mov	r0, r6
    5da6:	f7ff fc2b 	bl	5600 <mbedtls_mpi_cmp_mpi>
    5daa:	2800      	cmp	r0, #0
    5dac:	db72      	blt.n	5e94 <mbedtls_mpi_exp_mod+0x25e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    5dae:	462a      	mov	r2, r5
    5db0:	4631      	mov	r1, r6
    5db2:	a81d      	add	r0, sp, #116	; 0x74
    5db4:	f7ff ff0d 	bl	5bd2 <mbedtls_mpi_mod_mpi>
    5db8:	4604      	mov	r4, r0
    5dba:	2800      	cmp	r0, #0
    5dbc:	f040 812a 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1], N->n + 1 ) );
    5dc0:	6869      	ldr	r1, [r5, #4]
    5dc2:	a81d      	add	r0, sp, #116	; 0x74
    5dc4:	3101      	adds	r1, #1
    5dc6:	f7ff fac0 	bl	534a <mbedtls_mpi_grow>
    5dca:	4604      	mov	r4, r0
    5dcc:	2800      	cmp	r0, #0
    5dce:	f040 8121 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
    mpi_montmul( &W[1], &RR, N, mm, &T );
    5dd2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    5dd6:	462a      	mov	r2, r5
    5dd8:	9b03      	ldr	r3, [sp, #12]
    5dda:	981f      	ldr	r0, [sp, #124]	; 0x7c
    5ddc:	a90b      	add	r1, sp, #44	; 0x2c
    5dde:	f8cd 8000 	str.w	r8, [sp]
    5de2:	f7ff fa8b 	bl	52fc <mpi_montmul.isra.0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[x_index], &RR ) );
    5de6:	a90b      	add	r1, sp, #44	; 0x2c
    5de8:	a81a      	add	r0, sp, #104	; 0x68
    5dea:	f7ff faf0 	bl	53ce <mbedtls_mpi_copy>
    5dee:	4604      	mov	r4, r0
    5df0:	2800      	cmp	r0, #0
    5df2:	f040 810f 	bne.w	6014 <mbedtls_mpi_exp_mod+0x3de>
    mbedtls_mpi_uint z = 1;
    5df6:	2301      	movs	r3, #1
    5df8:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    5dfa:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    5dfe:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    5e00:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    5e02:	9b03      	ldr	r3, [sp, #12]
    5e04:	462a      	mov	r2, r5
    5e06:	981c      	ldr	r0, [sp, #112]	; 0x70
    5e08:	f8cd 8000 	str.w	r8, [sp]
    5e0c:	a917      	add	r1, sp, #92	; 0x5c
    5e0e:	f7ff fa75 	bl	52fc <mpi_montmul.isra.0>
    if( window_bitsize > 1 )
    5e12:	9b04      	ldr	r3, [sp, #16]
    5e14:	2b01      	cmp	r3, #1
    5e16:	d142      	bne.n	5e9e <mbedtls_mpi_exp_mod+0x268>
    size_t exponent_bits_in_window = 0;
    5e18:	2600      	movs	r6, #0
    state   = 0;
    5e1a:	46b3      	mov	fp, r6
    nbits   = 0;
    5e1c:	46b1      	mov	r9, r6
    nblimbs = E->n;
    5e1e:	9b05      	ldr	r3, [sp, #20]
    bufsize = 0;
    5e20:	9606      	str	r6, [sp, #24]
    nblimbs = E->n;
    5e22:	f8d3 a004 	ldr.w	sl, [r3, #4]
        if( bufsize == 0 )
    5e26:	9b06      	ldr	r3, [sp, #24]
    5e28:	b93b      	cbnz	r3, 5e3a <mbedtls_mpi_exp_mod+0x204>
            if( nblimbs == 0 )
    5e2a:	f1ba 0f00 	cmp.w	sl, #0
    5e2e:	f000 80da 	beq.w	5fe6 <mbedtls_mpi_exp_mod+0x3b0>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    5e32:	2320      	movs	r3, #32
            nblimbs--;
    5e34:	f10a 3aff 	add.w	sl, sl, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    5e38:	9306      	str	r3, [sp, #24]
        bufsize--;
    5e3a:	9b06      	ldr	r3, [sp, #24]
    5e3c:	3b01      	subs	r3, #1
    5e3e:	9306      	str	r3, [sp, #24]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    5e40:	9b05      	ldr	r3, [sp, #20]
    5e42:	9a06      	ldr	r2, [sp, #24]
    5e44:	689b      	ldr	r3, [r3, #8]
    5e46:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
    5e4a:	40d3      	lsrs	r3, r2
        if( ei == 0 && state == 0 )
    5e4c:	f013 0301 	ands.w	r3, r3, #1
    5e50:	d16e      	bne.n	5f30 <mbedtls_mpi_exp_mod+0x2fa>
    5e52:	f1bb 0f00 	cmp.w	fp, #0
    5e56:	d0e6      	beq.n	5e26 <mbedtls_mpi_exp_mod+0x1f0>
        if( ei == 0 && state == 1 )
    5e58:	f1bb 0f01 	cmp.w	fp, #1
    5e5c:	d168      	bne.n	5f30 <mbedtls_mpi_exp_mod+0x2fa>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    5e5e:	463a      	mov	r2, r7
    5e60:	a91a      	add	r1, sp, #104	; 0x68
    5e62:	a811      	add	r0, sp, #68	; 0x44
    5e64:	f7ff fa31 	bl	52ca <mpi_select>
    5e68:	2800      	cmp	r0, #0
    5e6a:	f040 8102 	bne.w	6072 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    5e6e:	462a      	mov	r2, r5
    5e70:	9b03      	ldr	r3, [sp, #12]
    5e72:	981c      	ldr	r0, [sp, #112]	; 0x70
    5e74:	f8cd 8000 	str.w	r8, [sp]
    5e78:	a911      	add	r1, sp, #68	; 0x44
    5e7a:	f7ff fa3f 	bl	52fc <mpi_montmul.isra.0>
            continue;
    5e7e:	e7d2      	b.n	5e26 <mbedtls_mpi_exp_mod+0x1f0>
    window_bitsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    5e80:	2306      	movs	r3, #6
    5e82:	e72d      	b.n	5ce0 <mbedtls_mpi_exp_mod+0xaa>
    5e84:	2305      	movs	r3, #5
    5e86:	e72b      	b.n	5ce0 <mbedtls_mpi_exp_mod+0xaa>
    5e88:	2304      	movs	r3, #4
    5e8a:	e729      	b.n	5ce0 <mbedtls_mpi_exp_mod+0xaa>
        memcpy( &RR, prec_RR, sizeof( mbedtls_mpi ) );
    5e8c:	220c      	movs	r2, #12
    5e8e:	99e4      	ldr	r1, [sp, #912]	; 0x390
    5e90:	a80b      	add	r0, sp, #44	; 0x2c
    5e92:	e784      	b.n	5d9e <mbedtls_mpi_exp_mod+0x168>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    5e94:	4631      	mov	r1, r6
    5e96:	a81d      	add	r0, sp, #116	; 0x74
    5e98:	f7ff fa99 	bl	53ce <mbedtls_mpi_copy>
    5e9c:	e795      	b.n	5dca <mbedtls_mpi_exp_mod+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    5e9e:	230c      	movs	r3, #12
        j = w_table_used_size / 2;
    5ea0:	ea4f 0957 	mov.w	r9, r7, lsr #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    5ea4:	aa1a      	add	r2, sp, #104	; 0x68
    5ea6:	fb03 2609 	mla	r6, r3, r9, r2
    5eaa:	6869      	ldr	r1, [r5, #4]
    5eac:	4630      	mov	r0, r6
    5eae:	3101      	adds	r1, #1
    5eb0:	f7ff fa4b 	bl	534a <mbedtls_mpi_grow>
    5eb4:	2800      	cmp	r0, #0
    5eb6:	f040 80dc 	bne.w	6072 <mbedtls_mpi_exp_mod+0x43c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    5eba:	4630      	mov	r0, r6
    5ebc:	a91d      	add	r1, sp, #116	; 0x74
    5ebe:	f7ff fa86 	bl	53ce <mbedtls_mpi_copy>
    5ec2:	2800      	cmp	r0, #0
    5ec4:	f040 80d5 	bne.w	6072 <mbedtls_mpi_exp_mod+0x43c>
        for( i = 0; i < window_bitsize - 1; i++ )
    5ec8:	46a2      	mov	sl, r4
    5eca:	9b04      	ldr	r3, [sp, #16]
    5ecc:	f103 3bff 	add.w	fp, r3, #4294967295
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    5ed0:	f8cd 8000 	str.w	r8, [sp]
    5ed4:	462a      	mov	r2, r5
    5ed6:	4631      	mov	r1, r6
    5ed8:	9b03      	ldr	r3, [sp, #12]
    5eda:	68b0      	ldr	r0, [r6, #8]
        for( i = 0; i < window_bitsize - 1; i++ )
    5edc:	f10a 0a01 	add.w	sl, sl, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    5ee0:	f7ff fa0c 	bl	52fc <mpi_montmul.isra.0>
        for( i = 0; i < window_bitsize - 1; i++ )
    5ee4:	45da      	cmp	sl, fp
    5ee6:	d3f3      	bcc.n	5ed0 <mbedtls_mpi_exp_mod+0x29a>
        for( i = j + 1; i < w_table_used_size; i++ )
    5ee8:	f109 0901 	add.w	r9, r9, #1
    5eec:	45b9      	cmp	r9, r7
    5eee:	d293      	bcs.n	5e18 <mbedtls_mpi_exp_mod+0x1e2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    5ef0:	6869      	ldr	r1, [r5, #4]
    5ef2:	f106 0a0c 	add.w	sl, r6, #12
    5ef6:	4650      	mov	r0, sl
    5ef8:	3101      	adds	r1, #1
    5efa:	f7ff fa26 	bl	534a <mbedtls_mpi_grow>
    5efe:	2800      	cmp	r0, #0
    5f00:	f040 80b7 	bne.w	6072 <mbedtls_mpi_exp_mod+0x43c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    5f04:	4631      	mov	r1, r6
    5f06:	4650      	mov	r0, sl
    5f08:	f7ff fa61 	bl	53ce <mbedtls_mpi_copy>
    5f0c:	2800      	cmp	r0, #0
    5f0e:	f040 80b0 	bne.w	6072 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    5f12:	f8cd 8000 	str.w	r8, [sp]
    5f16:	6970      	ldr	r0, [r6, #20]
    5f18:	462a      	mov	r2, r5
    5f1a:	9b03      	ldr	r3, [sp, #12]
    5f1c:	a91d      	add	r1, sp, #116	; 0x74
    5f1e:	f7ff f9ed 	bl	52fc <mpi_montmul.isra.0>
        for( i = j + 1; i < w_table_used_size; i++ )
    5f22:	4656      	mov	r6, sl
    5f24:	f109 0901 	add.w	r9, r9, #1
    5f28:	e7e0      	b.n	5eec <mbedtls_mpi_exp_mod+0x2b6>
        state = 2;
    5f2a:	f04f 0b02 	mov.w	fp, #2
    5f2e:	e77a      	b.n	5e26 <mbedtls_mpi_exp_mod+0x1f0>
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    5f30:	9a04      	ldr	r2, [sp, #16]
        nbits++;
    5f32:	f109 0901 	add.w	r9, r9, #1
        exponent_bits_in_window |= ( ei << ( window_bitsize - nbits ) );
    5f36:	eba2 0209 	sub.w	r2, r2, r9
    5f3a:	4093      	lsls	r3, r2
    5f3c:	431e      	orrs	r6, r3
        if( nbits == window_bitsize )
    5f3e:	9b04      	ldr	r3, [sp, #16]
    5f40:	454b      	cmp	r3, r9
    5f42:	d1f2      	bne.n	5f2a <mbedtls_mpi_exp_mod+0x2f4>
            for( i = 0; i < window_bitsize; i++ )
    5f44:	f04f 0b00 	mov.w	fp, #0
                MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    5f48:	2300      	movs	r3, #0
    5f4a:	463a      	mov	r2, r7
    5f4c:	a91a      	add	r1, sp, #104	; 0x68
    5f4e:	a811      	add	r0, sp, #68	; 0x44
    5f50:	f7ff f9bb 	bl	52ca <mpi_select>
    5f54:	2800      	cmp	r0, #0
    5f56:	f040 808c 	bne.w	6072 <mbedtls_mpi_exp_mod+0x43c>
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    5f5a:	462a      	mov	r2, r5
    5f5c:	9b03      	ldr	r3, [sp, #12]
    5f5e:	981c      	ldr	r0, [sp, #112]	; 0x70
    5f60:	f8cd 8000 	str.w	r8, [sp]
    5f64:	a911      	add	r1, sp, #68	; 0x44
            for( i = 0; i < window_bitsize; i++ )
    5f66:	f10b 0b01 	add.w	fp, fp, #1
                mpi_montmul( &W[x_index], &WW, N, mm, &T );
    5f6a:	f7ff f9c7 	bl	52fc <mpi_montmul.isra.0>
            for( i = 0; i < window_bitsize; i++ )
    5f6e:	45d9      	cmp	r9, fp
    5f70:	d8ea      	bhi.n	5f48 <mbedtls_mpi_exp_mod+0x312>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    5f72:	4633      	mov	r3, r6
    5f74:	463a      	mov	r2, r7
    5f76:	a91a      	add	r1, sp, #104	; 0x68
    5f78:	a811      	add	r0, sp, #68	; 0x44
    5f7a:	f7ff f9a6 	bl	52ca <mpi_select>
    5f7e:	4606      	mov	r6, r0
    5f80:	2800      	cmp	r0, #0
    5f82:	d178      	bne.n	6076 <mbedtls_mpi_exp_mod+0x440>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    5f84:	462a      	mov	r2, r5
    5f86:	9b03      	ldr	r3, [sp, #12]
    5f88:	981c      	ldr	r0, [sp, #112]	; 0x70
    5f8a:	f8cd 8000 	str.w	r8, [sp]
    5f8e:	a911      	add	r1, sp, #68	; 0x44
    5f90:	f7ff f9b4 	bl	52fc <mpi_montmul.isra.0>
            nbits = 0;
    5f94:	46b1      	mov	r9, r6
            state--;
    5f96:	f8dd b020 	ldr.w	fp, [sp, #32]
    5f9a:	e744      	b.n	5e26 <mbedtls_mpi_exp_mod+0x1f0>
        MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, x_index ) );
    5f9c:	2300      	movs	r3, #0
    5f9e:	463a      	mov	r2, r7
    5fa0:	a91a      	add	r1, sp, #104	; 0x68
    5fa2:	a811      	add	r0, sp, #68	; 0x44
    5fa4:	f7ff f991 	bl	52ca <mpi_select>
    5fa8:	2800      	cmp	r0, #0
    5faa:	d162      	bne.n	6072 <mbedtls_mpi_exp_mod+0x43c>
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    5fac:	462a      	mov	r2, r5
    5fae:	9b03      	ldr	r3, [sp, #12]
    5fb0:	981c      	ldr	r0, [sp, #112]	; 0x70
    5fb2:	f8cd 8000 	str.w	r8, [sp]
    5fb6:	a911      	add	r1, sp, #68	; 0x44
        exponent_bits_in_window <<= 1;
    5fb8:	0076      	lsls	r6, r6, #1
        mpi_montmul( &W[x_index], &WW, N, mm, &T );
    5fba:	f7ff f99f 	bl	52fc <mpi_montmul.isra.0>
        if( ( exponent_bits_in_window & ( (size_t) 1 << window_bitsize ) ) != 0 )
    5fbe:	4237      	tst	r7, r6
    5fc0:	d00f      	beq.n	5fe2 <mbedtls_mpi_exp_mod+0x3ac>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    5fc2:	2301      	movs	r3, #1
    5fc4:	463a      	mov	r2, r7
    5fc6:	a91a      	add	r1, sp, #104	; 0x68
    5fc8:	a811      	add	r0, sp, #68	; 0x44
    5fca:	f7ff f97e 	bl	52ca <mpi_select>
    5fce:	2800      	cmp	r0, #0
    5fd0:	d14f      	bne.n	6072 <mbedtls_mpi_exp_mod+0x43c>
            mpi_montmul( &W[x_index], &WW, N, mm, &T );
    5fd2:	462a      	mov	r2, r5
    5fd4:	9b03      	ldr	r3, [sp, #12]
    5fd6:	981c      	ldr	r0, [sp, #112]	; 0x70
    5fd8:	f8cd 8000 	str.w	r8, [sp]
    5fdc:	a911      	add	r1, sp, #68	; 0x44
    5fde:	f7ff f98d 	bl	52fc <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    5fe2:	f10a 0a01 	add.w	sl, sl, #1
    5fe6:	45ca      	cmp	sl, r9
    5fe8:	d1d8      	bne.n	5f9c <mbedtls_mpi_exp_mod+0x366>
    mbedtls_mpi_uint z = 1;
    5fea:	2301      	movs	r3, #1
    5fec:	aa0a      	add	r2, sp, #40	; 0x28
    U.n = U.s = (int) z;
    5fee:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
    mbedtls_mpi_uint z = 1;
    5ff2:	930a      	str	r3, [sp, #40]	; 0x28
    U.p = &z;
    5ff4:	9219      	str	r2, [sp, #100]	; 0x64
    mpi_montmul( A, &U, N, mm, T );
    5ff6:	9b03      	ldr	r3, [sp, #12]
    5ff8:	462a      	mov	r2, r5
    5ffa:	981c      	ldr	r0, [sp, #112]	; 0x70
    5ffc:	f8cd 8000 	str.w	r8, [sp]
    6000:	a917      	add	r1, sp, #92	; 0x5c
    6002:	f7ff f97b 	bl	52fc <mpi_montmul.isra.0>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    6006:	9b07      	ldr	r3, [sp, #28]
    6008:	3301      	adds	r3, #1
    600a:	d020      	beq.n	604e <mbedtls_mpi_exp_mod+0x418>
    mbedtls_mpi_copy( X, &W[x_index] );
    600c:	9809      	ldr	r0, [sp, #36]	; 0x24
    600e:	a91a      	add	r1, sp, #104	; 0x68
    6010:	f7ff f9dd 	bl	53ce <mbedtls_mpi_copy>
        mbedtls_mpi_free( &W[i] );
    6014:	260c      	movs	r6, #12
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    6016:	087d      	lsrs	r5, r7, #1
    6018:	42bd      	cmp	r5, r7
    601a:	d32e      	bcc.n	607a <mbedtls_mpi_exp_mod+0x444>
    mbedtls_mpi_free( &W[x_index] );
    601c:	a81a      	add	r0, sp, #104	; 0x68
    601e:	f7ff f982 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &W[1] );
    6022:	a81d      	add	r0, sp, #116	; 0x74
    6024:	f7ff f97f 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T );
    6028:	a80e      	add	r0, sp, #56	; 0x38
    602a:	f7ff f97c 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &Apos );
    602e:	a814      	add	r0, sp, #80	; 0x50
    6030:	f7ff f979 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &WW );
    6034:	a811      	add	r0, sp, #68	; 0x44
    6036:	f7ff f976 	bl	5326 <mbedtls_mpi_free>
    if( prec_RR == NULL || prec_RR->p == NULL )
    603a:	9be4      	ldr	r3, [sp, #912]	; 0x390
    603c:	b11b      	cbz	r3, 6046 <mbedtls_mpi_exp_mod+0x410>
    603e:	689b      	ldr	r3, [r3, #8]
    6040:	2b00      	cmp	r3, #0
    6042:	f47f ae08 	bne.w	5c56 <mbedtls_mpi_exp_mod+0x20>
        mbedtls_mpi_free( &RR );
    6046:	a80b      	add	r0, sp, #44	; 0x2c
    6048:	f7ff f96d 	bl	5326 <mbedtls_mpi_free>
    604c:	e603      	b.n	5c56 <mbedtls_mpi_exp_mod+0x20>
    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    604e:	9b05      	ldr	r3, [sp, #20]
    6050:	685b      	ldr	r3, [r3, #4]
    6052:	2b00      	cmp	r3, #0
    6054:	d0da      	beq.n	600c <mbedtls_mpi_exp_mod+0x3d6>
    6056:	9b05      	ldr	r3, [sp, #20]
    6058:	689b      	ldr	r3, [r3, #8]
    605a:	681b      	ldr	r3, [r3, #0]
    605c:	07db      	lsls	r3, r3, #31
    605e:	d5d5      	bpl.n	600c <mbedtls_mpi_exp_mod+0x3d6>
        W[x_index].s = -1;
    6060:	9b07      	ldr	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    6062:	aa1a      	add	r2, sp, #104	; 0x68
    6064:	4629      	mov	r1, r5
    6066:	4610      	mov	r0, r2
        W[x_index].s = -1;
    6068:	931a      	str	r3, [sp, #104]	; 0x68
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &W[x_index], N, &W[x_index] ) );
    606a:	f7ff fbe2 	bl	5832 <mbedtls_mpi_add_mpi>
    606e:	2800      	cmp	r0, #0
    6070:	d0cc      	beq.n	600c <mbedtls_mpi_exp_mod+0x3d6>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size, 1 ) );
    6072:	4604      	mov	r4, r0
    6074:	e7ce      	b.n	6014 <mbedtls_mpi_exp_mod+0x3de>
            MBEDTLS_MPI_CHK( mpi_select( &WW, W, w_table_used_size,
    6076:	4604      	mov	r4, r0
    6078:	e7cc      	b.n	6014 <mbedtls_mpi_exp_mod+0x3de>
        mbedtls_mpi_free( &W[i] );
    607a:	ab1a      	add	r3, sp, #104	; 0x68
    607c:	fb06 3005 	mla	r0, r6, r5, r3
    6080:	f7ff f951 	bl	5326 <mbedtls_mpi_free>
    for( i = w_table_used_size/2; i < w_table_used_size; i++ )
    6084:	3501      	adds	r5, #1
    6086:	e7c7      	b.n	6018 <mbedtls_mpi_exp_mod+0x3e2>

00006088 <mbedtls_mpi_core_clz>:
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);

    for( j = 0; j < biL; j++ )
    {
        if( a & mask ) break;
    6088:	1e03      	subs	r3, r0, #0
    608a:	db0b      	blt.n	60a4 <mbedtls_mpi_core_clz+0x1c>
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    608c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    for( j = 0; j < biL; j++ )
    6090:	2000      	movs	r0, #0
    6092:	3001      	adds	r0, #1
    6094:	2820      	cmp	r0, #32

        mask >>= 1;
    6096:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    609a:	d100      	bne.n	609e <mbedtls_mpi_core_clz+0x16>
    609c:	4770      	bx	lr
        if( a & mask ) break;
    609e:	4213      	tst	r3, r2
    60a0:	d0f7      	beq.n	6092 <mbedtls_mpi_core_clz+0xa>
    }

    return( j );
}
    60a2:	4770      	bx	lr
    for( j = 0; j < biL; j++ )
    60a4:	2000      	movs	r0, #0
    return( j );
    60a6:	e7fc      	b.n	60a2 <mbedtls_mpi_core_clz+0x1a>

000060a8 <mbedtls_mpi_core_bitlen>:

size_t mbedtls_mpi_core_bitlen( const mbedtls_mpi_uint *A, size_t A_limbs )
{
    60a8:	b508      	push	{r3, lr}
    60aa:	4603      	mov	r3, r0
    size_t i, j;

    if( A_limbs == 0 )
    60ac:	4608      	mov	r0, r1
    60ae:	b141      	cbz	r1, 60c2 <mbedtls_mpi_core_bitlen+0x1a>
        return( 0 );

    for( i = A_limbs - 1; i > 0; i-- )
    60b0:	3901      	subs	r1, #1
    60b2:	b939      	cbnz	r1, 60c4 <mbedtls_mpi_core_bitlen+0x1c>
        if( A[i] != 0 )
            break;

    j = biL - mbedtls_mpi_core_clz( A[i] );
    60b4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    60b8:	f7ff ffe6 	bl	6088 <mbedtls_mpi_core_clz>

    return( ( i * biL ) + j );
    60bc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    60c0:	3020      	adds	r0, #32
}
    60c2:	bd08      	pop	{r3, pc}
        if( A[i] != 0 )
    60c4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    60c8:	2a00      	cmp	r2, #0
    60ca:	d1f3      	bne.n	60b4 <mbedtls_mpi_core_bitlen+0xc>
    for( i = A_limbs - 1; i > 0; i-- )
    60cc:	3901      	subs	r1, #1
    60ce:	e7f0      	b.n	60b2 <mbedtls_mpi_core_bitlen+0xa>

000060d0 <mbedtls_mpi_core_bigendian_to_host>:
    return( mpi_bigendian_to_host_c( a ) );
}

void mbedtls_mpi_core_bigendian_to_host( mbedtls_mpi_uint *A,
                                         size_t A_limbs )
{
    60d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( A_limbs == 0 )
    60d2:	b131      	cbz	r1, 60e2 <mbedtls_mpi_core_bigendian_to_host+0x12>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = A, cur_limb_right = A + ( A_limbs - 1 );
    60d4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
    60d8:	3b01      	subs	r3, #1
    60da:	eb00 0383 	add.w	r3, r0, r3, lsl #2
         cur_limb_left <= cur_limb_right;
    60de:	4283      	cmp	r3, r0
    60e0:	d201      	bcs.n	60e6 <mbedtls_mpi_core_bigendian_to_host+0x16>
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
        *cur_limb_right = tmp;
    }
}
    60e2:	b002      	add	sp, #8
    60e4:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_bigendian_to_host_c( a ) );
    60e6:	6802      	ldr	r2, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    60e8:	2400      	movs	r4, #0
    60ea:	9201      	str	r2, [sp, #4]
        tmp             = mpi_bigendian_to_host( *cur_limb_left );
    60ec:	2204      	movs	r2, #4
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    60ee:	eb0d 0502 	add.w	r5, sp, r2
    60f2:	4629      	mov	r1, r5
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    60f4:	f815 6b01 	ldrb.w	r6, [r5], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    60f8:	3a01      	subs	r2, #1
    60fa:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    60fe:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    6102:	d1f7      	bne.n	60f4 <mbedtls_mpi_core_bigendian_to_host+0x24>
    return( mpi_bigendian_to_host_c( a ) );
    6104:	681d      	ldr	r5, [r3, #0]
    6106:	9501      	str	r5, [sp, #4]
    mbedtls_mpi_uint tmp = 0;
    6108:	4615      	mov	r5, r2
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    610a:	3201      	adds	r2, #1
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    610c:	f811 6b01 	ldrb.w	r6, [r1], #1
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    6110:	b2d2      	uxtb	r2, r2
    6112:	2a04      	cmp	r2, #4
        tmp |= (mbedtls_mpi_uint) *a_ptr;
    6114:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, a_ptr = (unsigned char *) &a; i < ciL; i++, a_ptr++ )
    6118:	d1f7      	bne.n	610a <mbedtls_mpi_core_bigendian_to_host+0x3a>
        *cur_limb_left  = mpi_bigendian_to_host( *cur_limb_right );
    611a:	f840 5b04 	str.w	r5, [r0], #4
        *cur_limb_right = tmp;
    611e:	f843 4904 	str.w	r4, [r3], #-4
         cur_limb_left++, cur_limb_right-- )
    6122:	e7dc      	b.n	60de <mbedtls_mpi_core_bigendian_to_host+0xe>

00006124 <mbedtls_mpi_core_cond_assign>:

void mbedtls_mpi_core_cond_assign( mbedtls_mpi_uint *X,
                                   const mbedtls_mpi_uint *A,
                                   size_t limbs,
                                   unsigned char assign )
{
    6124:	b410      	push	{r4}
    6126:	4604      	mov	r4, r0
    if( X == A )
    6128:	428c      	cmp	r4, r1
{
    612a:	4610      	mov	r0, r2
    if( X == A )
    612c:	d004      	beq.n	6138 <mbedtls_mpi_core_cond_assign+0x14>
        return;

    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    612e:	460a      	mov	r2, r1
    6130:	4621      	mov	r1, r4
}
    6132:	bc10      	pop	{r4}
    mbedtls_ct_mpi_uint_cond_assign( limbs, X, A, assign );
    6134:	f000 b9f3 	b.w	651e <mbedtls_ct_mpi_uint_cond_assign>
}
    6138:	bc10      	pop	{r4}
    613a:	4770      	bx	lr

0000613c <mbedtls_mpi_core_read_be>:

int mbedtls_mpi_core_read_be( mbedtls_mpi_uint *X,
                              size_t X_limbs,
                              const unsigned char *input,
                              size_t input_length )
{
    613c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6140:	461c      	mov	r4, r3
    const size_t limbs = CHARS_TO_LIMBS( input_length );
    6142:	f013 0303 	ands.w	r3, r3, #3
    6146:	bf18      	it	ne
    6148:	2301      	movne	r3, #1
    614a:	eb03 0394 	add.w	r3, r3, r4, lsr #2

    if( X_limbs < limbs )
    614e:	428b      	cmp	r3, r1
{
    6150:	4606      	mov	r6, r0
    6152:	460d      	mov	r5, r1
    6154:	4690      	mov	r8, r2
    if( X_limbs < limbs )
    6156:	d813      	bhi.n	6180 <mbedtls_mpi_core_read_be+0x44>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );

    /* If X_limbs is 0, input_length must also be 0 (from previous test).
     * Nothing to do. */
    if( X_limbs == 0 )
    6158:	b179      	cbz	r1, 617a <mbedtls_mpi_core_read_be+0x3e>
        return( 0 );

    memset( X, 0, X_limbs * ciL );
    615a:	008f      	lsls	r7, r1, #2
    615c:	463a      	mov	r2, r7
    615e:	2100      	movs	r1, #0
    6160:	f7fe fe00 	bl	4d64 <memset>

    /* memcpy() with (NULL, 0) is undefined behaviour */
    if( input_length != 0 )
    6164:	b12c      	cbz	r4, 6172 <mbedtls_mpi_core_read_be+0x36>
    {
        size_t overhead = ( X_limbs * ciL ) - input_length;
    6166:	1b38      	subs	r0, r7, r4
        unsigned char *Xp = (unsigned char *) X;
        memcpy( Xp + overhead, input, input_length );
    6168:	4622      	mov	r2, r4
    616a:	4641      	mov	r1, r8
    616c:	4430      	add	r0, r6
    616e:	f7fe fdee 	bl	4d4e <memcpy>
    }

    mbedtls_mpi_core_bigendian_to_host( X, X_limbs );
    6172:	4629      	mov	r1, r5
    6174:	4630      	mov	r0, r6
    6176:	f7ff ffab 	bl	60d0 <mbedtls_mpi_core_bigendian_to_host>
        return( 0 );
    617a:	2000      	movs	r0, #0

    return( 0 );
}
    617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    6180:	f06f 0007 	mvn.w	r0, #7
    6184:	e7fa      	b.n	617c <mbedtls_mpi_core_read_be+0x40>

00006186 <mbedtls_mpi_core_write_be>:
    size_t bytes_to_copy;
    unsigned char *p;

    stored_bytes = X_limbs * ciL;

    if( stored_bytes < output_length )
    6186:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
{
    618a:	b570      	push	{r4, r5, r6, lr}
    618c:	4604      	mov	r4, r0
    stored_bytes = X_limbs * ciL;
    618e:	ea4f 0581 	mov.w	r5, r1, lsl #2
{
    6192:	4610      	mov	r0, r2
    if( stored_bytes < output_length )
    6194:	d919      	bls.n	61ca <mbedtls_mpi_core_write_be+0x44>
         * null bytes and record the position at which to start
         * writing the significant bytes. In this case, the execution
         * trace of this function does not depend on the value of the
         * number. */
        bytes_to_copy = stored_bytes;
        p = output + output_length - stored_bytes;
    6196:	1b5a      	subs	r2, r3, r5
    6198:	1886      	adds	r6, r0, r2
        memset( output, 0, output_length - stored_bytes );
    619a:	2100      	movs	r1, #0
    619c:	f7fe fde2 	bl	4d64 <memset>
        p = output + output_length - stored_bytes;
    61a0:	4630      	mov	r0, r6
    61a2:	462b      	mov	r3, r5
            if( GET_BYTE( X, i ) != 0 )
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
        }
    }

    for( size_t i = 0; i < bytes_to_copy; i++ )
    61a4:	2100      	movs	r1, #0
    61a6:	18c2      	adds	r2, r0, r3
    61a8:	428b      	cmp	r3, r1
    61aa:	d110      	bne.n	61ce <mbedtls_mpi_core_write_be+0x48>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );

    return( 0 );
    61ac:	2000      	movs	r0, #0
}
    61ae:	bd70      	pop	{r4, r5, r6, pc}
            if( GET_BYTE( X, i ) != 0 )
    61b0:	f022 0103 	bic.w	r1, r2, #3
    61b4:	5861      	ldr	r1, [r4, r1]
    61b6:	f002 0603 	and.w	r6, r2, #3
    61ba:	00f6      	lsls	r6, r6, #3
    61bc:	40f1      	lsrs	r1, r6
    61be:	b2c9      	uxtb	r1, r1
    61c0:	b981      	cbnz	r1, 61e4 <mbedtls_mpi_core_write_be+0x5e>
        for( size_t i = bytes_to_copy; i < stored_bytes; i++ )
    61c2:	3201      	adds	r2, #1
    61c4:	42aa      	cmp	r2, r5
    61c6:	d1f3      	bne.n	61b0 <mbedtls_mpi_core_write_be+0x2a>
    61c8:	e7ec      	b.n	61a4 <mbedtls_mpi_core_write_be+0x1e>
    61ca:	461a      	mov	r2, r3
    61cc:	e7fa      	b.n	61c4 <mbedtls_mpi_core_write_be+0x3e>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    61ce:	f021 0003 	bic.w	r0, r1, #3
    61d2:	5820      	ldr	r0, [r4, r0]
    61d4:	f001 0503 	and.w	r5, r1, #3
    61d8:	00ed      	lsls	r5, r5, #3
    61da:	40e8      	lsrs	r0, r5
    61dc:	f802 0d01 	strb.w	r0, [r2, #-1]!
    for( size_t i = 0; i < bytes_to_copy; i++ )
    61e0:	3101      	adds	r1, #1
    61e2:	e7e1      	b.n	61a8 <mbedtls_mpi_core_write_be+0x22>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    61e4:	f06f 0007 	mvn.w	r0, #7
    61e8:	e7e1      	b.n	61ae <mbedtls_mpi_core_write_be+0x28>

000061ea <mbedtls_mpi_core_shift_r>:
                               size_t count )
{
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
    61ea:	0953      	lsrs	r3, r2, #5
    v1 = count & (biL - 1);

    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    61ec:	428b      	cmp	r3, r1
{
    61ee:	b4f0      	push	{r4, r5, r6, r7}
    v1 = count & (biL - 1);
    61f0:	f002 041f 	and.w	r4, r2, #31
    if( v0 > limbs || ( v0 == limbs && v1 > 0 ) )
    61f4:	d801      	bhi.n	61fa <mbedtls_mpi_core_shift_r+0x10>
    61f6:	d109      	bne.n	620c <mbedtls_mpi_core_shift_r+0x22>
    61f8:	b124      	cbz	r4, 6204 <mbedtls_mpi_core_shift_r+0x1a>
            X[i - 1] >>= v1;
            X[i - 1] |= r0;
            r0 = r1;
        }
    }
}
    61fa:	bcf0      	pop	{r4, r5, r6, r7}
        memset( X, 0, limbs * ciL );
    61fc:	008a      	lsls	r2, r1, #2
    61fe:	2100      	movs	r1, #0
    6200:	f7fe bdb0 	b.w	4d64 <memset>
    if( v0 > 0 )
    6204:	2a1f      	cmp	r2, #31
    6206:	d803      	bhi.n	6210 <mbedtls_mpi_core_shift_r+0x26>
}
    6208:	bcf0      	pop	{r4, r5, r6, r7}
    620a:	4770      	bx	lr
    if( v0 > 0 )
    620c:	2a1f      	cmp	r2, #31
    620e:	d90a      	bls.n	6226 <mbedtls_mpi_core_shift_r+0x3c>
    6210:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    6214:	1f05      	subs	r5, r0, #4
    6216:	eb00 0681 	add.w	r6, r0, r1, lsl #2
        for( i = 0; i < limbs - v0; i++ )
    621a:	42b2      	cmp	r2, r6
    621c:	d116      	bne.n	624c <mbedtls_mpi_core_shift_r+0x62>
            X[i] = 0;
    621e:	2200      	movs	r2, #0
        for( i = 0; i < limbs - v0; i++ )
    6220:	1acb      	subs	r3, r1, r3
        for( ; i < limbs; i++ )
    6222:	428b      	cmp	r3, r1
    6224:	d317      	bcc.n	6256 <mbedtls_mpi_core_shift_r+0x6c>
    if( v1 > 0 )
    6226:	2c00      	cmp	r4, #0
    6228:	d0ee      	beq.n	6208 <mbedtls_mpi_core_shift_r+0x1e>
    mbedtls_mpi_uint r0 = 0, r1;
    622a:	2200      	movs	r2, #0
    622c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
            r1 = X[i - 1] << (biL - v1);
    6230:	f1c4 0620 	rsb	r6, r4, #32
        for( i = limbs; i > 0; i-- )
    6234:	4281      	cmp	r1, r0
    6236:	d0e7      	beq.n	6208 <mbedtls_mpi_core_shift_r+0x1e>
            r1 = X[i - 1] << (biL - v1);
    6238:	f851 5c04 	ldr.w	r5, [r1, #-4]
            X[i - 1] >>= v1;
    623c:	fa25 f304 	lsr.w	r3, r5, r4
            X[i - 1] |= r0;
    6240:	4313      	orrs	r3, r2
    6242:	f841 3d04 	str.w	r3, [r1, #-4]!
            r0 = r1;
    6246:	fa05 f206 	lsl.w	r2, r5, r6
    624a:	e7f3      	b.n	6234 <mbedtls_mpi_core_shift_r+0x4a>
            X[i] = X[i + v0];
    624c:	f852 7b04 	ldr.w	r7, [r2], #4
    6250:	f845 7f04 	str.w	r7, [r5, #4]!
        for( i = 0; i < limbs - v0; i++ )
    6254:	e7e1      	b.n	621a <mbedtls_mpi_core_shift_r+0x30>
            X[i] = 0;
    6256:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for( ; i < limbs; i++ )
    625a:	3301      	adds	r3, #1
    625c:	e7e1      	b.n	6222 <mbedtls_mpi_core_shift_r+0x38>

0000625e <mbedtls_mpi_core_add>:

mbedtls_mpi_uint mbedtls_mpi_core_add( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    625e:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    6260:	2400      	movs	r4, #0
{
    6262:	4684      	mov	ip, r0
    mbedtls_mpi_uint c = 0;
    6264:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    6266:	429c      	cmp	r4, r3
    6268:	d100      	bne.n	626c <mbedtls_mpi_core_add+0xe>
        c += ( t < B[i] );
        X[i] = t;
    }

    return( c );
}
    626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint t = c + A[i];
    626c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
        c = ( t < A[i] );
    6270:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
    6274:	182e      	adds	r6, r5, r0
    6276:	bf2c      	ite	cs
    6278:	2501      	movcs	r5, #1
    627a:	2500      	movcc	r5, #0
        c += ( t < B[i] );
    627c:	19bf      	adds	r7, r7, r6
        X[i] = t;
    627e:	f84c 7024 	str.w	r7, [ip, r4, lsl #2]
        c += ( t < B[i] );
    6282:	f145 0000 	adc.w	r0, r5, #0
    for( size_t i = 0; i < limbs; i++ )
    6286:	3401      	adds	r4, #1
    6288:	e7ed      	b.n	6266 <mbedtls_mpi_core_add+0x8>

0000628a <mbedtls_mpi_core_sub>:

mbedtls_mpi_uint mbedtls_mpi_core_sub( mbedtls_mpi_uint *X,
                                       const mbedtls_mpi_uint *A,
                                       const mbedtls_mpi_uint *B,
                                       size_t limbs )
{
    628a:	b5f0      	push	{r4, r5, r6, r7, lr}
    mbedtls_mpi_uint c = 0;

    for( size_t i = 0; i < limbs; i++ )
    628c:	2400      	movs	r4, #0
{
    628e:	4606      	mov	r6, r0
    mbedtls_mpi_uint c = 0;
    6290:	4620      	mov	r0, r4
    for( size_t i = 0; i < limbs; i++ )
    6292:	429c      	cmp	r4, r3
    6294:	d100      	bne.n	6298 <mbedtls_mpi_core_sub+0xe>
        c = ( t < B[i] ) + z;
        X[i] = t - B[i];
    }

    return( c );
}
    6296:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mbedtls_mpi_uint z = ( A[i] < c );
    6298:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
        c = ( t < B[i] ) + z;
    629c:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
        mbedtls_mpi_uint t = A[i] - c;
    62a0:	ebac 0500 	sub.w	r5, ip, r0
        c = ( t < B[i] ) + z;
    62a4:	42af      	cmp	r7, r5
    62a6:	bf94      	ite	ls
    62a8:	f04f 0e00 	movls.w	lr, #0
    62ac:	f04f 0e01 	movhi.w	lr, #1
        X[i] = t - B[i];
    62b0:	1bed      	subs	r5, r5, r7
    62b2:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
        c = ( t < B[i] ) + z;
    62b6:	4584      	cmp	ip, r0
    62b8:	bf2c      	ite	cs
    62ba:	4670      	movcs	r0, lr
    62bc:	f10e 0001 	addcc.w	r0, lr, #1
    for( size_t i = 0; i < limbs; i++ )
    62c0:	3401      	adds	r4, #1
    62c2:	e7e6      	b.n	6292 <mbedtls_mpi_core_sub+0x8>

000062c4 <mbedtls_mpi_core_mla>:
    /*
     * It is a documented precondition of this function that d_len >= s_len.
     * If that's not the case, we swap these round: this turns what would be
     * a buffer overflow into an incorrect result.
     */
    if( d_len < s_len )
    62c4:	428b      	cmp	r3, r1
    62c6:	bf28      	it	cs
    62c8:	460b      	movcs	r3, r1
{
    62ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62ce:	4696      	mov	lr, r2
        s_len = d_len;
    size_t excess_len = d_len - s_len;
    size_t steps_x8 = s_len / 8;
    62d0:	08de      	lsrs	r6, r3, #3
{
    62d2:	4604      	mov	r4, r0
    size_t excess_len = d_len - s_len;
    62d4:	1ac9      	subs	r1, r1, r3
    size_t steps_x1 = s_len & 7;
    62d6:	f003 0807 	and.w	r8, r3, #7

    while( steps_x8-- )
    62da:	4675      	mov	r5, lr
    62dc:	4603      	mov	r3, r0
    size_t steps_x8 = s_len / 8;
    62de:	46b4      	mov	ip, r6
    mbedtls_mpi_uint c = 0; /* carry */
    62e0:	2000      	movs	r0, #0
{
    62e2:	9a08      	ldr	r2, [sp, #32]
    while( steps_x8-- )
    62e4:	f10c 3cff 	add.w	ip, ip, #4294967295
    62e8:	f1bc 3fff 	cmp.w	ip, #4294967295
    62ec:	f103 0320 	add.w	r3, r3, #32
    62f0:	f105 0520 	add.w	r5, r5, #32
    62f4:	d111      	bne.n	631a <mbedtls_mpi_core_mla+0x56>
    62f6:	eb04 1446 	add.w	r4, r4, r6, lsl #5
    62fa:	4625      	mov	r5, r4
    62fc:	eb0e 1646 	add.w	r6, lr, r6, lsl #5
    6300:	ea4f 0c88 	mov.w	ip, r8, lsl #2
    6304:	eb06 0e88 	add.w	lr, r6, r8, lsl #2
        MULADDC_X8_INIT
        MULADDC_X8_CORE
        MULADDC_X8_STOP
    }

    while( steps_x1-- )
    6308:	4576      	cmp	r6, lr
    630a:	f040 8081 	bne.w	6410 <mbedtls_mpi_core_mla+0x14c>
    630e:	4464      	add	r4, ip
        MULADDC_X1_INIT
        MULADDC_X1_CORE
        MULADDC_X1_STOP
    }

    while( excess_len-- )
    6310:	3901      	subs	r1, #1
    6312:	f080 808b 	bcs.w	642c <mbedtls_mpi_core_mla+0x168>
        c = ( *d < c );
        d++;
    }

    return( c );
}
    6316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MULADDC_X8_CORE
    631a:	f855 7c20 	ldr.w	r7, [r5, #-32]
    631e:	fba2 9707 	umull	r9, r7, r2, r7
    6322:	eb10 0909 	adds.w	r9, r0, r9
    6326:	f853 0c20 	ldr.w	r0, [r3, #-32]
    632a:	f147 0700 	adc.w	r7, r7, #0
    632e:	eb10 0009 	adds.w	r0, r0, r9
    6332:	f843 0c20 	str.w	r0, [r3, #-32]
    6336:	f855 0c1c 	ldr.w	r0, [r5, #-28]
    633a:	f147 0700 	adc.w	r7, r7, #0
    633e:	fba2 0900 	umull	r0, r9, r2, r0
    6342:	183f      	adds	r7, r7, r0
    6344:	f853 0c1c 	ldr.w	r0, [r3, #-28]
    6348:	f149 0900 	adc.w	r9, r9, #0
    634c:	19c0      	adds	r0, r0, r7
    634e:	f843 0c1c 	str.w	r0, [r3, #-28]
    6352:	f855 0c18 	ldr.w	r0, [r5, #-24]
    6356:	f149 0900 	adc.w	r9, r9, #0
    635a:	fba2 0700 	umull	r0, r7, r2, r0
    635e:	eb19 0900 	adds.w	r9, r9, r0
    6362:	f853 0c18 	ldr.w	r0, [r3, #-24]
    6366:	f147 0700 	adc.w	r7, r7, #0
    636a:	eb10 0009 	adds.w	r0, r0, r9
    636e:	f843 0c18 	str.w	r0, [r3, #-24]
    6372:	f855 0c14 	ldr.w	r0, [r5, #-20]
    6376:	f147 0700 	adc.w	r7, r7, #0
    637a:	fba2 0900 	umull	r0, r9, r2, r0
    637e:	183f      	adds	r7, r7, r0
    6380:	f853 0c14 	ldr.w	r0, [r3, #-20]
    6384:	f149 0900 	adc.w	r9, r9, #0
    6388:	19c0      	adds	r0, r0, r7
    638a:	f843 0c14 	str.w	r0, [r3, #-20]
    638e:	f855 0c10 	ldr.w	r0, [r5, #-16]
    6392:	f149 0900 	adc.w	r9, r9, #0
    6396:	fba2 0700 	umull	r0, r7, r2, r0
    639a:	eb19 0900 	adds.w	r9, r9, r0
    639e:	f853 0c10 	ldr.w	r0, [r3, #-16]
    63a2:	f147 0700 	adc.w	r7, r7, #0
    63a6:	eb10 0009 	adds.w	r0, r0, r9
    63aa:	f843 0c10 	str.w	r0, [r3, #-16]
    63ae:	f855 0c0c 	ldr.w	r0, [r5, #-12]
    63b2:	f147 0700 	adc.w	r7, r7, #0
    63b6:	fba2 0900 	umull	r0, r9, r2, r0
    63ba:	183f      	adds	r7, r7, r0
    63bc:	f853 0c0c 	ldr.w	r0, [r3, #-12]
    63c0:	f149 0900 	adc.w	r9, r9, #0
    63c4:	19c0      	adds	r0, r0, r7
    63c6:	f843 0c0c 	str.w	r0, [r3, #-12]
    63ca:	f855 0c08 	ldr.w	r0, [r5, #-8]
    63ce:	f149 0900 	adc.w	r9, r9, #0
    63d2:	fba2 0700 	umull	r0, r7, r2, r0
    63d6:	eb19 0900 	adds.w	r9, r9, r0
    63da:	f853 0c08 	ldr.w	r0, [r3, #-8]
    63de:	f147 0700 	adc.w	r7, r7, #0
    63e2:	eb10 0009 	adds.w	r0, r0, r9
    63e6:	f843 0c08 	str.w	r0, [r3, #-8]
    63ea:	f855 0c04 	ldr.w	r0, [r5, #-4]
    63ee:	f147 0700 	adc.w	r7, r7, #0
    63f2:	fba2 0a00 	umull	r0, sl, r2, r0
    63f6:	eb17 0900 	adds.w	r9, r7, r0
    63fa:	f853 7c04 	ldr.w	r7, [r3, #-4]
    63fe:	f14a 0000 	adc.w	r0, sl, #0
    6402:	eb17 0709 	adds.w	r7, r7, r9
    6406:	f140 0000 	adc.w	r0, r0, #0
    640a:	f843 7c04 	str.w	r7, [r3, #-4]
    640e:	e769      	b.n	62e4 <mbedtls_mpi_core_mla+0x20>
        MULADDC_X1_CORE
    6410:	f856 3b04 	ldr.w	r3, [r6], #4
    6414:	fba2 3703 	umull	r3, r7, r2, r3
    6418:	18c3      	adds	r3, r0, r3
    641a:	6828      	ldr	r0, [r5, #0]
    641c:	f147 0700 	adc.w	r7, r7, #0
    6420:	18c3      	adds	r3, r0, r3
    6422:	f147 0000 	adc.w	r0, r7, #0
    6426:	f845 3b04 	str.w	r3, [r5], #4
    642a:	e76d      	b.n	6308 <mbedtls_mpi_core_mla+0x44>
        *d += c;
    642c:	6823      	ldr	r3, [r4, #0]
    642e:	181b      	adds	r3, r3, r0
        c = ( *d < c );
    6430:	bf2c      	ite	cs
    6432:	2001      	movcs	r0, #1
    6434:	2000      	movcc	r0, #0
        *d += c;
    6436:	f844 3b04 	str.w	r3, [r4], #4
        d++;
    643a:	e769      	b.n	6310 <mbedtls_mpi_core_mla+0x4c>

0000643c <mbedtls_mpi_core_montmul_init>:
 */
mbedtls_mpi_uint mbedtls_mpi_core_montmul_init( const mbedtls_mpi_uint *N )
{
    mbedtls_mpi_uint x = N[0];

    x += ( ( N[0] + 2 ) & 4 ) << 1;
    643c:	2303      	movs	r3, #3
    mbedtls_mpi_uint x = N[0];
    643e:	6801      	ldr	r1, [r0, #0]
    x += ( ( N[0] + 2 ) & 4 ) << 1;
    6440:	1c88      	adds	r0, r1, #2
    6442:	0040      	lsls	r0, r0, #1
    6444:	f000 0008 	and.w	r0, r0, #8
    6448:	4408      	add	r0, r1

    for( unsigned int i = biL; i >= 8; i /= 2 )
        x *= ( 2 - ( N[0] * x ) );
    644a:	fb00 f201 	mul.w	r2, r0, r1
    for( unsigned int i = biL; i >= 8; i /= 2 )
    644e:	3b01      	subs	r3, #1
        x *= ( 2 - ( N[0] * x ) );
    6450:	f1c2 0202 	rsb	r2, r2, #2
    6454:	fb02 f000 	mul.w	r0, r2, r0
    for( unsigned int i = biL; i >= 8; i /= 2 )
    6458:	d1f7      	bne.n	644a <mbedtls_mpi_core_montmul_init+0xe>

    return( ~x + 1 );
}
    645a:	4240      	negs	r0, r0
    645c:	4770      	bx	lr

0000645e <mbedtls_mpi_core_montmul>:
                               size_t B_limbs,
                               const mbedtls_mpi_uint *N,
                               size_t AN_limbs,
                               mbedtls_mpi_uint mm,
                               mbedtls_mpi_uint *T )
{
    645e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6462:	b087      	sub	sp, #28
    6464:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );

    for( size_t i = 0; i < AN_limbs; i++ )
    6466:	2400      	movs	r4, #0
    6468:	462e      	mov	r6, r5
{
    646a:	9304      	str	r3, [sp, #16]
    646c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    646e:	4691      	mov	r9, r2
    6470:	9302      	str	r3, [sp, #8]
    6472:	e9dd 8311 	ldrd	r8, r3, [sp, #68]	; 0x44
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    6476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
{
    647a:	4683      	mov	fp, r0
    647c:	468a      	mov	sl, r1
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    647e:	4628      	mov	r0, r5
    6480:	2100      	movs	r1, #0
    6482:	3204      	adds	r2, #4
{
    6484:	9305      	str	r3, [sp, #20]
    memset( T, 0, ( 2 * AN_limbs + 1 ) * ciL );
    6486:	f7fe fc6d 	bl	4d64 <memset>
    {
        /* T = (T + u0*B + u1*N) / 2^biL */
        mbedtls_mpi_uint u0 = A[i];
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;

        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    648a:	f108 0302 	add.w	r3, r8, #2
    648e:	9303      	str	r3, [sp, #12]
    for( size_t i = 0; i < AN_limbs; i++ )
    6490:	4544      	cmp	r4, r8
    6492:	d113      	bne.n	64bc <mbedtls_mpi_core_montmul+0x5e>
    6494:	eb05 0184 	add.w	r1, r5, r4, lsl #2
     * We also look to see if there was any carry in the final additions in the
     * loop above.
     */

    mbedtls_mpi_uint carry  = T[AN_limbs];
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    6498:	4623      	mov	r3, r4
    649a:	9a02      	ldr	r2, [sp, #8]
    649c:	4658      	mov	r0, fp
    mbedtls_mpi_uint carry  = T[AN_limbs];
    649e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    mbedtls_mpi_uint borrow = mbedtls_mpi_core_sub( X, T, N, AN_limbs );
    64a2:	f7ff fef2 	bl	628a <mbedtls_mpi_core_sub>
     * and (carry, borrow) = (1, 0) can't happen.
     *
     * So the correct return value is already in X if (carry ^ borrow) = 0,
     * but is in (the lower AN_limbs limbs of) T if (carry ^ borrow) = 1.
     */
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    64a6:	460a      	mov	r2, r1
    64a8:	ea85 0300 	eor.w	r3, r5, r0
    64ac:	4659      	mov	r1, fp
    64ae:	4620      	mov	r0, r4
    64b0:	b2db      	uxtb	r3, r3
}
    64b2:	b007      	add	sp, #28
    64b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    mbedtls_ct_mpi_uint_cond_assign( AN_limbs, X, T, (unsigned char) ( carry ^ borrow ) );
    64b8:	f000 b831 	b.w	651e <mbedtls_ct_mpi_uint_cond_assign>
        mbedtls_mpi_uint u0 = A[i];
    64bc:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    64c0:	f8d9 2000 	ldr.w	r2, [r9]
    64c4:	6837      	ldr	r7, [r6, #0]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    64c6:	4630      	mov	r0, r6
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    64c8:	fb02 7703 	mla	r7, r2, r3, r7
    64cc:	9a05      	ldr	r2, [sp, #20]
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    64ce:	9903      	ldr	r1, [sp, #12]
        mbedtls_mpi_uint u1 = ( T[0] + u0 * B[0] ) * mm;
    64d0:	4357      	muls	r7, r2
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, B, B_limbs, u0 );
    64d2:	9300      	str	r3, [sp, #0]
    64d4:	464a      	mov	r2, r9
    64d6:	9b04      	ldr	r3, [sp, #16]
    64d8:	f7ff fef4 	bl	62c4 <mbedtls_mpi_core_mla>
        (void) mbedtls_mpi_core_mla( T, AN_limbs + 2, N, AN_limbs, u1 );
    64dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    64e0:	4630      	mov	r0, r6
    64e2:	4643      	mov	r3, r8
    64e4:	9700      	str	r7, [sp, #0]
    64e6:	f7ff feed 	bl	62c4 <mbedtls_mpi_core_mla>
        T++;
    64ea:	3604      	adds	r6, #4
    for( size_t i = 0; i < AN_limbs; i++ )
    64ec:	3401      	adds	r4, #1
    64ee:	e7cf      	b.n	6490 <mbedtls_mpi_core_montmul+0x32>

000064f0 <mbedtls_mpi_core_sub_int>:

mbedtls_mpi_uint mbedtls_mpi_core_sub_int( mbedtls_mpi_uint *X,
                                           const mbedtls_mpi_uint *A,
                                           mbedtls_mpi_uint c, /* doubles as carry */
                                           size_t limbs )
{
    64f0:	b530      	push	{r4, r5, lr}
    64f2:	4605      	mov	r5, r0
    for( size_t i = 0; i < limbs; i++ )
    64f4:	4610      	mov	r0, r2
    64f6:	2200      	movs	r2, #0
    64f8:	429a      	cmp	r2, r3
    64fa:	d100      	bne.n	64fe <mbedtls_mpi_core_sub_int+0xe>
        c = ( t > s );
        X[i] = t;
    }

    return( c );
}
    64fc:	bd30      	pop	{r4, r5, pc}
        mbedtls_mpi_uint t = s - c;
    64fe:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
        c = ( t > s );
    6502:	1a24      	subs	r4, r4, r0
        X[i] = t;
    6504:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
        c = ( t > s );
    6508:	bf34      	ite	cc
    650a:	2001      	movcc	r0, #1
    650c:	2000      	movcs	r0, #0
    for( size_t i = 0; i < limbs; i++ )
    650e:	3201      	adds	r2, #1
    6510:	e7f2      	b.n	64f8 <mbedtls_mpi_core_sub_int+0x8>

00006512 <mbedtls_ct_size_bool_eq>:

unsigned mbedtls_ct_size_bool_eq( size_t x,
                                  size_t y )
{
    /* diff = 0 if x == y, non-zero otherwise */
    const size_t diff = x ^ y;
    6512:	4041      	eors	r1, r0
#pragma warning( push )
#pragma warning( disable : 4146 )
#endif

    /* diff_msb's most significant bit is equal to x != y */
    const size_t diff_msb = ( diff | (size_t) -diff );
    6514:	4248      	negs	r0, r1
    6516:	4308      	orrs	r0, r1

    /* diff1 = (x != y) ? 1 : 0 */
    const unsigned diff1 = diff_msb >> ( sizeof( diff_msb ) * 8 - 1 );

    return( 1 ^ diff1 );
}
    6518:	43c0      	mvns	r0, r0
    651a:	0fc0      	lsrs	r0, r0, #31
    651c:	4770      	bx	lr

0000651e <mbedtls_ct_mpi_uint_cond_assign>:

void mbedtls_ct_mpi_uint_cond_assign( size_t n,
                                      mbedtls_mpi_uint *dest,
                                      const mbedtls_mpi_uint *src,
                                      unsigned char condition )
{
    651e:	b5f0      	push	{r4, r5, r6, r7, lr}

#if defined(_MSC_VER)
#pragma warning( pop )
#endif

    for( i = 0; i < n; i++ )
    6520:	2500      	movs	r5, #0
    const mbedtls_mpi_uint mask = -condition;
    6522:	425f      	negs	r7, r3
    for( i = 0; i < n; i++ )
    6524:	3904      	subs	r1, #4
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    6526:	3b01      	subs	r3, #1
    for( i = 0; i < n; i++ )
    6528:	4285      	cmp	r5, r0
    652a:	d100      	bne.n	652e <mbedtls_ct_mpi_uint_cond_assign+0x10>
}
    652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dest[i] = ( src[i] & mask ) | ( dest[i] & ~mask );
    652e:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
    6532:	f851 4f04 	ldr.w	r4, [r1, #4]!
    6536:	403e      	ands	r6, r7
    6538:	401c      	ands	r4, r3
    653a:	4334      	orrs	r4, r6
    653c:	600c      	str	r4, [r1, #0]
    for( i = 0; i < n; i++ )
    653e:	3501      	adds	r5, #1
    6540:	e7f2      	b.n	6528 <mbedtls_ct_mpi_uint_cond_assign+0xa>

00006542 <mbedtls_mpi_safe_cond_assign>:
__declspec(noinline)
#endif
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X,
                                  const mbedtls_mpi *Y,
                                  unsigned char assign )
{
    6542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6546:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( Y != NULL );

    /* all-bits 1 if assign is 1, all-bits 0 if assign is 0 */
    mbedtls_mpi_uint limb_mask = mbedtls_ct_mpi_uint_mask( assign );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    6548:	6849      	ldr	r1, [r1, #4]
{
    654a:	4605      	mov	r5, r0
    654c:	4691      	mov	r9, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
    654e:	f7fe fefc 	bl	534a <mbedtls_mpi_grow>
    6552:	4680      	mov	r8, r0
    6554:	b9c8      	cbnz	r0, 658a <mbedtls_mpi_safe_cond_assign+0x48>
    return( - ( ( value | - value ) >> ( sizeof( value ) * 8 - 1 ) ) );
    6556:	f1c9 0600 	rsb	r6, r9, #0
    655a:	ea46 0609 	orr.w	r6, r6, r9
    655e:	17f6      	asrs	r6, r6, #31
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );

    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );

    for( size_t i = Y->n; i < X->n; i++ )
        X->p[i] &= ~limb_mask;
    6560:	43f6      	mvns	r6, r6
    unsigned uif0 = if0 + 1;
    6562:	682b      	ldr	r3, [r5, #0]
    unsigned uif1 = if1 + 1;
    6564:	683c      	ldr	r4, [r7, #0]
    unsigned uif0 = if0 + 1;
    6566:	3301      	adds	r3, #1
    unsigned uif1 = if1 + 1;
    6568:	3401      	adds	r4, #1
    return( (int) ur - 1 );
    656a:	405c      	eors	r4, r3
    656c:	ea04 0449 	and.w	r4, r4, r9, lsl #1
    6570:	405c      	eors	r4, r3
    6572:	3c01      	subs	r4, #1
    X->s = mbedtls_ct_cond_select_sign( assign, Y->s, X->s );
    6574:	602c      	str	r4, [r5, #0]
    mbedtls_mpi_core_cond_assign( X->p, Y->p, Y->n, assign );
    6576:	464b      	mov	r3, r9
    6578:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
    657c:	68a8      	ldr	r0, [r5, #8]
    657e:	f7ff fdd1 	bl	6124 <mbedtls_mpi_core_cond_assign>
    for( size_t i = Y->n; i < X->n; i++ )
    6582:	687b      	ldr	r3, [r7, #4]
    6584:	686a      	ldr	r2, [r5, #4]
    6586:	429a      	cmp	r2, r3
    6588:	d802      	bhi.n	6590 <mbedtls_mpi_safe_cond_assign+0x4e>

cleanup:
    return( ret );
}
    658a:	4640      	mov	r0, r8
    658c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        X->p[i] &= ~limb_mask;
    6590:	68a9      	ldr	r1, [r5, #8]
    6592:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    6596:	4032      	ands	r2, r6
    6598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( size_t i = Y->n; i < X->n; i++ )
    659c:	3301      	adds	r3, #1
    659e:	e7f1      	b.n	6584 <mbedtls_mpi_safe_cond_assign+0x42>

000065a0 <platform_calloc_uninit>:
}
    65a0:	2000      	movs	r0, #0
    65a2:	4770      	bx	lr

000065a4 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    65a4:	4770      	bx	lr

000065a6 <platform_free_uninit>:
static void platform_free_uninit( void *ptr )
    65a6:	4770      	bx	lr

000065a8 <mbedtls_rsa_import>:
{
    65a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    65ac:	4604      	mov	r4, r0
    65ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    65b2:	4691      	mov	r9, r2
    65b4:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    65b6:	460d      	mov	r5, r1
    65b8:	b951      	cbnz	r1, 65d0 <mbedtls_rsa_import+0x28>
    65ba:	f1b9 0f00 	cmp.w	r9, #0
    65be:	d110      	bne.n	65e2 <mbedtls_rsa_import+0x3a>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    65c0:	f1b8 0f00 	cmp.w	r8, #0
    65c4:	d115      	bne.n	65f2 <mbedtls_rsa_import+0x4a>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    65c6:	b9e7      	cbnz	r7, 6602 <mbedtls_rsa_import+0x5a>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    65c8:	bb1e      	cbnz	r6, 6612 <mbedtls_rsa_import+0x6a>
    if( N != NULL )
    65ca:	bb55      	cbnz	r5, 6622 <mbedtls_rsa_import+0x7a>
    return( 0 );
    65cc:	2000      	movs	r0, #0
    65ce:	e006      	b.n	65de <mbedtls_rsa_import+0x36>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    65d0:	3008      	adds	r0, #8
    65d2:	f7fe fefc 	bl	53ce <mbedtls_mpi_copy>
    65d6:	2800      	cmp	r0, #0
    65d8:	d0ef      	beq.n	65ba <mbedtls_rsa_import+0x12>
    65da:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    65de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    65e2:	4649      	mov	r1, r9
    65e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    65e8:	f7fe fef1 	bl	53ce <mbedtls_mpi_copy>
    65ec:	2800      	cmp	r0, #0
    65ee:	d0e7      	beq.n	65c0 <mbedtls_rsa_import+0x18>
    65f0:	e7f3      	b.n	65da <mbedtls_rsa_import+0x32>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    65f2:	4641      	mov	r1, r8
    65f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    65f8:	f7fe fee9 	bl	53ce <mbedtls_mpi_copy>
    65fc:	2800      	cmp	r0, #0
    65fe:	d0e2      	beq.n	65c6 <mbedtls_rsa_import+0x1e>
    6600:	e7eb      	b.n	65da <mbedtls_rsa_import+0x32>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    6602:	4639      	mov	r1, r7
    6604:	f104 0020 	add.w	r0, r4, #32
    6608:	f7fe fee1 	bl	53ce <mbedtls_mpi_copy>
    660c:	2800      	cmp	r0, #0
    660e:	d0db      	beq.n	65c8 <mbedtls_rsa_import+0x20>
    6610:	e7e3      	b.n	65da <mbedtls_rsa_import+0x32>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    6612:	4631      	mov	r1, r6
    6614:	f104 0014 	add.w	r0, r4, #20
    6618:	f7fe fed9 	bl	53ce <mbedtls_mpi_copy>
    661c:	2800      	cmp	r0, #0
    661e:	d0d4      	beq.n	65ca <mbedtls_rsa_import+0x22>
    6620:	e7db      	b.n	65da <mbedtls_rsa_import+0x32>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    6622:	f104 0008 	add.w	r0, r4, #8
    6626:	f7fe ff34 	bl	5492 <mbedtls_mpi_size>
    662a:	6060      	str	r0, [r4, #4]
    662c:	e7ce      	b.n	65cc <mbedtls_rsa_import+0x24>

0000662e <mbedtls_rsa_init>:
{
    662e:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    6630:	22ac      	movs	r2, #172	; 0xac
    6632:	2100      	movs	r1, #0
{
    6634:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    6636:	f7fe fb95 	bl	4d64 <memset>
    ctx->padding = MBEDTLS_RSA_PKCS_V15;
    663a:	2300      	movs	r3, #0
    ctx->hash_id = MBEDTLS_MD_NONE;
    663c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
}
    6640:	bd10      	pop	{r4, pc}

00006642 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    6642:	b510      	push	{r4, lr}
    if( ctx == NULL )
    6644:	4604      	mov	r4, r0
    6646:	b3a0      	cbz	r0, 66b2 <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    6648:	308c      	adds	r0, #140	; 0x8c
    664a:	f7fe fe6c 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    664e:	f104 0098 	add.w	r0, r4, #152	; 0x98
    6652:	f7fe fe68 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    6656:	f104 0068 	add.w	r0, r4, #104	; 0x68
    665a:	f7fe fe64 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    665e:	f104 0020 	add.w	r0, r4, #32
    6662:	f7fe fe60 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    6666:	f104 0038 	add.w	r0, r4, #56	; 0x38
    666a:	f7fe fe5c 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    666e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6672:	f7fe fe58 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    6676:	f104 0014 	add.w	r0, r4, #20
    667a:	f7fe fe54 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    667e:	f104 0008 	add.w	r0, r4, #8
    6682:	f7fe fe50 	bl	5326 <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    6686:	f104 0080 	add.w	r0, r4, #128	; 0x80
    668a:	f7fe fe4c 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    668e:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6692:	f7fe fe48 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    6696:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    669a:	f7fe fe44 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    669e:	f104 0050 	add.w	r0, r4, #80	; 0x50
    66a2:	f7fe fe40 	bl	5326 <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    66a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
    {
        mbedtls_mutex_free( &ctx->mutex );
        ctx->ver = 0;
    }
#endif
}
    66aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    66ae:	f7fe be3a 	b.w	5326 <mbedtls_mpi_free>
}
    66b2:	bd10      	pop	{r4, pc}

000066b4 <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    66b4:	226c      	movs	r2, #108	; 0x6c
    66b6:	2100      	movs	r1, #0
    66b8:	f7fe bb54 	b.w	4d64 <memset>

000066bc <mbedtls_sha256_update>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    66bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66c0:	4605      	mov	r5, r0
    66c2:	460e      	mov	r6, r1
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
    66c4:	4614      	mov	r4, r2
    66c6:	b3a2      	cbz	r2, 6732 <mbedtls_sha256_update+0x76>
        return( 0 );

    left = ctx->total[0] & 0x3F;
    66c8:	6803      	ldr	r3, [r0, #0]
    66ca:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = SHA256_BLOCK_SIZE - left;

    ctx->total[0] += (uint32_t) ilen;
    66ce:	189b      	adds	r3, r3, r2
    66d0:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
    66d2:	bf22      	ittt	cs
    66d4:	6843      	ldrcs	r3, [r0, #4]
    66d6:	3301      	addcs	r3, #1
    66d8:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
    66da:	b387      	cbz	r7, 673e <mbedtls_sha256_update+0x82>
    fill = SHA256_BLOCK_SIZE - left;
    66dc:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    66e0:	454a      	cmp	r2, r9
    66e2:	d31f      	bcc.n	6724 <mbedtls_sha256_update+0x68>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
    66e4:	f100 0828 	add.w	r8, r0, #40	; 0x28
    66e8:	464a      	mov	r2, r9
    66ea:	eb08 0007 	add.w	r0, r8, r7
    66ee:	f7fe fb2e 	bl	4d4e <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    66f2:	4641      	mov	r1, r8
    66f4:	4628      	mov	r0, r5
    66f6:	f7fc ff3f 	bl	3578 <mbedtls_internal_sha256_process>
    66fa:	b9d8      	cbnz	r0, 6734 <mbedtls_sha256_update+0x78>
            return( ret );

        input += fill;
    66fc:	4427      	add	r7, r4
        ilen  -= fill;
    66fe:	f1a7 0440 	sub.w	r4, r7, #64	; 0x40
        left = 0;
    }

    while( ilen >= SHA256_BLOCK_SIZE )
    6702:	2c3f      	cmp	r4, #63	; 0x3f
        input += fill;
    6704:	444e      	add	r6, r9
    while( ilen >= SHA256_BLOCK_SIZE )
    6706:	d90b      	bls.n	6720 <mbedtls_sha256_update+0x64>
    size_t processed = 0;
    6708:	2700      	movs	r7, #0
        if( mbedtls_internal_sha256_process_c( ctx, data ) != 0 )
    670a:	4628      	mov	r0, r5
    670c:	19f1      	adds	r1, r6, r7
    670e:	f7fc ff33 	bl	3578 <mbedtls_internal_sha256_process>
    6712:	b988      	cbnz	r0, 6738 <mbedtls_sha256_update+0x7c>
        processed += SHA256_BLOCK_SIZE;
    6714:	3740      	adds	r7, #64	; 0x40
    while( len >= SHA256_BLOCK_SIZE )
    6716:	1be3      	subs	r3, r4, r7
    6718:	2b3f      	cmp	r3, #63	; 0x3f
    671a:	d8f6      	bhi.n	670a <mbedtls_sha256_update+0x4e>
        size_t processed =
                    mbedtls_internal_sha256_process_many( ctx, input, ilen );
        if( processed < SHA256_BLOCK_SIZE )
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );

        input += processed;
    671c:	461c      	mov	r4, r3
    671e:	443e      	add	r6, r7
        ilen  -= processed;
    }

    if( ilen > 0 )
    6720:	b13c      	cbz	r4, 6732 <mbedtls_sha256_update+0x76>
    6722:	2700      	movs	r7, #0
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    6724:	f105 0028 	add.w	r0, r5, #40	; 0x28
    6728:	4622      	mov	r2, r4
    672a:	4631      	mov	r1, r6
    672c:	4438      	add	r0, r7
    672e:	f7fe fb0e 	bl	4d4e <memcpy>
        return( 0 );
    6732:	2000      	movs	r0, #0

    return( 0 );
}
    6734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            return( MBEDTLS_ERR_ERROR_GENERIC_ERROR );
    6738:	f04f 30ff 	mov.w	r0, #4294967295
    673c:	e7fa      	b.n	6734 <mbedtls_sha256_update+0x78>
    while( ilen >= SHA256_BLOCK_SIZE )
    673e:	2a3f      	cmp	r2, #63	; 0x3f
    6740:	d8e2      	bhi.n	6708 <mbedtls_sha256_update+0x4c>
    6742:	e7ef      	b.n	6724 <mbedtls_sha256_update+0x68>

00006744 <mbedtls_sha256_finish>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish( mbedtls_sha256_context *ctx,
                               unsigned char *output )
{
    6744:	b570      	push	{r4, r5, r6, lr}
    6746:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    6748:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    674a:	6803      	ldr	r3, [r0, #0]

    if( used <= 56 )
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    674c:	f100 0628 	add.w	r6, r0, #40	; 0x28
    used = ctx->total[0] & 0x3F;
    6750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    6754:	1c5a      	adds	r2, r3, #1
    if( used <= 56 )
    6756:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    6758:	4403      	add	r3, r0
{
    675a:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    675c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
        memset( ctx->buffer + used, 0, 56 - used );
    6760:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    6764:	d861      	bhi.n	682a <mbedtls_sha256_finish+0xe6>
        memset( ctx->buffer + used, 0, 56 - used );
    6766:	2100      	movs	r1, #0
    6768:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    676c:	f7fe fafa 	bl	4d64 <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    6770:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    6774:	0f5a      	lsrs	r2, r3, #29
    6776:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    677a:	00db      	lsls	r3, r3, #3
    677c:	ba12      	rev	r2, r2
    677e:	ba1b      	rev	r3, r3

    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    6780:	4631      	mov	r1, r6
    6782:	4620      	mov	r0, r4
    MBEDTLS_PUT_UINT32_BE( high, ctx->buffer, 56 );
    6784:	6622      	str	r2, [r4, #96]	; 0x60
    MBEDTLS_PUT_UINT32_BE( low,  ctx->buffer, 60 );
    6786:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    6788:	f7fc fef6 	bl	3578 <mbedtls_internal_sha256_process>
    678c:	2800      	cmp	r0, #0
    678e:	d14b      	bne.n	6828 <mbedtls_sha256_finish+0xe4>
        return( ret );

    /*
     * Output final state
     */
    MBEDTLS_PUT_UINT32_BE( ctx->state[0], output,  0 );
    6790:	7ae3      	ldrb	r3, [r4, #11]
    6792:	702b      	strb	r3, [r5, #0]
    6794:	8963      	ldrh	r3, [r4, #10]
    6796:	706b      	strb	r3, [r5, #1]
    6798:	68a3      	ldr	r3, [r4, #8]
    679a:	0a1b      	lsrs	r3, r3, #8
    679c:	70ab      	strb	r3, [r5, #2]
    679e:	68a3      	ldr	r3, [r4, #8]
    67a0:	70eb      	strb	r3, [r5, #3]
    MBEDTLS_PUT_UINT32_BE( ctx->state[1], output,  4 );
    67a2:	7be3      	ldrb	r3, [r4, #15]
    67a4:	712b      	strb	r3, [r5, #4]
    67a6:	89e3      	ldrh	r3, [r4, #14]
    67a8:	716b      	strb	r3, [r5, #5]
    67aa:	68e3      	ldr	r3, [r4, #12]
    67ac:	0a1b      	lsrs	r3, r3, #8
    67ae:	71ab      	strb	r3, [r5, #6]
    67b0:	68e3      	ldr	r3, [r4, #12]
    67b2:	71eb      	strb	r3, [r5, #7]
    MBEDTLS_PUT_UINT32_BE( ctx->state[2], output,  8 );
    67b4:	7ce3      	ldrb	r3, [r4, #19]
    67b6:	722b      	strb	r3, [r5, #8]
    67b8:	8a63      	ldrh	r3, [r4, #18]
    67ba:	726b      	strb	r3, [r5, #9]
    67bc:	6923      	ldr	r3, [r4, #16]
    67be:	0a1b      	lsrs	r3, r3, #8
    67c0:	72ab      	strb	r3, [r5, #10]
    67c2:	6923      	ldr	r3, [r4, #16]
    67c4:	72eb      	strb	r3, [r5, #11]
    MBEDTLS_PUT_UINT32_BE( ctx->state[3], output, 12 );
    67c6:	7de3      	ldrb	r3, [r4, #23]
    67c8:	732b      	strb	r3, [r5, #12]
    67ca:	8ae3      	ldrh	r3, [r4, #22]
    67cc:	736b      	strb	r3, [r5, #13]
    67ce:	6963      	ldr	r3, [r4, #20]
    67d0:	0a1b      	lsrs	r3, r3, #8
    67d2:	73ab      	strb	r3, [r5, #14]
    67d4:	6963      	ldr	r3, [r4, #20]
    67d6:	73eb      	strb	r3, [r5, #15]
    MBEDTLS_PUT_UINT32_BE( ctx->state[4], output, 16 );
    67d8:	7ee3      	ldrb	r3, [r4, #27]
    67da:	742b      	strb	r3, [r5, #16]
    67dc:	8b63      	ldrh	r3, [r4, #26]
    67de:	746b      	strb	r3, [r5, #17]
    67e0:	69a3      	ldr	r3, [r4, #24]
    67e2:	0a1b      	lsrs	r3, r3, #8
    67e4:	74ab      	strb	r3, [r5, #18]
    67e6:	69a3      	ldr	r3, [r4, #24]
    67e8:	74eb      	strb	r3, [r5, #19]
    MBEDTLS_PUT_UINT32_BE( ctx->state[5], output, 20 );
    67ea:	7fe3      	ldrb	r3, [r4, #31]
    67ec:	752b      	strb	r3, [r5, #20]
    67ee:	8be3      	ldrh	r3, [r4, #30]
    67f0:	756b      	strb	r3, [r5, #21]
    67f2:	69e3      	ldr	r3, [r4, #28]
    67f4:	0a1b      	lsrs	r3, r3, #8
    67f6:	75ab      	strb	r3, [r5, #22]
    67f8:	69e3      	ldr	r3, [r4, #28]
    67fa:	75eb      	strb	r3, [r5, #23]
    MBEDTLS_PUT_UINT32_BE( ctx->state[6], output, 24 );
    67fc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    6800:	762b      	strb	r3, [r5, #24]
    6802:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    6804:	766b      	strb	r3, [r5, #25]
    6806:	6a23      	ldr	r3, [r4, #32]
    6808:	0a1b      	lsrs	r3, r3, #8
    680a:	76ab      	strb	r3, [r5, #26]
    680c:	6a23      	ldr	r3, [r4, #32]
    680e:	76eb      	strb	r3, [r5, #27]

    int truncated = 0;
#if defined(MBEDTLS_SHA224_C)
    truncated = ctx->is224;
#endif
    if( !truncated )
    6810:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6812:	b94b      	cbnz	r3, 6828 <mbedtls_sha256_finish+0xe4>
        MBEDTLS_PUT_UINT32_BE( ctx->state[7], output, 28 );
    6814:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    6818:	772b      	strb	r3, [r5, #28]
    681a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    681c:	776b      	strb	r3, [r5, #29]
    681e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6820:	0a1b      	lsrs	r3, r3, #8
    6822:	77ab      	strb	r3, [r5, #30]
    6824:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6826:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    6828:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, SHA256_BLOCK_SIZE - used );
    682a:	2100      	movs	r1, #0
    682c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    6830:	f7fe fa98 	bl	4d64 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    6834:	4631      	mov	r1, r6
    6836:	4620      	mov	r0, r4
    6838:	f7fc fe9e 	bl	3578 <mbedtls_internal_sha256_process>
    683c:	2800      	cmp	r0, #0
    683e:	d1f3      	bne.n	6828 <mbedtls_sha256_finish+0xe4>
        memset( ctx->buffer, 0, 56 );
    6840:	4601      	mov	r1, r0
    6842:	2238      	movs	r2, #56	; 0x38
    6844:	4630      	mov	r0, r6
    6846:	e791      	b.n	676c <mbedtls_sha256_finish+0x28>

00006848 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6848:	4700      	bx	r0

0000684a <nrfx_busy_wait>:
    684a:	f000 b994 	b.w	6b76 <z_impl_k_busy_wait>

0000684e <clock_stop>:
{
    684e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    6850:	2803      	cmp	r0, #3
    6852:	f200 80a7 	bhi.w	69a4 <clock_stop+0x156>
    6856:	e8df f000 	tbb	[pc, r0]
    685a:	1902      	.short	0x1902
    685c:	3527      	.short	0x3527
    p_reg->INTENCLR = mask;
    685e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6862:	2202      	movs	r2, #2
    6864:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6868:	2200      	movs	r2, #0
    686a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    686e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6872:	2201      	movs	r2, #1
    6874:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6876:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6878:	2301      	movs	r3, #1
    687a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    687e:	2803      	cmp	r0, #3
    6880:	f200 8090 	bhi.w	69a4 <clock_stop+0x156>
    6884:	e8df f000 	tbb	[pc, r0]
    6888:	9a78692c 	.word	0x9a78692c
    p_reg->INTENCLR = mask;
    688c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6890:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6892:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    6894:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6898:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    689c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    68a0:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68a4:	605a      	str	r2, [r3, #4]
    68a6:	e7e7      	b.n	6878 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    68a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    68ac:	f44f 7200 	mov.w	r2, #512	; 0x200
    68b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68b4:	2200      	movs	r2, #0
    68b6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    68ba:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68be:	2201      	movs	r2, #1
    68c0:	625a      	str	r2, [r3, #36]	; 0x24
    68c2:	e7d8      	b.n	6876 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    68c4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    68c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    68cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68d0:	2200      	movs	r2, #0
    68d2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    68d6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68da:	2201      	movs	r2, #1
    68dc:	61da      	str	r2, [r3, #28]
    68de:	e7ca      	b.n	6876 <clock_stop+0x28>
    switch (domain)
    68e0:	f242 7510 	movw	r5, #10000	; 0x2710
    68e4:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    68e8:	b36c      	cbz	r4, 6946 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    68ea:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    68ee:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    68f2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    68f4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    68f8:	03d9      	lsls	r1, r3, #15
    68fa:	d553      	bpl.n	69a4 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    68fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6900:	2801      	cmp	r0, #1
    6902:	d14f      	bne.n	69a4 <clock_stop+0x156>
    6904:	f7ff ffa1 	bl	684a <nrfx_busy_wait>
    6908:	3d01      	subs	r5, #1
    690a:	d1ed      	bne.n	68e8 <clock_stop+0x9a>
    690c:	e04a      	b.n	69a4 <clock_stop+0x156>
    690e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6912:	2801      	cmp	r0, #1
    6914:	d146      	bne.n	69a4 <clock_stop+0x156>
    6916:	f7ff ff98 	bl	684a <nrfx_busy_wait>
    691a:	3d01      	subs	r5, #1
    691c:	d152      	bne.n	69c4 <clock_stop+0x176>
    691e:	e041      	b.n	69a4 <clock_stop+0x156>
    6920:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6924:	2801      	cmp	r0, #1
    6926:	d13d      	bne.n	69a4 <clock_stop+0x156>
    6928:	f7ff ff8f 	bl	684a <nrfx_busy_wait>
    692c:	3d01      	subs	r5, #1
    692e:	d039      	beq.n	69a4 <clock_stop+0x156>
            if (p_clk_src != NULL)
    6930:	b1c4      	cbz	r4, 6964 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6932:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6936:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    693a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    693c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6940:	03db      	lsls	r3, r3, #15
    6942:	d52f      	bpl.n	69a4 <clock_stop+0x156>
    6944:	e7ec      	b.n	6920 <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6946:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    694a:	03da      	lsls	r2, r3, #15
    694c:	d52a      	bpl.n	69a4 <clock_stop+0x156>
    694e:	2001      	movs	r0, #1
    6950:	f7ff ff7b 	bl	684a <nrfx_busy_wait>
    6954:	3d01      	subs	r5, #1
    6956:	d1f6      	bne.n	6946 <clock_stop+0xf8>
    6958:	e024      	b.n	69a4 <clock_stop+0x156>
    switch (domain)
    695a:	f242 7510 	movw	r5, #10000	; 0x2710
    695e:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    6962:	e7e5      	b.n	6930 <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6964:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6968:	03d8      	lsls	r0, r3, #15
    696a:	d51b      	bpl.n	69a4 <clock_stop+0x156>
    696c:	2001      	movs	r0, #1
    696e:	f7ff ff6c 	bl	684a <nrfx_busy_wait>
    6972:	3d01      	subs	r5, #1
    6974:	d1f6      	bne.n	6964 <clock_stop+0x116>
    6976:	e015      	b.n	69a4 <clock_stop+0x156>
    switch (domain)
    6978:	f242 7510 	movw	r5, #10000	; 0x2710
    697c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    6980:	b194      	cbz	r4, 69a8 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6982:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    6986:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    698a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    698c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    6990:	03d9      	lsls	r1, r3, #15
    6992:	d507      	bpl.n	69a4 <clock_stop+0x156>
    6994:	f89d 0007 	ldrb.w	r0, [sp, #7]
    6998:	2801      	cmp	r0, #1
    699a:	d103      	bne.n	69a4 <clock_stop+0x156>
    699c:	f7ff ff55 	bl	684a <nrfx_busy_wait>
    69a0:	3d01      	subs	r5, #1
    69a2:	d1ed      	bne.n	6980 <clock_stop+0x132>
}
    69a4:	b002      	add	sp, #8
    69a6:	bd70      	pop	{r4, r5, r6, pc}
    69a8:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    69ac:	03da      	lsls	r2, r3, #15
    69ae:	d5f9      	bpl.n	69a4 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    69b0:	2001      	movs	r0, #1
    69b2:	f7ff ff4a 	bl	684a <nrfx_busy_wait>
    69b6:	3d01      	subs	r5, #1
    69b8:	d1f6      	bne.n	69a8 <clock_stop+0x15a>
    69ba:	e7f3      	b.n	69a4 <clock_stop+0x156>
    switch (domain)
    69bc:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    69c0:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    69c4:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    69c8:	03db      	lsls	r3, r3, #15
    69ca:	d5eb      	bpl.n	69a4 <clock_stop+0x156>
    69cc:	2c00      	cmp	r4, #0
    69ce:	d19e      	bne.n	690e <clock_stop+0xc0>
    69d0:	2001      	movs	r0, #1
    69d2:	e7a0      	b.n	6916 <clock_stop+0xc8>

000069d4 <nrfx_clock_enable>:
{
    69d4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    69d6:	2005      	movs	r0, #5
    69d8:	f7fa fe30 	bl	163c <arch_irq_is_enabled>
    69dc:	b910      	cbnz	r0, 69e4 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    69de:	2005      	movs	r0, #5
    69e0:	f7fa fe0a 	bl	15f8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    69e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    69e8:	2201      	movs	r2, #1
    69ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
    69ee:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    69f2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    69f6:	bd08      	pop	{r3, pc}

000069f8 <nrfx_clock_start>:
{
    69f8:	b508      	push	{r3, lr}
    switch (domain)
    69fa:	2803      	cmp	r0, #3
    69fc:	d819      	bhi.n	6a32 <nrfx_clock_start+0x3a>
    69fe:	e8df f000 	tbb	[pc, r0]
    6a02:	3202      	.short	0x3202
    6a04:	4c3e      	.short	0x4c3e
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6a06:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6a0a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6a0e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6a12:	03c9      	lsls	r1, r1, #15
    6a14:	d40e      	bmi.n	6a34 <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6a16:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6a1a:	07db      	lsls	r3, r3, #31
    6a1c:	d513      	bpl.n	6a46 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6a1e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    6a22:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6a26:	3b01      	subs	r3, #1
    6a28:	2b01      	cmp	r3, #1
    6a2a:	d809      	bhi.n	6a40 <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    6a2c:	2302      	movs	r3, #2
    6a2e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6a32:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6a34:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6a38:	2b02      	cmp	r3, #2
    6a3a:	d005      	beq.n	6a48 <nrfx_clock_start+0x50>
    6a3c:	2b01      	cmp	r3, #1
    6a3e:	d002      	beq.n	6a46 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6a40:	2000      	movs	r0, #0
    6a42:	f7ff ff04 	bl	684e <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6a46:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    6a48:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6a4c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a50:	2300      	movs	r3, #0
    6a52:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6a56:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    6a5a:	2302      	movs	r3, #2
    6a5c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a60:	2301      	movs	r3, #1
    6a62:	6093      	str	r3, [r2, #8]
}
    6a64:	e7e5      	b.n	6a32 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a66:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6a6a:	2200      	movs	r2, #0
    6a6c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6a70:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6a74:	2201      	movs	r2, #1
    6a76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a7a:	601a      	str	r2, [r3, #0]
}
    6a7c:	e7d9      	b.n	6a32 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a7e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6a82:	2200      	movs	r2, #0
    6a84:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6a88:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    6a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
    6a90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6a94:	2201      	movs	r2, #1
    6a96:	621a      	str	r2, [r3, #32]
}
    6a98:	e7cb      	b.n	6a32 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6a9a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6a9e:	2200      	movs	r2, #0
    6aa0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6aa4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    6aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
    6aac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ab0:	2201      	movs	r2, #1
    6ab2:	619a      	str	r2, [r3, #24]
}
    6ab4:	e7bd      	b.n	6a32 <nrfx_clock_start+0x3a>

00006ab6 <nrfx_clock_stop>:
    clock_stop(domain);
    6ab6:	f7ff beca 	b.w	684e <clock_stop>

00006aba <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    6aba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6abe:	4770      	bx	lr

00006ac0 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    6ac0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6ac4:	4770      	bx	lr

00006ac6 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    6ac6:	f44f 7080 	mov.w	r0, #256	; 0x100
    6aca:	4770      	bx	lr

00006acc <nrf_gpio_cfg_default>:
    nrf_gpio_cfg(
    6acc:	2100      	movs	r1, #0
    6ace:	f7fd b83f 	b.w	3b50 <nrf_gpio_cfg.constprop.0>

00006ad2 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
    6ad2:	2302      	movs	r3, #2
    6ad4:	f7fc bf94 	b.w	3a00 <qspi_xfer>

00006ad8 <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
    6ad8:	2303      	movs	r3, #3
    6ada:	f7fc bf91 	b.w	3a00 <qspi_xfer>

00006ade <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
    6ade:	2100      	movs	r1, #0
    6ae0:	2002      	movs	r0, #2
    6ae2:	f7fd ba47 	b.w	3f74 <nrfx_qspi_erase>

00006ae6 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    6ae6:	4770      	bx	lr

00006ae8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6ae8:	b140      	cbz	r0, 6afc <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6aea:	68c3      	ldr	r3, [r0, #12]
    6aec:	7858      	ldrb	r0, [r3, #1]
    6aee:	f010 0001 	ands.w	r0, r0, #1
    6af2:	bf1e      	ittt	ne
    6af4:	7818      	ldrbne	r0, [r3, #0]
    6af6:	fab0 f080 	clzne	r0, r0
    6afa:	0940      	lsrne	r0, r0, #5
}
    6afc:	4770      	bx	lr

00006afe <arch_system_halt>:
	__asm__ volatile(
    6afe:	f04f 0220 	mov.w	r2, #32
    6b02:	f3ef 8311 	mrs	r3, BASEPRI
    6b06:	f382 8812 	msr	BASEPRI_MAX, r2
    6b0a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    6b0e:	e7fe      	b.n	6b0e <arch_system_halt+0x10>

00006b10 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    6b10:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    6b12:	f7ff fff4 	bl	6afe <arch_system_halt>

00006b16 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6b16:	b510      	push	{r4, lr}
    6b18:	f04f 0320 	mov.w	r3, #32
    6b1c:	f3ef 8411 	mrs	r4, BASEPRI
    6b20:	f383 8812 	msr	BASEPRI_MAX, r3
    6b24:	f3bf 8f6f 	isb	sy

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6b28:	f7ff fff2 	bl	6b10 <k_sys_fatal_error_handler>
	__asm__ volatile(
    6b2c:	f384 8811 	msr	BASEPRI, r4
    6b30:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6b34:	bd10      	pop	{r4, pc}

00006b36 <z_early_memset>:
	(void) memset(dst, c, n);
    6b36:	f7fe b915 	b.w	4d64 <memset>

00006b3a <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6b3a:	f7fe b908 	b.w	4d4e <memcpy>

00006b3e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6b3e:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    6b42:	3800      	subs	r0, #0
    6b44:	bf18      	it	ne
    6b46:	2001      	movne	r0, #1
    6b48:	4770      	bx	lr

00006b4a <z_abort_timeout>:
{
    6b4a:	b510      	push	{r4, lr}
	__asm__ volatile(
    6b4c:	f04f 0220 	mov.w	r2, #32
    6b50:	f3ef 8411 	mrs	r4, BASEPRI
    6b54:	f382 8812 	msr	BASEPRI_MAX, r2
    6b58:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6b5c:	6803      	ldr	r3, [r0, #0]
    6b5e:	b13b      	cbz	r3, 6b70 <z_abort_timeout+0x26>
			remove_timeout(to);
    6b60:	f7fd fb2c 	bl	41bc <remove_timeout>
			ret = 0;
    6b64:	2000      	movs	r0, #0
	__asm__ volatile(
    6b66:	f384 8811 	msr	BASEPRI, r4
    6b6a:	f3bf 8f6f 	isb	sy
}
    6b6e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6b70:	f06f 0015 	mvn.w	r0, #21
    6b74:	e7f7      	b.n	6b66 <z_abort_timeout+0x1c>

00006b76 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6b76:	b108      	cbz	r0, 6b7c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6b78:	f7fa bcb4 	b.w	14e4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6b7c:	4770      	bx	lr

00006b7e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6b7e:	b510      	push	{r4, lr}
    6b80:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    6b82:	f7ff ffe2 	bl	6b4a <z_abort_timeout>

	if (inactive) {
    6b86:	b928      	cbnz	r0, 6b94 <z_impl_k_timer_stop+0x16>
		return;
	}

	if (timer->stop_fn != NULL) {
    6b88:	69e3      	ldr	r3, [r4, #28]
    6b8a:	b11b      	cbz	r3, 6b94 <z_impl_k_timer_stop+0x16>
		timer->stop_fn(timer);
    6b8c:	4620      	mov	r0, r4
		if (pending_thread != NULL) {
			z_ready_thread(pending_thread);
			z_reschedule_unlocked();
		}
	}
}
    6b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		timer->stop_fn(timer);
    6b92:	4718      	bx	r3
}
    6b94:	bd10      	pop	{r4, pc}

00006b96 <boot_banner>:
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
#endif /* CONFIG_BOOT_BANNER */
}
    6b96:	4770      	bx	lr

00006b98 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6b98:	4770      	bx	lr
	...
